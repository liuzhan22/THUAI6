// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Message2Clients.proto

#include "Message2Clients.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace protobuf
{
    PROTOBUF_CONSTEXPR MessageOfStudent::MessageOfStudent(
        ::_pbi::ConstantInitialized
    ) :
        _impl_{
            /*decltype(_impl_.time_until_skill_available_)*/ {}, /*decltype(_impl_.prop_)*/ {}, /*decltype(_impl_._prop_cached_byte_size_)*/ {0}, /*decltype(_impl_.buff_)*/ {}, /*decltype(_impl_._buff_cached_byte_size_)*/ {0}, /*decltype(_impl_.x_)*/ 0, /*decltype(_impl_.y_)*/ 0, /*decltype(_impl_.speed_)*/ 0, /*decltype(_impl_.determination_)*/ 0, /*decltype(_impl_.addiction_)*/ 0, /*decltype(_impl_.place_)*/ 0, /*decltype(_impl_.guid_)*/ int64_t{0}, /*decltype(_impl_.player_state_)*/ 0, /*decltype(_impl_.bullet_type_)*/ 0, /*decltype(_impl_.learning_speed_)*/ 0, /*decltype(_impl_.treat_speed_)*/ 0, /*decltype(_impl_.player_id_)*/ int64_t{0}, /*decltype(_impl_.view_range_)*/ 0, /*decltype(_impl_.radius_)*/ 0, /*decltype(_impl_.danger_alert_)*/ 0, /*decltype(_impl_.score_)*/ 0, /*decltype(_impl_.treat_progress_)*/ 0, /*decltype(_impl_.rescue_progress_)*/ 0, /*decltype(_impl_.student_type_)*/ 0, /*decltype(_impl_.facing_direction_)*/ 0, /*decltype(_impl_._cached_size_)*/ {}}
    {
    }
    struct MessageOfStudentDefaultTypeInternal
    {
        PROTOBUF_CONSTEXPR MessageOfStudentDefaultTypeInternal() :
            _instance(::_pbi::ConstantInitialized{})
        {
        }
        ~MessageOfStudentDefaultTypeInternal()
        {
        }
        union
        {
            MessageOfStudent _instance;
        };
    };
    PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MessageOfStudentDefaultTypeInternal _MessageOfStudent_default_instance_;
    PROTOBUF_CONSTEXPR MessageOfTricker::MessageOfTricker(
        ::_pbi::ConstantInitialized
    ) :
        _impl_{
            /*decltype(_impl_.time_until_skill_available_)*/ {}, /*decltype(_impl_.prop_)*/ {}, /*decltype(_impl_._prop_cached_byte_size_)*/ {0}, /*decltype(_impl_.buff_)*/ {}, /*decltype(_impl_._buff_cached_byte_size_)*/ {0}, /*decltype(_impl_.x_)*/ 0, /*decltype(_impl_.y_)*/ 0, /*decltype(_impl_.speed_)*/ 0, /*decltype(_impl_.place_)*/ 0, /*decltype(_impl_.guid_)*/ int64_t{0}, /*decltype(_impl_.tricker_type_)*/ 0, /*decltype(_impl_.score_)*/ 0, /*decltype(_impl_.player_id_)*/ int64_t{0}, /*decltype(_impl_.view_range_)*/ 0, /*decltype(_impl_.radius_)*/ 0, /*decltype(_impl_.trick_desire_)*/ 0, /*decltype(_impl_.class_volume_)*/ 0, /*decltype(_impl_.player_state_)*/ 0, /*decltype(_impl_.bullet_type_)*/ 0, /*decltype(_impl_.facing_direction_)*/ 0, /*decltype(_impl_._cached_size_)*/ {}}
    {
    }
    struct MessageOfTrickerDefaultTypeInternal
    {
        PROTOBUF_CONSTEXPR MessageOfTrickerDefaultTypeInternal() :
            _instance(::_pbi::ConstantInitialized{})
        {
        }
        ~MessageOfTrickerDefaultTypeInternal()
        {
        }
        union
        {
            MessageOfTricker _instance;
        };
    };
    PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MessageOfTrickerDefaultTypeInternal _MessageOfTricker_default_instance_;
    PROTOBUF_CONSTEXPR MessageOfBullet::MessageOfBullet(
        ::_pbi::ConstantInitialized
    ) :
        _impl_{
            /*decltype(_impl_.type_)*/ 0, /*decltype(_impl_.x_)*/ 0, /*decltype(_impl_.facing_direction_)*/ 0, /*decltype(_impl_.y_)*/ 0, /*decltype(_impl_.team_)*/ 0, /*decltype(_impl_.guid_)*/ int64_t{0}, /*decltype(_impl_.bomb_range_)*/ 0, /*decltype(_impl_.place_)*/ 0, /*decltype(_impl_.speed_)*/ 0, /*decltype(_impl_._cached_size_)*/ {}}
    {
    }
    struct MessageOfBulletDefaultTypeInternal
    {
        PROTOBUF_CONSTEXPR MessageOfBulletDefaultTypeInternal() :
            _instance(::_pbi::ConstantInitialized{})
        {
        }
        ~MessageOfBulletDefaultTypeInternal()
        {
        }
        union
        {
            MessageOfBullet _instance;
        };
    };
    PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MessageOfBulletDefaultTypeInternal _MessageOfBullet_default_instance_;
    PROTOBUF_CONSTEXPR MessageOfBombedBullet::MessageOfBombedBullet(
        ::_pbi::ConstantInitialized
    ) :
        _impl_{
            /*decltype(_impl_.type_)*/ 0, /*decltype(_impl_.x_)*/ 0, /*decltype(_impl_.facing_direction_)*/ 0, /*decltype(_impl_.mapping_id_)*/ int64_t{0}, /*decltype(_impl_.bomb_range_)*/ 0, /*decltype(_impl_.y_)*/ 0, /*decltype(_impl_._cached_size_)*/ {}}
    {
    }
    struct MessageOfBombedBulletDefaultTypeInternal
    {
        PROTOBUF_CONSTEXPR MessageOfBombedBulletDefaultTypeInternal() :
            _instance(::_pbi::ConstantInitialized{})
        {
        }
        ~MessageOfBombedBulletDefaultTypeInternal()
        {
        }
        union
        {
            MessageOfBombedBullet _instance;
        };
    };
    PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MessageOfBombedBulletDefaultTypeInternal _MessageOfBombedBullet_default_instance_;
    PROTOBUF_CONSTEXPR MessageOfProp::MessageOfProp(
        ::_pbi::ConstantInitialized
    ) :
        _impl_{
            /*decltype(_impl_.type_)*/ 0, /*decltype(_impl_.x_)*/ 0, /*decltype(_impl_.facing_direction_)*/ 0, /*decltype(_impl_.y_)*/ 0, /*decltype(_impl_.place_)*/ 0, /*decltype(_impl_.guid_)*/ int64_t{0}, /*decltype(_impl_._cached_size_)*/ {}}
    {
    }
    struct MessageOfPropDefaultTypeInternal
    {
        PROTOBUF_CONSTEXPR MessageOfPropDefaultTypeInternal() :
            _instance(::_pbi::ConstantInitialized{})
        {
        }
        ~MessageOfPropDefaultTypeInternal()
        {
        }
        union
        {
            MessageOfProp _instance;
        };
    };
    PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MessageOfPropDefaultTypeInternal _MessageOfProp_default_instance_;
    PROTOBUF_CONSTEXPR MessageOfPickedProp::MessageOfPickedProp(
        ::_pbi::ConstantInitialized
    ) :
        _impl_{
            /*decltype(_impl_.type_)*/ 0, /*decltype(_impl_.x_)*/ 0, /*decltype(_impl_.facing_direction_)*/ 0, /*decltype(_impl_.mapping_id_)*/ int64_t{0}, /*decltype(_impl_.y_)*/ 0, /*decltype(_impl_._cached_size_)*/ {}}
    {
    }
    struct MessageOfPickedPropDefaultTypeInternal
    {
        PROTOBUF_CONSTEXPR MessageOfPickedPropDefaultTypeInternal() :
            _instance(::_pbi::ConstantInitialized{})
        {
        }
        ~MessageOfPickedPropDefaultTypeInternal()
        {
        }
        union
        {
            MessageOfPickedProp _instance;
        };
    };
    PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MessageOfPickedPropDefaultTypeInternal _MessageOfPickedProp_default_instance_;
    PROTOBUF_CONSTEXPR MessageOfClassroom::MessageOfClassroom(
        ::_pbi::ConstantInitialized
    ) :
        _impl_{
            /*decltype(_impl_.x_)*/ 0, /*decltype(_impl_.y_)*/ 0, /*decltype(_impl_.progress_)*/ 0, /*decltype(_impl_._cached_size_)*/ {}}
    {
    }
    struct MessageOfClassroomDefaultTypeInternal
    {
        PROTOBUF_CONSTEXPR MessageOfClassroomDefaultTypeInternal() :
            _instance(::_pbi::ConstantInitialized{})
        {
        }
        ~MessageOfClassroomDefaultTypeInternal()
        {
        }
        union
        {
            MessageOfClassroom _instance;
        };
    };
    PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MessageOfClassroomDefaultTypeInternal _MessageOfClassroom_default_instance_;
    PROTOBUF_CONSTEXPR MessageOfGate::MessageOfGate(
        ::_pbi::ConstantInitialized
    ) :
        _impl_{
            /*decltype(_impl_.x_)*/ 0, /*decltype(_impl_.y_)*/ 0, /*decltype(_impl_.progress_)*/ 0, /*decltype(_impl_._cached_size_)*/ {}}
    {
    }
    struct MessageOfGateDefaultTypeInternal
    {
        PROTOBUF_CONSTEXPR MessageOfGateDefaultTypeInternal() :
            _instance(::_pbi::ConstantInitialized{})
        {
        }
        ~MessageOfGateDefaultTypeInternal()
        {
        }
        union
        {
            MessageOfGate _instance;
        };
    };
    PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MessageOfGateDefaultTypeInternal _MessageOfGate_default_instance_;
    PROTOBUF_CONSTEXPR MessageOfHiddenGate::MessageOfHiddenGate(
        ::_pbi::ConstantInitialized
    ) :
        _impl_{
            /*decltype(_impl_.x_)*/ 0, /*decltype(_impl_.y_)*/ 0, /*decltype(_impl_.opened_)*/ false, /*decltype(_impl_._cached_size_)*/ {}}
    {
    }
    struct MessageOfHiddenGateDefaultTypeInternal
    {
        PROTOBUF_CONSTEXPR MessageOfHiddenGateDefaultTypeInternal() :
            _instance(::_pbi::ConstantInitialized{})
        {
        }
        ~MessageOfHiddenGateDefaultTypeInternal()
        {
        }
        union
        {
            MessageOfHiddenGate _instance;
        };
    };
    PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MessageOfHiddenGateDefaultTypeInternal _MessageOfHiddenGate_default_instance_;
    PROTOBUF_CONSTEXPR MessageOfDoor::MessageOfDoor(
        ::_pbi::ConstantInitialized
    ) :
        _impl_{
            /*decltype(_impl_.x_)*/ 0, /*decltype(_impl_.y_)*/ 0, /*decltype(_impl_.is_open_)*/ false, /*decltype(_impl_.progress_)*/ 0, /*decltype(_impl_._cached_size_)*/ {}}
    {
    }
    struct MessageOfDoorDefaultTypeInternal
    {
        PROTOBUF_CONSTEXPR MessageOfDoorDefaultTypeInternal() :
            _instance(::_pbi::ConstantInitialized{})
        {
        }
        ~MessageOfDoorDefaultTypeInternal()
        {
        }
        union
        {
            MessageOfDoor _instance;
        };
    };
    PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MessageOfDoorDefaultTypeInternal _MessageOfDoor_default_instance_;
    PROTOBUF_CONSTEXPR MessageOfChest::MessageOfChest(
        ::_pbi::ConstantInitialized
    ) :
        _impl_{
            /*decltype(_impl_.x_)*/ 0, /*decltype(_impl_.y_)*/ 0, /*decltype(_impl_.progress_)*/ 0, /*decltype(_impl_._cached_size_)*/ {}}
    {
    }
    struct MessageOfChestDefaultTypeInternal
    {
        PROTOBUF_CONSTEXPR MessageOfChestDefaultTypeInternal() :
            _instance(::_pbi::ConstantInitialized{})
        {
        }
        ~MessageOfChestDefaultTypeInternal()
        {
        }
        union
        {
            MessageOfChest _instance;
        };
    };
    PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MessageOfChestDefaultTypeInternal _MessageOfChest_default_instance_;
    PROTOBUF_CONSTEXPR MessageOfMap_Row::MessageOfMap_Row(
        ::_pbi::ConstantInitialized
    ) :
        _impl_{
            /*decltype(_impl_.col_)*/ {}, /*decltype(_impl_._col_cached_byte_size_)*/ {0}, /*decltype(_impl_._cached_size_)*/ {}}
    {
    }
    struct MessageOfMap_RowDefaultTypeInternal
    {
        PROTOBUF_CONSTEXPR MessageOfMap_RowDefaultTypeInternal() :
            _instance(::_pbi::ConstantInitialized{})
        {
        }
        ~MessageOfMap_RowDefaultTypeInternal()
        {
        }
        union
        {
            MessageOfMap_Row _instance;
        };
    };
    PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MessageOfMap_RowDefaultTypeInternal _MessageOfMap_Row_default_instance_;
    PROTOBUF_CONSTEXPR MessageOfMap::MessageOfMap(
        ::_pbi::ConstantInitialized
    ) :
        _impl_{
            /*decltype(_impl_.row_)*/ {}, /*decltype(_impl_._cached_size_)*/ {}}
    {
    }
    struct MessageOfMapDefaultTypeInternal
    {
        PROTOBUF_CONSTEXPR MessageOfMapDefaultTypeInternal() :
            _instance(::_pbi::ConstantInitialized{})
        {
        }
        ~MessageOfMapDefaultTypeInternal()
        {
        }
        union
        {
            MessageOfMap _instance;
        };
    };
    PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MessageOfMapDefaultTypeInternal _MessageOfMap_default_instance_;
    PROTOBUF_CONSTEXPR MessageOfNews::MessageOfNews(
        ::_pbi::ConstantInitialized
    ) :
        _impl_{
            /*decltype(_impl_.news_)*/ {&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}, /*decltype(_impl_.from_id_)*/ int64_t{0}, /*decltype(_impl_.to_id_)*/ int64_t{0}, /*decltype(_impl_._cached_size_)*/ {}}
    {
    }
    struct MessageOfNewsDefaultTypeInternal
    {
        PROTOBUF_CONSTEXPR MessageOfNewsDefaultTypeInternal() :
            _instance(::_pbi::ConstantInitialized{})
        {
        }
        ~MessageOfNewsDefaultTypeInternal()
        {
        }
        union
        {
            MessageOfNews _instance;
        };
    };
    PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MessageOfNewsDefaultTypeInternal _MessageOfNews_default_instance_;
    PROTOBUF_CONSTEXPR MessageOfObj::MessageOfObj(
        ::_pbi::ConstantInitialized
    ) :
        _impl_{
            /*decltype(_impl_.message_of_obj_)*/ {}, /*decltype(_impl_._cached_size_)*/ {}, /*decltype(_impl_._oneof_case_)*/ {}}
    {
    }
    struct MessageOfObjDefaultTypeInternal
    {
        PROTOBUF_CONSTEXPR MessageOfObjDefaultTypeInternal() :
            _instance(::_pbi::ConstantInitialized{})
        {
        }
        ~MessageOfObjDefaultTypeInternal()
        {
        }
        union
        {
            MessageOfObj _instance;
        };
    };
    PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MessageOfObjDefaultTypeInternal _MessageOfObj_default_instance_;
    PROTOBUF_CONSTEXPR MessageOfAll::MessageOfAll(
        ::_pbi::ConstantInitialized
    ) :
        _impl_{
            /*decltype(_impl_.game_time_)*/ 0, /*decltype(_impl_.subject_finished_)*/ 0, /*decltype(_impl_.student_graduated_)*/ 0, /*decltype(_impl_.student_quited_)*/ 0, /*decltype(_impl_.student_score_)*/ 0, /*decltype(_impl_.tricker_score_)*/ 0, /*decltype(_impl_._cached_size_)*/ {}}
    {
    }
    struct MessageOfAllDefaultTypeInternal
    {
        PROTOBUF_CONSTEXPR MessageOfAllDefaultTypeInternal() :
            _instance(::_pbi::ConstantInitialized{})
        {
        }
        ~MessageOfAllDefaultTypeInternal()
        {
        }
        union
        {
            MessageOfAll _instance;
        };
    };
    PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MessageOfAllDefaultTypeInternal _MessageOfAll_default_instance_;
    PROTOBUF_CONSTEXPR MessageToClient::MessageToClient(
        ::_pbi::ConstantInitialized
    ) :
        _impl_{
            /*decltype(_impl_.obj_message_)*/ {}, /*decltype(_impl_.all_message_)*/ nullptr, /*decltype(_impl_.game_state_)*/ 0, /*decltype(_impl_._cached_size_)*/ {}}
    {
    }
    struct MessageToClientDefaultTypeInternal
    {
        PROTOBUF_CONSTEXPR MessageToClientDefaultTypeInternal() :
            _instance(::_pbi::ConstantInitialized{})
        {
        }
        ~MessageToClientDefaultTypeInternal()
        {
        }
        union
        {
            MessageToClient _instance;
        };
    };
    PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MessageToClientDefaultTypeInternal _MessageToClient_default_instance_;
    PROTOBUF_CONSTEXPR MoveRes::MoveRes(
        ::_pbi::ConstantInitialized
    ) :
        _impl_{
            /*decltype(_impl_.actual_speed_)*/ int64_t{0}, /*decltype(_impl_.actual_angle_)*/ 0, /*decltype(_impl_.act_success_)*/ false, /*decltype(_impl_._cached_size_)*/ {}}
    {
    }
    struct MoveResDefaultTypeInternal
    {
        PROTOBUF_CONSTEXPR MoveResDefaultTypeInternal() :
            _instance(::_pbi::ConstantInitialized{})
        {
        }
        ~MoveResDefaultTypeInternal()
        {
        }
        union
        {
            MoveRes _instance;
        };
    };
    PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MoveResDefaultTypeInternal _MoveRes_default_instance_;
    PROTOBUF_CONSTEXPR BoolRes::BoolRes(
        ::_pbi::ConstantInitialized
    ) :
        _impl_{
            /*decltype(_impl_.act_success_)*/ false, /*decltype(_impl_._cached_size_)*/ {}}
    {
    }
    struct BoolResDefaultTypeInternal
    {
        PROTOBUF_CONSTEXPR BoolResDefaultTypeInternal() :
            _instance(::_pbi::ConstantInitialized{})
        {
        }
        ~BoolResDefaultTypeInternal()
        {
        }
        union
        {
            BoolRes _instance;
        };
    };
    PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BoolResDefaultTypeInternal _BoolRes_default_instance_;
}  // namespace protobuf
static ::_pb::Metadata file_level_metadata_Message2Clients_2eproto[19];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_Message2Clients_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_Message2Clients_2eproto = nullptr;

const uint32_t TableStruct_Message2Clients_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfStudent, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfStudent, _impl_.x_),
    PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfStudent, _impl_.y_),
    PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfStudent, _impl_.speed_),
    PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfStudent, _impl_.determination_),
    PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfStudent, _impl_.addiction_),
    PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfStudent, _impl_.time_until_skill_available_),
    PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfStudent, _impl_.place_),
    PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfStudent, _impl_.prop_),
    PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfStudent, _impl_.player_state_),
    PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfStudent, _impl_.guid_),
    PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfStudent, _impl_.bullet_type_),
    PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfStudent, _impl_.learning_speed_),
    PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfStudent, _impl_.treat_speed_),
    PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfStudent, _impl_.player_id_),
    PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfStudent, _impl_.view_range_),
    PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfStudent, _impl_.radius_),
    PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfStudent, _impl_.danger_alert_),
    PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfStudent, _impl_.score_),
    PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfStudent, _impl_.treat_progress_),
    PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfStudent, _impl_.rescue_progress_),
    PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfStudent, _impl_.student_type_),
    PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfStudent, _impl_.facing_direction_),
    PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfStudent, _impl_.buff_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfTricker, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfTricker, _impl_.x_),
    PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfTricker, _impl_.y_),
    PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfTricker, _impl_.speed_),
    PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfTricker, _impl_.time_until_skill_available_),
    PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfTricker, _impl_.place_),
    PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfTricker, _impl_.prop_),
    PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfTricker, _impl_.tricker_type_),
    PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfTricker, _impl_.guid_),
    PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfTricker, _impl_.score_),
    PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfTricker, _impl_.player_id_),
    PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfTricker, _impl_.view_range_),
    PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfTricker, _impl_.radius_),
    PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfTricker, _impl_.player_state_),
    PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfTricker, _impl_.trick_desire_),
    PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfTricker, _impl_.class_volume_),
    PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfTricker, _impl_.facing_direction_),
    PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfTricker, _impl_.bullet_type_),
    PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfTricker, _impl_.buff_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfBullet, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfBullet, _impl_.type_),
    PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfBullet, _impl_.x_),
    PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfBullet, _impl_.y_),
    PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfBullet, _impl_.facing_direction_),
    PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfBullet, _impl_.guid_),
    PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfBullet, _impl_.team_),
    PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfBullet, _impl_.place_),
    PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfBullet, _impl_.bomb_range_),
    PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfBullet, _impl_.speed_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfBombedBullet, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfBombedBullet, _impl_.type_),
    PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfBombedBullet, _impl_.x_),
    PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfBombedBullet, _impl_.y_),
    PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfBombedBullet, _impl_.facing_direction_),
    PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfBombedBullet, _impl_.mapping_id_),
    PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfBombedBullet, _impl_.bomb_range_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfProp, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfProp, _impl_.type_),
    PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfProp, _impl_.x_),
    PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfProp, _impl_.y_),
    PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfProp, _impl_.facing_direction_),
    PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfProp, _impl_.guid_),
    PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfProp, _impl_.place_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfPickedProp, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfPickedProp, _impl_.type_),
    PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfPickedProp, _impl_.x_),
    PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfPickedProp, _impl_.y_),
    PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfPickedProp, _impl_.facing_direction_),
    PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfPickedProp, _impl_.mapping_id_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfClassroom, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfClassroom, _impl_.x_),
    PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfClassroom, _impl_.y_),
    PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfClassroom, _impl_.progress_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfGate, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfGate, _impl_.x_),
    PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfGate, _impl_.y_),
    PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfGate, _impl_.progress_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfHiddenGate, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfHiddenGate, _impl_.x_),
    PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfHiddenGate, _impl_.y_),
    PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfHiddenGate, _impl_.opened_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfDoor, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfDoor, _impl_.x_),
    PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfDoor, _impl_.y_),
    PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfDoor, _impl_.is_open_),
    PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfDoor, _impl_.progress_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfChest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfChest, _impl_.x_),
    PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfChest, _impl_.y_),
    PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfChest, _impl_.progress_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfMap_Row, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfMap_Row, _impl_.col_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfMap, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfMap, _impl_.row_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfNews, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfNews, _impl_.news_),
    PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfNews, _impl_.from_id_),
    PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfNews, _impl_.to_id_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfObj, _internal_metadata_),
    ~0u,  // no _extensions_
    PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfObj, _impl_._oneof_case_[0]),
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfObj, _impl_.message_of_obj_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfAll, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfAll, _impl_.game_time_),
    PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfAll, _impl_.subject_finished_),
    PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfAll, _impl_.student_graduated_),
    PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfAll, _impl_.student_quited_),
    PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfAll, _impl_.student_score_),
    PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfAll, _impl_.tricker_score_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::protobuf::MessageToClient, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    PROTOBUF_FIELD_OFFSET(::protobuf::MessageToClient, _impl_.obj_message_),
    PROTOBUF_FIELD_OFFSET(::protobuf::MessageToClient, _impl_.game_state_),
    PROTOBUF_FIELD_OFFSET(::protobuf::MessageToClient, _impl_.all_message_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::protobuf::MoveRes, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    PROTOBUF_FIELD_OFFSET(::protobuf::MoveRes, _impl_.actual_speed_),
    PROTOBUF_FIELD_OFFSET(::protobuf::MoveRes, _impl_.actual_angle_),
    PROTOBUF_FIELD_OFFSET(::protobuf::MoveRes, _impl_.act_success_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::protobuf::BoolRes, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    PROTOBUF_FIELD_OFFSET(::protobuf::BoolRes, _impl_.act_success_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    {0, -1, -1, sizeof(::protobuf::MessageOfStudent)},
    {29, -1, -1, sizeof(::protobuf::MessageOfTricker)},
    {53, -1, -1, sizeof(::protobuf::MessageOfBullet)},
    {68, -1, -1, sizeof(::protobuf::MessageOfBombedBullet)},
    {80, -1, -1, sizeof(::protobuf::MessageOfProp)},
    {92, -1, -1, sizeof(::protobuf::MessageOfPickedProp)},
    {103, -1, -1, sizeof(::protobuf::MessageOfClassroom)},
    {112, -1, -1, sizeof(::protobuf::MessageOfGate)},
    {121, -1, -1, sizeof(::protobuf::MessageOfHiddenGate)},
    {130, -1, -1, sizeof(::protobuf::MessageOfDoor)},
    {140, -1, -1, sizeof(::protobuf::MessageOfChest)},
    {149, -1, -1, sizeof(::protobuf::MessageOfMap_Row)},
    {156, -1, -1, sizeof(::protobuf::MessageOfMap)},
    {163, -1, -1, sizeof(::protobuf::MessageOfNews)},
    {172, -1, -1, sizeof(::protobuf::MessageOfObj)},
    {191, -1, -1, sizeof(::protobuf::MessageOfAll)},
    {203, -1, -1, sizeof(::protobuf::MessageToClient)},
    {212, -1, -1, sizeof(::protobuf::MoveRes)},
    {221, -1, -1, sizeof(::protobuf::BoolRes)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::protobuf::_MessageOfStudent_default_instance_._instance,
    &::protobuf::_MessageOfTricker_default_instance_._instance,
    &::protobuf::_MessageOfBullet_default_instance_._instance,
    &::protobuf::_MessageOfBombedBullet_default_instance_._instance,
    &::protobuf::_MessageOfProp_default_instance_._instance,
    &::protobuf::_MessageOfPickedProp_default_instance_._instance,
    &::protobuf::_MessageOfClassroom_default_instance_._instance,
    &::protobuf::_MessageOfGate_default_instance_._instance,
    &::protobuf::_MessageOfHiddenGate_default_instance_._instance,
    &::protobuf::_MessageOfDoor_default_instance_._instance,
    &::protobuf::_MessageOfChest_default_instance_._instance,
    &::protobuf::_MessageOfMap_Row_default_instance_._instance,
    &::protobuf::_MessageOfMap_default_instance_._instance,
    &::protobuf::_MessageOfNews_default_instance_._instance,
    &::protobuf::_MessageOfObj_default_instance_._instance,
    &::protobuf::_MessageOfAll_default_instance_._instance,
    &::protobuf::_MessageToClient_default_instance_._instance,
    &::protobuf::_MoveRes_default_instance_._instance,
    &::protobuf::_BoolRes_default_instance_._instance,
};

const char descriptor_table_protodef_Message2Clients_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
    "\n\025Message2Clients.proto\022\010protobuf\032\021Messa"
    "geType.proto\"\333\004\n\020MessageOfStudent\022\t\n\001x\030\001"
    " \001(\005\022\t\n\001y\030\002 \001(\005\022\r\n\005speed\030\003 \001(\005\022\025\n\rdeterm"
    "ination\030\004 \001(\005\022\021\n\taddiction\030\005 \001(\005\022\"\n\032time"
    "_until_skill_available\030\006 \003(\001\022\"\n\005place\030\007 "
    "\001(\0162\023.protobuf.PlaceType\022 \n\004prop\030\010 \003(\0162\022"
    ".protobuf.PropType\022+\n\014player_state\030\t \001(\016"
    "2\025.protobuf.PlayerState\022\014\n\004guid\030\n \001(\003\022)\n"
    "\013bullet_type\030\014 \001(\0162\024.protobuf.BulletType"
    "\022\026\n\016learning_speed\030\r \001(\005\022\023\n\013treat_speed\030"
    "\016 \001(\005\022\021\n\tplayer_id\030\017 \001(\003\022\022\n\nview_range\030\020"
    " \001(\005\022\016\n\006radius\030\021 \001(\005\022\024\n\014danger_alert\030\023 \001"
    "(\001\022\r\n\005score\030\024 \001(\005\022\026\n\016treat_progress\030\025 \001("
    "\005\022\027\n\017rescue_progress\030\026 \001(\005\022+\n\014student_ty"
    "pe\030\027 \001(\0162\025.protobuf.StudentType\022\030\n\020facin"
    "g_direction\030\030 \001(\001\022\'\n\004buff\030\031 \003(\0162\031.protob"
    "uf.StudentBuffType\"\351\003\n\020MessageOfTricker\022"
    "\t\n\001x\030\001 \001(\005\022\t\n\001y\030\002 \001(\005\022\r\n\005speed\030\003 \001(\005\022\"\n\032"
    "time_until_skill_available\030\005 \003(\001\022\"\n\005plac"
    "e\030\006 \001(\0162\023.protobuf.PlaceType\022 \n\004prop\030\007 \003"
    "(\0162\022.protobuf.PropType\022+\n\014tricker_type\030\010"
    " \001(\0162\025.protobuf.TrickerType\022\014\n\004guid\030\t \001("
    "\003\022\r\n\005score\030\n \001(\005\022\021\n\tplayer_id\030\013 \001(\003\022\022\n\nv"
    "iew_range\030\014 \001(\005\022\016\n\006radius\030\r \001(\005\022+\n\014playe"
    "r_state\030\016 \001(\0162\025.protobuf.PlayerState\022\024\n\014"
    "trick_desire\030\017 \001(\001\022\024\n\014class_volume\030\020 \001(\001"
    "\022\030\n\020facing_direction\030\021 \001(\001\022)\n\013bullet_typ"
    "e\030\022 \001(\0162\024.protobuf.BulletType\022\'\n\004buff\030\023 "
    "\003(\0162\031.protobuf.TrickerBuffType\"\336\001\n\017Messa"
    "geOfBullet\022\"\n\004type\030\001 \001(\0162\024.protobuf.Bull"
    "etType\022\t\n\001x\030\002 \001(\005\022\t\n\001y\030\003 \001(\005\022\030\n\020facing_d"
    "irection\030\004 \001(\001\022\014\n\004guid\030\005 \001(\003\022\"\n\004team\030\006 \001"
    "(\0162\024.protobuf.PlayerType\022\"\n\005place\030\007 \001(\0162"
    "\023.protobuf.PlaceType\022\022\n\nbomb_range\030\010 \001(\001"
    "\022\r\n\005speed\030\t \001(\005\"\223\001\n\025MessageOfBombedBulle"
    "t\022\"\n\004type\030\001 \001(\0162\024.protobuf.BulletType\022\t\n"
    "\001x\030\002 \001(\005\022\t\n\001y\030\003 \001(\005\022\030\n\020facing_direction\030"
    "\004 \001(\001\022\022\n\nmapping_id\030\005 \001(\003\022\022\n\nbomb_range\030"
    "\006 \001(\001\"\223\001\n\rMessageOfProp\022 \n\004type\030\001 \001(\0162\022."
    "protobuf.PropType\022\t\n\001x\030\002 \001(\005\022\t\n\001y\030\003 \001(\005\022"
    "\030\n\020facing_direction\030\004 \001(\001\022\014\n\004guid\030\005 \001(\003\022"
    "\"\n\005place\030\006 \001(\0162\023.protobuf.PlaceType\"{\n\023M"
    "essageOfPickedProp\022 \n\004type\030\001 \001(\0162\022.proto"
    "buf.PropType\022\t\n\001x\030\002 \001(\005\022\t\n\001y\030\003 \001(\005\022\030\n\020fa"
    "cing_direction\030\004 \001(\001\022\022\n\nmapping_id\030\005 \001(\003"
    "\"<\n\022MessageOfClassroom\022\t\n\001x\030\001 \001(\005\022\t\n\001y\030\002"
    " \001(\005\022\020\n\010progress\030\003 \001(\005\"7\n\rMessageOfGate\022"
    "\t\n\001x\030\001 \001(\005\022\t\n\001y\030\002 \001(\005\022\020\n\010progress\030\003 \001(\005\""
    ";\n\023MessageOfHiddenGate\022\t\n\001x\030\001 \001(\005\022\t\n\001y\030\002"
    " \001(\005\022\016\n\006opened\030\003 \001(\010\"H\n\rMessageOfDoor\022\t\n"
    "\001x\030\001 \001(\005\022\t\n\001y\030\002 \001(\005\022\017\n\007is_open\030\003 \001(\010\022\020\n\010"
    "progress\030\004 \001(\005\"8\n\016MessageOfChest\022\t\n\001x\030\001 "
    "\001(\005\022\t\n\001y\030\002 \001(\005\022\020\n\010progress\030\003 \001(\005\"`\n\014Mess"
    "ageOfMap\022\'\n\003row\030\002 \003(\0132\032.protobuf.Message"
    "OfMap.Row\032\'\n\003Row\022 \n\003col\030\001 \003(\0162\023.protobuf"
    ".PlaceType\"=\n\rMessageOfNews\022\014\n\004news\030\001 \001("
    "\t\022\017\n\007from_id\030\002 \001(\003\022\r\n\005to_id\030\003 \001(\003\"\244\005\n\014Me"
    "ssageOfObj\0225\n\017student_message\030\001 \001(\0132\032.pr"
    "otobuf.MessageOfStudentH\000\0225\n\017tricker_mes"
    "sage\030\002 \001(\0132\032.protobuf.MessageOfTrickerH\000"
    "\022/\n\014prop_message\030\003 \001(\0132\027.protobuf.Messag"
    "eOfPropH\000\0223\n\016bullet_message\030\004 \001(\0132\031.prot"
    "obuf.MessageOfBulletH\000\022@\n\025bombed_bullet_"
    "message\030\005 \001(\0132\037.protobuf.MessageOfBombed"
    "BulletH\000\0229\n\021classroom_message\030\006 \001(\0132\034.pr"
    "otobuf.MessageOfClassroomH\000\022/\n\014door_mess"
    "age\030\007 \001(\0132\027.protobuf.MessageOfDoorH\000\022/\n\014"
    "gate_message\030\010 \001(\0132\027.protobuf.MessageOfG"
    "ateH\000\0221\n\rchest_message\030\t \001(\0132\030.protobuf."
    "MessageOfChestH\000\022<\n\023hidden_gate_message\030"
    "\n \001(\0132\035.protobuf.MessageOfHiddenGateH\000\022/"
    "\n\014news_message\030\013 \001(\0132\027.protobuf.MessageO"
    "fNewsH\000\022-\n\013map_message\030\014 \001(\0132\026.protobuf."
    "MessageOfMapH\000B\020\n\016message_of_obj\"\234\001\n\014Mes"
    "sageOfAll\022\021\n\tgame_time\030\001 \001(\005\022\030\n\020subject_"
    "finished\030\002 \001(\005\022\031\n\021student_graduated\030\003 \001("
    "\005\022\026\n\016student_quited\030\004 \001(\005\022\025\n\rstudent_sco"
    "re\030\005 \001(\005\022\025\n\rtricker_score\030\006 \001(\005\"\224\001\n\017Mess"
    "ageToClient\022+\n\013obj_message\030\001 \003(\0132\026.proto"
    "buf.MessageOfObj\022\'\n\ngame_state\030\002 \001(\0162\023.p"
    "rotobuf.GameState\022+\n\013all_message\030\003 \001(\0132\026"
    ".protobuf.MessageOfAll\"J\n\007MoveRes\022\024\n\014act"
    "ual_speed\030\001 \001(\003\022\024\n\014actual_angle\030\002 \001(\001\022\023\n"
    "\013act_success\030\003 \001(\010\"\036\n\007BoolRes\022\023\n\013act_suc"
    "cess\030\001 \001(\010b\006proto3";
static const ::_pbi::DescriptorTable* const descriptor_table_Message2Clients_2eproto_deps[1] = {
    &::descriptor_table_MessageType_2eproto,
};
static ::_pbi::once_flag descriptor_table_Message2Clients_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_Message2Clients_2eproto = {
    false,
    false,
    3378,
    descriptor_table_protodef_Message2Clients_2eproto,
    "Message2Clients.proto",
    &descriptor_table_Message2Clients_2eproto_once,
    descriptor_table_Message2Clients_2eproto_deps,
    1,
    19,
    schemas,
    file_default_instances,
    TableStruct_Message2Clients_2eproto::offsets,
    file_level_metadata_Message2Clients_2eproto,
    file_level_enum_descriptors_Message2Clients_2eproto,
    file_level_service_descriptors_Message2Clients_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_Message2Clients_2eproto_getter()
{
    return &descriptor_table_Message2Clients_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_Message2Clients_2eproto(&descriptor_table_Message2Clients_2eproto);
namespace protobuf
{

    // ===================================================================

    class MessageOfStudent::_Internal
    {
    public:
    };

    MessageOfStudent::MessageOfStudent(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned) :
        ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned)
    {
        SharedCtor(arena, is_message_owned);
        // @@protoc_insertion_point(arena_constructor:protobuf.MessageOfStudent)
    }
    MessageOfStudent::MessageOfStudent(const MessageOfStudent& from) :
        ::PROTOBUF_NAMESPACE_ID::Message()
    {
        MessageOfStudent* const _this = this;
        (void)_this;
        new (&_impl_) Impl_{
            decltype(_impl_.time_until_skill_available_){from._impl_.time_until_skill_available_}, decltype(_impl_.prop_){from._impl_.prop_}, /*decltype(_impl_._prop_cached_byte_size_)*/ {0}, decltype(_impl_.buff_){from._impl_.buff_}, /*decltype(_impl_._buff_cached_byte_size_)*/ {0}, decltype(_impl_.x_){}, decltype(_impl_.y_){}, decltype(_impl_.speed_){}, decltype(_impl_.determination_){}, decltype(_impl_.addiction_){}, decltype(_impl_.place_){}, decltype(_impl_.guid_){}, decltype(_impl_.player_state_){}, decltype(_impl_.bullet_type_){}, decltype(_impl_.learning_speed_){}, decltype(_impl_.treat_speed_){}, decltype(_impl_.player_id_){}, decltype(_impl_.view_range_){}, decltype(_impl_.radius_){}, decltype(_impl_.danger_alert_){}, decltype(_impl_.score_){}, decltype(_impl_.treat_progress_){}, decltype(_impl_.rescue_progress_){}, decltype(_impl_.student_type_){}, decltype(_impl_.facing_direction_){}, /*decltype(_impl_._cached_size_)*/ {}};

        _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
        ::memcpy(&_impl_.x_, &from._impl_.x_, static_cast<size_t>(reinterpret_cast<char*>(&_impl_.facing_direction_) - reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.facing_direction_));
        // @@protoc_insertion_point(copy_constructor:protobuf.MessageOfStudent)
    }

    inline void MessageOfStudent::SharedCtor(
        ::_pb::Arena* arena, bool is_message_owned
    )
    {
        (void)arena;
        (void)is_message_owned;
        new (&_impl_) Impl_{
            decltype(_impl_.time_until_skill_available_){arena}, decltype(_impl_.prop_){arena}, /*decltype(_impl_._prop_cached_byte_size_)*/ {0}, decltype(_impl_.buff_){arena}, /*decltype(_impl_._buff_cached_byte_size_)*/ {0}, decltype(_impl_.x_){0}, decltype(_impl_.y_){0}, decltype(_impl_.speed_){0}, decltype(_impl_.determination_){0}, decltype(_impl_.addiction_){0}, decltype(_impl_.place_){0}, decltype(_impl_.guid_){int64_t{0}}, decltype(_impl_.player_state_){0}, decltype(_impl_.bullet_type_){0}, decltype(_impl_.learning_speed_){0}, decltype(_impl_.treat_speed_){0}, decltype(_impl_.player_id_){int64_t{0}}, decltype(_impl_.view_range_){0}, decltype(_impl_.radius_){0}, decltype(_impl_.danger_alert_){0}, decltype(_impl_.score_){0}, decltype(_impl_.treat_progress_){0}, decltype(_impl_.rescue_progress_){0}, decltype(_impl_.student_type_){0}, decltype(_impl_.facing_direction_){0}, /*decltype(_impl_._cached_size_)*/ {}};
    }

    MessageOfStudent::~MessageOfStudent()
    {
        // @@protoc_insertion_point(destructor:protobuf.MessageOfStudent)
        if (auto* arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>())
        {
            (void)arena;
            return;
        }
        SharedDtor();
    }

    inline void MessageOfStudent::SharedDtor()
    {
        GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
        _impl_.time_until_skill_available_.~RepeatedField();
        _impl_.prop_.~RepeatedField();
        _impl_.buff_.~RepeatedField();
    }

    void MessageOfStudent::SetCachedSize(int size) const
    {
        _impl_._cached_size_.Set(size);
    }

    void MessageOfStudent::Clear()
    {
        // @@protoc_insertion_point(message_clear_start:protobuf.MessageOfStudent)
        uint32_t cached_has_bits = 0;
        // Prevent compiler warnings about cached_has_bits being unused
        (void)cached_has_bits;

        _impl_.time_until_skill_available_.Clear();
        _impl_.prop_.Clear();
        _impl_.buff_.Clear();
        ::memset(&_impl_.x_, 0, static_cast<size_t>(reinterpret_cast<char*>(&_impl_.facing_direction_) - reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.facing_direction_));
        _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
    }

    const char* MessageOfStudent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx)
    {
#define CHK_(x)                       \
    if (PROTOBUF_PREDICT_FALSE(!(x))) \
    goto failure
        while (!ctx->Done(&ptr))
        {
            uint32_t tag;
            ptr = ::_pbi::ReadTag(ptr, &tag);
            switch (tag >> 3)
            {
                // int32 x = 1;
                case 1:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8))
                    {
                        _impl_.x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
                        CHK_(ptr);
                    }
                    else
                        goto handle_unusual;
                    continue;
                // int32 y = 2;
                case 2:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16))
                    {
                        _impl_.y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
                        CHK_(ptr);
                    }
                    else
                        goto handle_unusual;
                    continue;
                // int32 speed = 3;
                case 3:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24))
                    {
                        _impl_.speed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
                        CHK_(ptr);
                    }
                    else
                        goto handle_unusual;
                    continue;
                // int32 determination = 4;
                case 4:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32))
                    {
                        _impl_.determination_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
                        CHK_(ptr);
                    }
                    else
                        goto handle_unusual;
                    continue;
                // int32 addiction = 5;
                case 5:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40))
                    {
                        _impl_.addiction_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
                        CHK_(ptr);
                    }
                    else
                        goto handle_unusual;
                    continue;
                // repeated double time_until_skill_available = 6;
                case 6:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50))
                    {
                        ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_time_until_skill_available(), ptr, ctx);
                        CHK_(ptr);
                    }
                    else if (static_cast<uint8_t>(tag) == 49)
                    {
                        _internal_add_time_until_skill_available(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
                        ptr += sizeof(double);
                    }
                    else
                        goto handle_unusual;
                    continue;
                // .protobuf.PlaceType place = 7;
                case 7:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56))
                    {
                        uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
                        CHK_(ptr);
                        _internal_set_place(static_cast<::protobuf::PlaceType>(val));
                    }
                    else
                        goto handle_unusual;
                    continue;
                // repeated .protobuf.PropType prop = 8;
                case 8:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66))
                    {
                        ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser(_internal_mutable_prop(), ptr, ctx);
                        CHK_(ptr);
                    }
                    else if (static_cast<uint8_t>(tag) == 64)
                    {
                        uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
                        CHK_(ptr);
                        _internal_add_prop(static_cast<::protobuf::PropType>(val));
                    }
                    else
                        goto handle_unusual;
                    continue;
                // .protobuf.PlayerState player_state = 9;
                case 9:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72))
                    {
                        uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
                        CHK_(ptr);
                        _internal_set_player_state(static_cast<::protobuf::PlayerState>(val));
                    }
                    else
                        goto handle_unusual;
                    continue;
                // int64 guid = 10;
                case 10:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80))
                    {
                        _impl_.guid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
                        CHK_(ptr);
                    }
                    else
                        goto handle_unusual;
                    continue;
                // .protobuf.BulletType bullet_type = 12;
                case 12:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96))
                    {
                        uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
                        CHK_(ptr);
                        _internal_set_bullet_type(static_cast<::protobuf::BulletType>(val));
                    }
                    else
                        goto handle_unusual;
                    continue;
                // int32 learning_speed = 13;
                case 13:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104))
                    {
                        _impl_.learning_speed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
                        CHK_(ptr);
                    }
                    else
                        goto handle_unusual;
                    continue;
                // int32 treat_speed = 14;
                case 14:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112))
                    {
                        _impl_.treat_speed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
                        CHK_(ptr);
                    }
                    else
                        goto handle_unusual;
                    continue;
                // int64 player_id = 15;
                case 15:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120))
                    {
                        _impl_.player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
                        CHK_(ptr);
                    }
                    else
                        goto handle_unusual;
                    continue;
                // int32 view_range = 16;
                case 16:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128))
                    {
                        _impl_.view_range_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
                        CHK_(ptr);
                    }
                    else
                        goto handle_unusual;
                    continue;
                // int32 radius = 17;
                case 17:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136))
                    {
                        _impl_.radius_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
                        CHK_(ptr);
                    }
                    else
                        goto handle_unusual;
                    continue;
                // double danger_alert = 19;
                case 19:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 153))
                    {
                        _impl_.danger_alert_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
                        ptr += sizeof(double);
                    }
                    else
                        goto handle_unusual;
                    continue;
                // int32 score = 20;
                case 20:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 160))
                    {
                        _impl_.score_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
                        CHK_(ptr);
                    }
                    else
                        goto handle_unusual;
                    continue;
                // int32 treat_progress = 21;
                case 21:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 168))
                    {
                        _impl_.treat_progress_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
                        CHK_(ptr);
                    }
                    else
                        goto handle_unusual;
                    continue;
                // int32 rescue_progress = 22;
                case 22:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 176))
                    {
                        _impl_.rescue_progress_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
                        CHK_(ptr);
                    }
                    else
                        goto handle_unusual;
                    continue;
                // .protobuf.StudentType student_type = 23;
                case 23:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 184))
                    {
                        uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
                        CHK_(ptr);
                        _internal_set_student_type(static_cast<::protobuf::StudentType>(val));
                    }
                    else
                        goto handle_unusual;
                    continue;
                // double facing_direction = 24;
                case 24:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 193))
                    {
                        _impl_.facing_direction_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
                        ptr += sizeof(double);
                    }
                    else
                        goto handle_unusual;
                    continue;
                // repeated .protobuf.StudentBuffType buff = 25;
                case 25:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 202))
                    {
                        ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser(_internal_mutable_buff(), ptr, ctx);
                        CHK_(ptr);
                    }
                    else if (static_cast<uint8_t>(tag) == 200)
                    {
                        uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
                        CHK_(ptr);
                        _internal_add_buff(static_cast<::protobuf::StudentBuffType>(val));
                    }
                    else
                        goto handle_unusual;
                    continue;
                default:
                    goto handle_unusual;
            }  // switch
        handle_unusual:
            if ((tag == 0) || ((tag & 7) == 4))
            {
                CHK_(ptr);
                ctx->SetLastTag(tag);
                goto message_done;
            }
            ptr = UnknownFieldParse(
                tag,
                _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
                ptr,
                ctx
            );
            CHK_(ptr != nullptr);
        }  // while
    message_done:
        return ptr;
    failure:
        ptr = nullptr;
        goto message_done;
#undef CHK_
    }

    uint8_t* MessageOfStudent::_InternalSerialize(
        uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream
    ) const
    {
        // @@protoc_insertion_point(serialize_to_array_start:protobuf.MessageOfStudent)
        uint32_t cached_has_bits = 0;
        (void)cached_has_bits;

        // int32 x = 1;
        if (this->_internal_x() != 0)
        {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_x(), target);
        }

        // int32 y = 2;
        if (this->_internal_y() != 0)
        {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_y(), target);
        }

        // int32 speed = 3;
        if (this->_internal_speed() != 0)
        {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_speed(), target);
        }

        // int32 determination = 4;
        if (this->_internal_determination() != 0)
        {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_determination(), target);
        }

        // int32 addiction = 5;
        if (this->_internal_addiction() != 0)
        {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_addiction(), target);
        }

        // repeated double time_until_skill_available = 6;
        if (this->_internal_time_until_skill_available_size() > 0)
        {
            target = stream->WriteFixedPacked(6, _internal_time_until_skill_available(), target);
        }

        // .protobuf.PlaceType place = 7;
        if (this->_internal_place() != 0)
        {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                7, this->_internal_place(), target
            );
        }

        // repeated .protobuf.PropType prop = 8;
        {
            int byte_size = _impl_._prop_cached_byte_size_.load(std::memory_order_relaxed);
            if (byte_size > 0)
            {
                target = stream->WriteEnumPacked(
                    8, _impl_.prop_, byte_size, target
                );
            }
        }

        // .protobuf.PlayerState player_state = 9;
        if (this->_internal_player_state() != 0)
        {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                9, this->_internal_player_state(), target
            );
        }

        // int64 guid = 10;
        if (this->_internal_guid() != 0)
        {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt64ToArray(10, this->_internal_guid(), target);
        }

        // .protobuf.BulletType bullet_type = 12;
        if (this->_internal_bullet_type() != 0)
        {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                12, this->_internal_bullet_type(), target
            );
        }

        // int32 learning_speed = 13;
        if (this->_internal_learning_speed() != 0)
        {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt32ToArray(13, this->_internal_learning_speed(), target);
        }

        // int32 treat_speed = 14;
        if (this->_internal_treat_speed() != 0)
        {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt32ToArray(14, this->_internal_treat_speed(), target);
        }

        // int64 player_id = 15;
        if (this->_internal_player_id() != 0)
        {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt64ToArray(15, this->_internal_player_id(), target);
        }

        // int32 view_range = 16;
        if (this->_internal_view_range() != 0)
        {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt32ToArray(16, this->_internal_view_range(), target);
        }

        // int32 radius = 17;
        if (this->_internal_radius() != 0)
        {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt32ToArray(17, this->_internal_radius(), target);
        }

        // double danger_alert = 19;
        static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
        double tmp_danger_alert = this->_internal_danger_alert();
        uint64_t raw_danger_alert;
        memcpy(&raw_danger_alert, &tmp_danger_alert, sizeof(tmp_danger_alert));
        if (raw_danger_alert != 0)
        {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(19, this->_internal_danger_alert(), target);
        }

        // int32 score = 20;
        if (this->_internal_score() != 0)
        {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt32ToArray(20, this->_internal_score(), target);
        }

        // int32 treat_progress = 21;
        if (this->_internal_treat_progress() != 0)
        {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt32ToArray(21, this->_internal_treat_progress(), target);
        }

        // int32 rescue_progress = 22;
        if (this->_internal_rescue_progress() != 0)
        {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt32ToArray(22, this->_internal_rescue_progress(), target);
        }

        // .protobuf.StudentType student_type = 23;
        if (this->_internal_student_type() != 0)
        {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                23, this->_internal_student_type(), target
            );
        }

        // double facing_direction = 24;
        static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
        double tmp_facing_direction = this->_internal_facing_direction();
        uint64_t raw_facing_direction;
        memcpy(&raw_facing_direction, &tmp_facing_direction, sizeof(tmp_facing_direction));
        if (raw_facing_direction != 0)
        {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(24, this->_internal_facing_direction(), target);
        }

        // repeated .protobuf.StudentBuffType buff = 25;
        {
            int byte_size = _impl_._buff_cached_byte_size_.load(std::memory_order_relaxed);
            if (byte_size > 0)
            {
                target = stream->WriteEnumPacked(
                    25, _impl_.buff_, byte_size, target
                );
            }
        }

        if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields()))
        {
            target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream
            );
        }
        // @@protoc_insertion_point(serialize_to_array_end:protobuf.MessageOfStudent)
        return target;
    }

    size_t MessageOfStudent::ByteSizeLong() const
    {
        // @@protoc_insertion_point(message_byte_size_start:protobuf.MessageOfStudent)
        size_t total_size = 0;

        uint32_t cached_has_bits = 0;
        // Prevent compiler warnings about cached_has_bits being unused
        (void)cached_has_bits;

        // repeated double time_until_skill_available = 6;
        {
            unsigned int count = static_cast<unsigned int>(this->_internal_time_until_skill_available_size());
            size_t data_size = 8UL * count;
            if (data_size > 0)
            {
                total_size += 1 +
                              ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
            }
            total_size += data_size;
        }

        // repeated .protobuf.PropType prop = 8;
        {
            size_t data_size = 0;
            unsigned int count = static_cast<unsigned int>(this->_internal_prop_size());
            for (unsigned int i = 0; i < count; i++)
            {
                data_size += ::_pbi::WireFormatLite::EnumSize(
                    this->_internal_prop(static_cast<int>(i))
                );
            }
            if (data_size > 0)
            {
                total_size += 1 +
                              ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
            }
            int cached_size = ::_pbi::ToCachedSize(data_size);
            _impl_._prop_cached_byte_size_.store(cached_size, std::memory_order_relaxed);
            total_size += data_size;
        }

        // repeated .protobuf.StudentBuffType buff = 25;
        {
            size_t data_size = 0;
            unsigned int count = static_cast<unsigned int>(this->_internal_buff_size());
            for (unsigned int i = 0; i < count; i++)
            {
                data_size += ::_pbi::WireFormatLite::EnumSize(
                    this->_internal_buff(static_cast<int>(i))
                );
            }
            if (data_size > 0)
            {
                total_size += 2 +
                              ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
            }
            int cached_size = ::_pbi::ToCachedSize(data_size);
            _impl_._buff_cached_byte_size_.store(cached_size, std::memory_order_relaxed);
            total_size += data_size;
        }

        // int32 x = 1;
        if (this->_internal_x() != 0)
        {
            total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_x());
        }

        // int32 y = 2;
        if (this->_internal_y() != 0)
        {
            total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_y());
        }

        // int32 speed = 3;
        if (this->_internal_speed() != 0)
        {
            total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_speed());
        }

        // int32 determination = 4;
        if (this->_internal_determination() != 0)
        {
            total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_determination());
        }

        // int32 addiction = 5;
        if (this->_internal_addiction() != 0)
        {
            total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_addiction());
        }

        // .protobuf.PlaceType place = 7;
        if (this->_internal_place() != 0)
        {
            total_size += 1 +
                          ::_pbi::WireFormatLite::EnumSize(this->_internal_place());
        }

        // int64 guid = 10;
        if (this->_internal_guid() != 0)
        {
            total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_guid());
        }

        // .protobuf.PlayerState player_state = 9;
        if (this->_internal_player_state() != 0)
        {
            total_size += 1 +
                          ::_pbi::WireFormatLite::EnumSize(this->_internal_player_state());
        }

        // .protobuf.BulletType bullet_type = 12;
        if (this->_internal_bullet_type() != 0)
        {
            total_size += 1 +
                          ::_pbi::WireFormatLite::EnumSize(this->_internal_bullet_type());
        }

        // int32 learning_speed = 13;
        if (this->_internal_learning_speed() != 0)
        {
            total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_learning_speed());
        }

        // int32 treat_speed = 14;
        if (this->_internal_treat_speed() != 0)
        {
            total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_treat_speed());
        }

        // int64 player_id = 15;
        if (this->_internal_player_id() != 0)
        {
            total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_player_id());
        }

        // int32 view_range = 16;
        if (this->_internal_view_range() != 0)
        {
            total_size += 2 +
                          ::_pbi::WireFormatLite::Int32Size(
                              this->_internal_view_range()
                          );
        }

        // int32 radius = 17;
        if (this->_internal_radius() != 0)
        {
            total_size += 2 +
                          ::_pbi::WireFormatLite::Int32Size(
                              this->_internal_radius()
                          );
        }

        // double danger_alert = 19;
        static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
        double tmp_danger_alert = this->_internal_danger_alert();
        uint64_t raw_danger_alert;
        memcpy(&raw_danger_alert, &tmp_danger_alert, sizeof(tmp_danger_alert));
        if (raw_danger_alert != 0)
        {
            total_size += 2 + 8;
        }

        // int32 score = 20;
        if (this->_internal_score() != 0)
        {
            total_size += 2 +
                          ::_pbi::WireFormatLite::Int32Size(
                              this->_internal_score()
                          );
        }

        // int32 treat_progress = 21;
        if (this->_internal_treat_progress() != 0)
        {
            total_size += 2 +
                          ::_pbi::WireFormatLite::Int32Size(
                              this->_internal_treat_progress()
                          );
        }

        // int32 rescue_progress = 22;
        if (this->_internal_rescue_progress() != 0)
        {
            total_size += 2 +
                          ::_pbi::WireFormatLite::Int32Size(
                              this->_internal_rescue_progress()
                          );
        }

        // .protobuf.StudentType student_type = 23;
        if (this->_internal_student_type() != 0)
        {
            total_size += 2 +
                          ::_pbi::WireFormatLite::EnumSize(this->_internal_student_type());
        }

        // double facing_direction = 24;
        static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
        double tmp_facing_direction = this->_internal_facing_direction();
        uint64_t raw_facing_direction;
        memcpy(&raw_facing_direction, &tmp_facing_direction, sizeof(tmp_facing_direction));
        if (raw_facing_direction != 0)
        {
            total_size += 2 + 8;
        }

        return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
    }

    const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MessageOfStudent::_class_data_ = {
        ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
        MessageOfStudent::MergeImpl};
    const ::PROTOBUF_NAMESPACE_ID::Message::ClassData* MessageOfStudent::GetClassData() const
    {
        return &_class_data_;
    }

    void MessageOfStudent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg)
    {
        auto* const _this = static_cast<MessageOfStudent*>(&to_msg);
        auto& from = static_cast<const MessageOfStudent&>(from_msg);
        // @@protoc_insertion_point(class_specific_merge_from_start:protobuf.MessageOfStudent)
        GOOGLE_DCHECK_NE(&from, _this);
        uint32_t cached_has_bits = 0;
        (void)cached_has_bits;

        _this->_impl_.time_until_skill_available_.MergeFrom(from._impl_.time_until_skill_available_);
        _this->_impl_.prop_.MergeFrom(from._impl_.prop_);
        _this->_impl_.buff_.MergeFrom(from._impl_.buff_);
        if (from._internal_x() != 0)
        {
            _this->_internal_set_x(from._internal_x());
        }
        if (from._internal_y() != 0)
        {
            _this->_internal_set_y(from._internal_y());
        }
        if (from._internal_speed() != 0)
        {
            _this->_internal_set_speed(from._internal_speed());
        }
        if (from._internal_determination() != 0)
        {
            _this->_internal_set_determination(from._internal_determination());
        }
        if (from._internal_addiction() != 0)
        {
            _this->_internal_set_addiction(from._internal_addiction());
        }
        if (from._internal_place() != 0)
        {
            _this->_internal_set_place(from._internal_place());
        }
        if (from._internal_guid() != 0)
        {
            _this->_internal_set_guid(from._internal_guid());
        }
        if (from._internal_player_state() != 0)
        {
            _this->_internal_set_player_state(from._internal_player_state());
        }
        if (from._internal_bullet_type() != 0)
        {
            _this->_internal_set_bullet_type(from._internal_bullet_type());
        }
        if (from._internal_learning_speed() != 0)
        {
            _this->_internal_set_learning_speed(from._internal_learning_speed());
        }
        if (from._internal_treat_speed() != 0)
        {
            _this->_internal_set_treat_speed(from._internal_treat_speed());
        }
        if (from._internal_player_id() != 0)
        {
            _this->_internal_set_player_id(from._internal_player_id());
        }
        if (from._internal_view_range() != 0)
        {
            _this->_internal_set_view_range(from._internal_view_range());
        }
        if (from._internal_radius() != 0)
        {
            _this->_internal_set_radius(from._internal_radius());
        }
        static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
        double tmp_danger_alert = from._internal_danger_alert();
        uint64_t raw_danger_alert;
        memcpy(&raw_danger_alert, &tmp_danger_alert, sizeof(tmp_danger_alert));
        if (raw_danger_alert != 0)
        {
            _this->_internal_set_danger_alert(from._internal_danger_alert());
        }
        if (from._internal_score() != 0)
        {
            _this->_internal_set_score(from._internal_score());
        }
        if (from._internal_treat_progress() != 0)
        {
            _this->_internal_set_treat_progress(from._internal_treat_progress());
        }
        if (from._internal_rescue_progress() != 0)
        {
            _this->_internal_set_rescue_progress(from._internal_rescue_progress());
        }
        if (from._internal_student_type() != 0)
        {
            _this->_internal_set_student_type(from._internal_student_type());
        }
        static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
        double tmp_facing_direction = from._internal_facing_direction();
        uint64_t raw_facing_direction;
        memcpy(&raw_facing_direction, &tmp_facing_direction, sizeof(tmp_facing_direction));
        if (raw_facing_direction != 0)
        {
            _this->_internal_set_facing_direction(from._internal_facing_direction());
        }
        _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
    }

    void MessageOfStudent::CopyFrom(const MessageOfStudent& from)
    {
        // @@protoc_insertion_point(class_specific_copy_from_start:protobuf.MessageOfStudent)
        if (&from == this)
            return;
        Clear();
        MergeFrom(from);
    }

    bool MessageOfStudent::IsInitialized() const
    {
        return true;
    }

    void MessageOfStudent::InternalSwap(MessageOfStudent* other)
    {
        using std::swap;
        _internal_metadata_.InternalSwap(&other->_internal_metadata_);
        _impl_.time_until_skill_available_.InternalSwap(&other->_impl_.time_until_skill_available_);
        _impl_.prop_.InternalSwap(&other->_impl_.prop_);
        _impl_.buff_.InternalSwap(&other->_impl_.buff_);
        ::PROTOBUF_NAMESPACE_ID::internal::memswap<
            PROTOBUF_FIELD_OFFSET(MessageOfStudent, _impl_.facing_direction_) + sizeof(MessageOfStudent::_impl_.facing_direction_) - PROTOBUF_FIELD_OFFSET(MessageOfStudent, _impl_.x_)>(
            reinterpret_cast<char*>(&_impl_.x_),
            reinterpret_cast<char*>(&other->_impl_.x_)
        );
    }

    ::PROTOBUF_NAMESPACE_ID::Metadata MessageOfStudent::GetMetadata() const
    {
        return ::_pbi::AssignDescriptors(
            &descriptor_table_Message2Clients_2eproto_getter, &descriptor_table_Message2Clients_2eproto_once, file_level_metadata_Message2Clients_2eproto[0]
        );
    }

    // ===================================================================

    class MessageOfTricker::_Internal
    {
    public:
    };

    MessageOfTricker::MessageOfTricker(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned) :
        ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned)
    {
        SharedCtor(arena, is_message_owned);
        // @@protoc_insertion_point(arena_constructor:protobuf.MessageOfTricker)
    }
    MessageOfTricker::MessageOfTricker(const MessageOfTricker& from) :
        ::PROTOBUF_NAMESPACE_ID::Message()
    {
        MessageOfTricker* const _this = this;
        (void)_this;
        new (&_impl_) Impl_{
            decltype(_impl_.time_until_skill_available_){from._impl_.time_until_skill_available_}, decltype(_impl_.prop_){from._impl_.prop_}, /*decltype(_impl_._prop_cached_byte_size_)*/ {0}, decltype(_impl_.buff_){from._impl_.buff_}, /*decltype(_impl_._buff_cached_byte_size_)*/ {0}, decltype(_impl_.x_){}, decltype(_impl_.y_){}, decltype(_impl_.speed_){}, decltype(_impl_.place_){}, decltype(_impl_.guid_){}, decltype(_impl_.tricker_type_){}, decltype(_impl_.score_){}, decltype(_impl_.player_id_){}, decltype(_impl_.view_range_){}, decltype(_impl_.radius_){}, decltype(_impl_.trick_desire_){}, decltype(_impl_.class_volume_){}, decltype(_impl_.player_state_){}, decltype(_impl_.bullet_type_){}, decltype(_impl_.facing_direction_){}, /*decltype(_impl_._cached_size_)*/ {}};

        _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
        ::memcpy(&_impl_.x_, &from._impl_.x_, static_cast<size_t>(reinterpret_cast<char*>(&_impl_.facing_direction_) - reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.facing_direction_));
        // @@protoc_insertion_point(copy_constructor:protobuf.MessageOfTricker)
    }

    inline void MessageOfTricker::SharedCtor(
        ::_pb::Arena* arena, bool is_message_owned
    )
    {
        (void)arena;
        (void)is_message_owned;
        new (&_impl_) Impl_{
            decltype(_impl_.time_until_skill_available_){arena}, decltype(_impl_.prop_){arena}, /*decltype(_impl_._prop_cached_byte_size_)*/ {0}, decltype(_impl_.buff_){arena}, /*decltype(_impl_._buff_cached_byte_size_)*/ {0}, decltype(_impl_.x_){0}, decltype(_impl_.y_){0}, decltype(_impl_.speed_){0}, decltype(_impl_.place_){0}, decltype(_impl_.guid_){int64_t{0}}, decltype(_impl_.tricker_type_){0}, decltype(_impl_.score_){0}, decltype(_impl_.player_id_){int64_t{0}}, decltype(_impl_.view_range_){0}, decltype(_impl_.radius_){0}, decltype(_impl_.trick_desire_){0}, decltype(_impl_.class_volume_){0}, decltype(_impl_.player_state_){0}, decltype(_impl_.bullet_type_){0}, decltype(_impl_.facing_direction_){0}, /*decltype(_impl_._cached_size_)*/ {}};
    }

    MessageOfTricker::~MessageOfTricker()
    {
        // @@protoc_insertion_point(destructor:protobuf.MessageOfTricker)
        if (auto* arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>())
        {
            (void)arena;
            return;
        }
        SharedDtor();
    }

    inline void MessageOfTricker::SharedDtor()
    {
        GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
        _impl_.time_until_skill_available_.~RepeatedField();
        _impl_.prop_.~RepeatedField();
        _impl_.buff_.~RepeatedField();
    }

    void MessageOfTricker::SetCachedSize(int size) const
    {
        _impl_._cached_size_.Set(size);
    }

    void MessageOfTricker::Clear()
    {
        // @@protoc_insertion_point(message_clear_start:protobuf.MessageOfTricker)
        uint32_t cached_has_bits = 0;
        // Prevent compiler warnings about cached_has_bits being unused
        (void)cached_has_bits;

        _impl_.time_until_skill_available_.Clear();
        _impl_.prop_.Clear();
        _impl_.buff_.Clear();
        ::memset(&_impl_.x_, 0, static_cast<size_t>(reinterpret_cast<char*>(&_impl_.facing_direction_) - reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.facing_direction_));
        _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
    }

    const char* MessageOfTricker::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx)
    {
#define CHK_(x)                       \
    if (PROTOBUF_PREDICT_FALSE(!(x))) \
    goto failure
        while (!ctx->Done(&ptr))
        {
            uint32_t tag;
            ptr = ::_pbi::ReadTag(ptr, &tag);
            switch (tag >> 3)
            {
                // int32 x = 1;
                case 1:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8))
                    {
                        _impl_.x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
                        CHK_(ptr);
                    }
                    else
                        goto handle_unusual;
                    continue;
                // int32 y = 2;
                case 2:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16))
                    {
                        _impl_.y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
                        CHK_(ptr);
                    }
                    else
                        goto handle_unusual;
                    continue;
                // int32 speed = 3;
                case 3:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24))
                    {
                        _impl_.speed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
                        CHK_(ptr);
                    }
                    else
                        goto handle_unusual;
                    continue;
                // repeated double time_until_skill_available = 5;
                case 5:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42))
                    {
                        ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_time_until_skill_available(), ptr, ctx);
                        CHK_(ptr);
                    }
                    else if (static_cast<uint8_t>(tag) == 41)
                    {
                        _internal_add_time_until_skill_available(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
                        ptr += sizeof(double);
                    }
                    else
                        goto handle_unusual;
                    continue;
                // .protobuf.PlaceType place = 6;
                case 6:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48))
                    {
                        uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
                        CHK_(ptr);
                        _internal_set_place(static_cast<::protobuf::PlaceType>(val));
                    }
                    else
                        goto handle_unusual;
                    continue;
                // repeated .protobuf.PropType prop = 7;
                case 7:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58))
                    {
                        ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser(_internal_mutable_prop(), ptr, ctx);
                        CHK_(ptr);
                    }
                    else if (static_cast<uint8_t>(tag) == 56)
                    {
                        uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
                        CHK_(ptr);
                        _internal_add_prop(static_cast<::protobuf::PropType>(val));
                    }
                    else
                        goto handle_unusual;
                    continue;
                // .protobuf.TrickerType tricker_type = 8;
                case 8:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64))
                    {
                        uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
                        CHK_(ptr);
                        _internal_set_tricker_type(static_cast<::protobuf::TrickerType>(val));
                    }
                    else
                        goto handle_unusual;
                    continue;
                // int64 guid = 9;
                case 9:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72))
                    {
                        _impl_.guid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
                        CHK_(ptr);
                    }
                    else
                        goto handle_unusual;
                    continue;
                // int32 score = 10;
                case 10:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80))
                    {
                        _impl_.score_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
                        CHK_(ptr);
                    }
                    else
                        goto handle_unusual;
                    continue;
                // int64 player_id = 11;
                case 11:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88))
                    {
                        _impl_.player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
                        CHK_(ptr);
                    }
                    else
                        goto handle_unusual;
                    continue;
                // int32 view_range = 12;
                case 12:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96))
                    {
                        _impl_.view_range_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
                        CHK_(ptr);
                    }
                    else
                        goto handle_unusual;
                    continue;
                // int32 radius = 13;
                case 13:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104))
                    {
                        _impl_.radius_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
                        CHK_(ptr);
                    }
                    else
                        goto handle_unusual;
                    continue;
                // .protobuf.PlayerState player_state = 14;
                case 14:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112))
                    {
                        uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
                        CHK_(ptr);
                        _internal_set_player_state(static_cast<::protobuf::PlayerState>(val));
                    }
                    else
                        goto handle_unusual;
                    continue;
                // double trick_desire = 15;
                case 15:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 121))
                    {
                        _impl_.trick_desire_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
                        ptr += sizeof(double);
                    }
                    else
                        goto handle_unusual;
                    continue;
                // double class_volume = 16;
                case 16:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 129))
                    {
                        _impl_.class_volume_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
                        ptr += sizeof(double);
                    }
                    else
                        goto handle_unusual;
                    continue;
                // double facing_direction = 17;
                case 17:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 137))
                    {
                        _impl_.facing_direction_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
                        ptr += sizeof(double);
                    }
                    else
                        goto handle_unusual;
                    continue;
                // .protobuf.BulletType bullet_type = 18;
                case 18:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144))
                    {
                        uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
                        CHK_(ptr);
                        _internal_set_bullet_type(static_cast<::protobuf::BulletType>(val));
                    }
                    else
                        goto handle_unusual;
                    continue;
                // repeated .protobuf.TrickerBuffType buff = 19;
                case 19:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 154))
                    {
                        ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser(_internal_mutable_buff(), ptr, ctx);
                        CHK_(ptr);
                    }
                    else if (static_cast<uint8_t>(tag) == 152)
                    {
                        uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
                        CHK_(ptr);
                        _internal_add_buff(static_cast<::protobuf::TrickerBuffType>(val));
                    }
                    else
                        goto handle_unusual;
                    continue;
                default:
                    goto handle_unusual;
            }  // switch
        handle_unusual:
            if ((tag == 0) || ((tag & 7) == 4))
            {
                CHK_(ptr);
                ctx->SetLastTag(tag);
                goto message_done;
            }
            ptr = UnknownFieldParse(
                tag,
                _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
                ptr,
                ctx
            );
            CHK_(ptr != nullptr);
        }  // while
    message_done:
        return ptr;
    failure:
        ptr = nullptr;
        goto message_done;
#undef CHK_
    }

    uint8_t* MessageOfTricker::_InternalSerialize(
        uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream
    ) const
    {
        // @@protoc_insertion_point(serialize_to_array_start:protobuf.MessageOfTricker)
        uint32_t cached_has_bits = 0;
        (void)cached_has_bits;

        // int32 x = 1;
        if (this->_internal_x() != 0)
        {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_x(), target);
        }

        // int32 y = 2;
        if (this->_internal_y() != 0)
        {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_y(), target);
        }

        // int32 speed = 3;
        if (this->_internal_speed() != 0)
        {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_speed(), target);
        }

        // repeated double time_until_skill_available = 5;
        if (this->_internal_time_until_skill_available_size() > 0)
        {
            target = stream->WriteFixedPacked(5, _internal_time_until_skill_available(), target);
        }

        // .protobuf.PlaceType place = 6;
        if (this->_internal_place() != 0)
        {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                6, this->_internal_place(), target
            );
        }

        // repeated .protobuf.PropType prop = 7;
        {
            int byte_size = _impl_._prop_cached_byte_size_.load(std::memory_order_relaxed);
            if (byte_size > 0)
            {
                target = stream->WriteEnumPacked(
                    7, _impl_.prop_, byte_size, target
                );
            }
        }

        // .protobuf.TrickerType tricker_type = 8;
        if (this->_internal_tricker_type() != 0)
        {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                8, this->_internal_tricker_type(), target
            );
        }

        // int64 guid = 9;
        if (this->_internal_guid() != 0)
        {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt64ToArray(9, this->_internal_guid(), target);
        }

        // int32 score = 10;
        if (this->_internal_score() != 0)
        {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt32ToArray(10, this->_internal_score(), target);
        }

        // int64 player_id = 11;
        if (this->_internal_player_id() != 0)
        {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt64ToArray(11, this->_internal_player_id(), target);
        }

        // int32 view_range = 12;
        if (this->_internal_view_range() != 0)
        {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt32ToArray(12, this->_internal_view_range(), target);
        }

        // int32 radius = 13;
        if (this->_internal_radius() != 0)
        {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt32ToArray(13, this->_internal_radius(), target);
        }

        // .protobuf.PlayerState player_state = 14;
        if (this->_internal_player_state() != 0)
        {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                14, this->_internal_player_state(), target
            );
        }

        // double trick_desire = 15;
        static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
        double tmp_trick_desire = this->_internal_trick_desire();
        uint64_t raw_trick_desire;
        memcpy(&raw_trick_desire, &tmp_trick_desire, sizeof(tmp_trick_desire));
        if (raw_trick_desire != 0)
        {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(15, this->_internal_trick_desire(), target);
        }

        // double class_volume = 16;
        static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
        double tmp_class_volume = this->_internal_class_volume();
        uint64_t raw_class_volume;
        memcpy(&raw_class_volume, &tmp_class_volume, sizeof(tmp_class_volume));
        if (raw_class_volume != 0)
        {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(16, this->_internal_class_volume(), target);
        }

        // double facing_direction = 17;
        static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
        double tmp_facing_direction = this->_internal_facing_direction();
        uint64_t raw_facing_direction;
        memcpy(&raw_facing_direction, &tmp_facing_direction, sizeof(tmp_facing_direction));
        if (raw_facing_direction != 0)
        {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(17, this->_internal_facing_direction(), target);
        }

        // .protobuf.BulletType bullet_type = 18;
        if (this->_internal_bullet_type() != 0)
        {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                18, this->_internal_bullet_type(), target
            );
        }

        // repeated .protobuf.TrickerBuffType buff = 19;
        {
            int byte_size = _impl_._buff_cached_byte_size_.load(std::memory_order_relaxed);
            if (byte_size > 0)
            {
                target = stream->WriteEnumPacked(
                    19, _impl_.buff_, byte_size, target
                );
            }
        }

        if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields()))
        {
            target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream
            );
        }
        // @@protoc_insertion_point(serialize_to_array_end:protobuf.MessageOfTricker)
        return target;
    }

    size_t MessageOfTricker::ByteSizeLong() const
    {
        // @@protoc_insertion_point(message_byte_size_start:protobuf.MessageOfTricker)
        size_t total_size = 0;

        uint32_t cached_has_bits = 0;
        // Prevent compiler warnings about cached_has_bits being unused
        (void)cached_has_bits;

        // repeated double time_until_skill_available = 5;
        {
            unsigned int count = static_cast<unsigned int>(this->_internal_time_until_skill_available_size());
            size_t data_size = 8UL * count;
            if (data_size > 0)
            {
                total_size += 1 +
                              ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
            }
            total_size += data_size;
        }

        // repeated .protobuf.PropType prop = 7;
        {
            size_t data_size = 0;
            unsigned int count = static_cast<unsigned int>(this->_internal_prop_size());
            for (unsigned int i = 0; i < count; i++)
            {
                data_size += ::_pbi::WireFormatLite::EnumSize(
                    this->_internal_prop(static_cast<int>(i))
                );
            }
            if (data_size > 0)
            {
                total_size += 1 +
                              ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
            }
            int cached_size = ::_pbi::ToCachedSize(data_size);
            _impl_._prop_cached_byte_size_.store(cached_size, std::memory_order_relaxed);
            total_size += data_size;
        }

        // repeated .protobuf.TrickerBuffType buff = 19;
        {
            size_t data_size = 0;
            unsigned int count = static_cast<unsigned int>(this->_internal_buff_size());
            for (unsigned int i = 0; i < count; i++)
            {
                data_size += ::_pbi::WireFormatLite::EnumSize(
                    this->_internal_buff(static_cast<int>(i))
                );
            }
            if (data_size > 0)
            {
                total_size += 2 +
                              ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
            }
            int cached_size = ::_pbi::ToCachedSize(data_size);
            _impl_._buff_cached_byte_size_.store(cached_size, std::memory_order_relaxed);
            total_size += data_size;
        }

        // int32 x = 1;
        if (this->_internal_x() != 0)
        {
            total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_x());
        }

        // int32 y = 2;
        if (this->_internal_y() != 0)
        {
            total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_y());
        }

        // int32 speed = 3;
        if (this->_internal_speed() != 0)
        {
            total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_speed());
        }

        // .protobuf.PlaceType place = 6;
        if (this->_internal_place() != 0)
        {
            total_size += 1 +
                          ::_pbi::WireFormatLite::EnumSize(this->_internal_place());
        }

        // int64 guid = 9;
        if (this->_internal_guid() != 0)
        {
            total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_guid());
        }

        // .protobuf.TrickerType tricker_type = 8;
        if (this->_internal_tricker_type() != 0)
        {
            total_size += 1 +
                          ::_pbi::WireFormatLite::EnumSize(this->_internal_tricker_type());
        }

        // int32 score = 10;
        if (this->_internal_score() != 0)
        {
            total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_score());
        }

        // int64 player_id = 11;
        if (this->_internal_player_id() != 0)
        {
            total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_player_id());
        }

        // int32 view_range = 12;
        if (this->_internal_view_range() != 0)
        {
            total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_view_range());
        }

        // int32 radius = 13;
        if (this->_internal_radius() != 0)
        {
            total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_radius());
        }

        // double trick_desire = 15;
        static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
        double tmp_trick_desire = this->_internal_trick_desire();
        uint64_t raw_trick_desire;
        memcpy(&raw_trick_desire, &tmp_trick_desire, sizeof(tmp_trick_desire));
        if (raw_trick_desire != 0)
        {
            total_size += 1 + 8;
        }

        // double class_volume = 16;
        static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
        double tmp_class_volume = this->_internal_class_volume();
        uint64_t raw_class_volume;
        memcpy(&raw_class_volume, &tmp_class_volume, sizeof(tmp_class_volume));
        if (raw_class_volume != 0)
        {
            total_size += 2 + 8;
        }

        // .protobuf.PlayerState player_state = 14;
        if (this->_internal_player_state() != 0)
        {
            total_size += 1 +
                          ::_pbi::WireFormatLite::EnumSize(this->_internal_player_state());
        }

        // .protobuf.BulletType bullet_type = 18;
        if (this->_internal_bullet_type() != 0)
        {
            total_size += 2 +
                          ::_pbi::WireFormatLite::EnumSize(this->_internal_bullet_type());
        }

        // double facing_direction = 17;
        static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
        double tmp_facing_direction = this->_internal_facing_direction();
        uint64_t raw_facing_direction;
        memcpy(&raw_facing_direction, &tmp_facing_direction, sizeof(tmp_facing_direction));
        if (raw_facing_direction != 0)
        {
            total_size += 2 + 8;
        }

        return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
    }

    const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MessageOfTricker::_class_data_ = {
        ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
        MessageOfTricker::MergeImpl};
    const ::PROTOBUF_NAMESPACE_ID::Message::ClassData* MessageOfTricker::GetClassData() const
    {
        return &_class_data_;
    }

    void MessageOfTricker::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg)
    {
        auto* const _this = static_cast<MessageOfTricker*>(&to_msg);
        auto& from = static_cast<const MessageOfTricker&>(from_msg);
        // @@protoc_insertion_point(class_specific_merge_from_start:protobuf.MessageOfTricker)
        GOOGLE_DCHECK_NE(&from, _this);
        uint32_t cached_has_bits = 0;
        (void)cached_has_bits;

        _this->_impl_.time_until_skill_available_.MergeFrom(from._impl_.time_until_skill_available_);
        _this->_impl_.prop_.MergeFrom(from._impl_.prop_);
        _this->_impl_.buff_.MergeFrom(from._impl_.buff_);
        if (from._internal_x() != 0)
        {
            _this->_internal_set_x(from._internal_x());
        }
        if (from._internal_y() != 0)
        {
            _this->_internal_set_y(from._internal_y());
        }
        if (from._internal_speed() != 0)
        {
            _this->_internal_set_speed(from._internal_speed());
        }
        if (from._internal_place() != 0)
        {
            _this->_internal_set_place(from._internal_place());
        }
        if (from._internal_guid() != 0)
        {
            _this->_internal_set_guid(from._internal_guid());
        }
        if (from._internal_tricker_type() != 0)
        {
            _this->_internal_set_tricker_type(from._internal_tricker_type());
        }
        if (from._internal_score() != 0)
        {
            _this->_internal_set_score(from._internal_score());
        }
        if (from._internal_player_id() != 0)
        {
            _this->_internal_set_player_id(from._internal_player_id());
        }
        if (from._internal_view_range() != 0)
        {
            _this->_internal_set_view_range(from._internal_view_range());
        }
        if (from._internal_radius() != 0)
        {
            _this->_internal_set_radius(from._internal_radius());
        }
        static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
        double tmp_trick_desire = from._internal_trick_desire();
        uint64_t raw_trick_desire;
        memcpy(&raw_trick_desire, &tmp_trick_desire, sizeof(tmp_trick_desire));
        if (raw_trick_desire != 0)
        {
            _this->_internal_set_trick_desire(from._internal_trick_desire());
        }
        static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
        double tmp_class_volume = from._internal_class_volume();
        uint64_t raw_class_volume;
        memcpy(&raw_class_volume, &tmp_class_volume, sizeof(tmp_class_volume));
        if (raw_class_volume != 0)
        {
            _this->_internal_set_class_volume(from._internal_class_volume());
        }
        if (from._internal_player_state() != 0)
        {
            _this->_internal_set_player_state(from._internal_player_state());
        }
        if (from._internal_bullet_type() != 0)
        {
            _this->_internal_set_bullet_type(from._internal_bullet_type());
        }
        static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
        double tmp_facing_direction = from._internal_facing_direction();
        uint64_t raw_facing_direction;
        memcpy(&raw_facing_direction, &tmp_facing_direction, sizeof(tmp_facing_direction));
        if (raw_facing_direction != 0)
        {
            _this->_internal_set_facing_direction(from._internal_facing_direction());
        }
        _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
    }

    void MessageOfTricker::CopyFrom(const MessageOfTricker& from)
    {
        // @@protoc_insertion_point(class_specific_copy_from_start:protobuf.MessageOfTricker)
        if (&from == this)
            return;
        Clear();
        MergeFrom(from);
    }

    bool MessageOfTricker::IsInitialized() const
    {
        return true;
    }

    void MessageOfTricker::InternalSwap(MessageOfTricker* other)
    {
        using std::swap;
        _internal_metadata_.InternalSwap(&other->_internal_metadata_);
        _impl_.time_until_skill_available_.InternalSwap(&other->_impl_.time_until_skill_available_);
        _impl_.prop_.InternalSwap(&other->_impl_.prop_);
        _impl_.buff_.InternalSwap(&other->_impl_.buff_);
        ::PROTOBUF_NAMESPACE_ID::internal::memswap<
            PROTOBUF_FIELD_OFFSET(MessageOfTricker, _impl_.facing_direction_) + sizeof(MessageOfTricker::_impl_.facing_direction_) - PROTOBUF_FIELD_OFFSET(MessageOfTricker, _impl_.x_)>(
            reinterpret_cast<char*>(&_impl_.x_),
            reinterpret_cast<char*>(&other->_impl_.x_)
        );
    }

    ::PROTOBUF_NAMESPACE_ID::Metadata MessageOfTricker::GetMetadata() const
    {
        return ::_pbi::AssignDescriptors(
            &descriptor_table_Message2Clients_2eproto_getter, &descriptor_table_Message2Clients_2eproto_once, file_level_metadata_Message2Clients_2eproto[1]
        );
    }

    // ===================================================================

    class MessageOfBullet::_Internal
    {
    public:
    };

    MessageOfBullet::MessageOfBullet(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned) :
        ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned)
    {
        SharedCtor(arena, is_message_owned);
        // @@protoc_insertion_point(arena_constructor:protobuf.MessageOfBullet)
    }
    MessageOfBullet::MessageOfBullet(const MessageOfBullet& from) :
        ::PROTOBUF_NAMESPACE_ID::Message()
    {
        MessageOfBullet* const _this = this;
        (void)_this;
        new (&_impl_) Impl_{
            decltype(_impl_.type_){}, decltype(_impl_.x_){}, decltype(_impl_.facing_direction_){}, decltype(_impl_.y_){}, decltype(_impl_.team_){}, decltype(_impl_.guid_){}, decltype(_impl_.bomb_range_){}, decltype(_impl_.place_){}, decltype(_impl_.speed_){}, /*decltype(_impl_._cached_size_)*/ {}};

        _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
        ::memcpy(&_impl_.type_, &from._impl_.type_, static_cast<size_t>(reinterpret_cast<char*>(&_impl_.speed_) - reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.speed_));
        // @@protoc_insertion_point(copy_constructor:protobuf.MessageOfBullet)
    }

    inline void MessageOfBullet::SharedCtor(
        ::_pb::Arena* arena, bool is_message_owned
    )
    {
        (void)arena;
        (void)is_message_owned;
        new (&_impl_) Impl_{
            decltype(_impl_.type_){0}, decltype(_impl_.x_){0}, decltype(_impl_.facing_direction_){0}, decltype(_impl_.y_){0}, decltype(_impl_.team_){0}, decltype(_impl_.guid_){int64_t{0}}, decltype(_impl_.bomb_range_){0}, decltype(_impl_.place_){0}, decltype(_impl_.speed_){0}, /*decltype(_impl_._cached_size_)*/ {}};
    }

    MessageOfBullet::~MessageOfBullet()
    {
        // @@protoc_insertion_point(destructor:protobuf.MessageOfBullet)
        if (auto* arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>())
        {
            (void)arena;
            return;
        }
        SharedDtor();
    }

    inline void MessageOfBullet::SharedDtor()
    {
        GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
    }

    void MessageOfBullet::SetCachedSize(int size) const
    {
        _impl_._cached_size_.Set(size);
    }

    void MessageOfBullet::Clear()
    {
        // @@protoc_insertion_point(message_clear_start:protobuf.MessageOfBullet)
        uint32_t cached_has_bits = 0;
        // Prevent compiler warnings about cached_has_bits being unused
        (void)cached_has_bits;

        ::memset(&_impl_.type_, 0, static_cast<size_t>(reinterpret_cast<char*>(&_impl_.speed_) - reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.speed_));
        _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
    }

    const char* MessageOfBullet::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx)
    {
#define CHK_(x)                       \
    if (PROTOBUF_PREDICT_FALSE(!(x))) \
    goto failure
        while (!ctx->Done(&ptr))
        {
            uint32_t tag;
            ptr = ::_pbi::ReadTag(ptr, &tag);
            switch (tag >> 3)
            {
                // .protobuf.BulletType type = 1;
                case 1:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8))
                    {
                        uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
                        CHK_(ptr);
                        _internal_set_type(static_cast<::protobuf::BulletType>(val));
                    }
                    else
                        goto handle_unusual;
                    continue;
                // int32 x = 2;
                case 2:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16))
                    {
                        _impl_.x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
                        CHK_(ptr);
                    }
                    else
                        goto handle_unusual;
                    continue;
                // int32 y = 3;
                case 3:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24))
                    {
                        _impl_.y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
                        CHK_(ptr);
                    }
                    else
                        goto handle_unusual;
                    continue;
                // double facing_direction = 4;
                case 4:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33))
                    {
                        _impl_.facing_direction_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
                        ptr += sizeof(double);
                    }
                    else
                        goto handle_unusual;
                    continue;
                // int64 guid = 5;
                case 5:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40))
                    {
                        _impl_.guid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
                        CHK_(ptr);
                    }
                    else
                        goto handle_unusual;
                    continue;
                // .protobuf.PlayerType team = 6;
                case 6:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48))
                    {
                        uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
                        CHK_(ptr);
                        _internal_set_team(static_cast<::protobuf::PlayerType>(val));
                    }
                    else
                        goto handle_unusual;
                    continue;
                // .protobuf.PlaceType place = 7;
                case 7:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56))
                    {
                        uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
                        CHK_(ptr);
                        _internal_set_place(static_cast<::protobuf::PlaceType>(val));
                    }
                    else
                        goto handle_unusual;
                    continue;
                // double bomb_range = 8;
                case 8:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 65))
                    {
                        _impl_.bomb_range_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
                        ptr += sizeof(double);
                    }
                    else
                        goto handle_unusual;
                    continue;
                // int32 speed = 9;
                case 9:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72))
                    {
                        _impl_.speed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
                        CHK_(ptr);
                    }
                    else
                        goto handle_unusual;
                    continue;
                default:
                    goto handle_unusual;
            }  // switch
        handle_unusual:
            if ((tag == 0) || ((tag & 7) == 4))
            {
                CHK_(ptr);
                ctx->SetLastTag(tag);
                goto message_done;
            }
            ptr = UnknownFieldParse(
                tag,
                _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
                ptr,
                ctx
            );
            CHK_(ptr != nullptr);
        }  // while
    message_done:
        return ptr;
    failure:
        ptr = nullptr;
        goto message_done;
#undef CHK_
    }

    uint8_t* MessageOfBullet::_InternalSerialize(
        uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream
    ) const
    {
        // @@protoc_insertion_point(serialize_to_array_start:protobuf.MessageOfBullet)
        uint32_t cached_has_bits = 0;
        (void)cached_has_bits;

        // .protobuf.BulletType type = 1;
        if (this->_internal_type() != 0)
        {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                1, this->_internal_type(), target
            );
        }

        // int32 x = 2;
        if (this->_internal_x() != 0)
        {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_x(), target);
        }

        // int32 y = 3;
        if (this->_internal_y() != 0)
        {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_y(), target);
        }

        // double facing_direction = 4;
        static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
        double tmp_facing_direction = this->_internal_facing_direction();
        uint64_t raw_facing_direction;
        memcpy(&raw_facing_direction, &tmp_facing_direction, sizeof(tmp_facing_direction));
        if (raw_facing_direction != 0)
        {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(4, this->_internal_facing_direction(), target);
        }

        // int64 guid = 5;
        if (this->_internal_guid() != 0)
        {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt64ToArray(5, this->_internal_guid(), target);
        }

        // .protobuf.PlayerType team = 6;
        if (this->_internal_team() != 0)
        {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                6, this->_internal_team(), target
            );
        }

        // .protobuf.PlaceType place = 7;
        if (this->_internal_place() != 0)
        {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                7, this->_internal_place(), target
            );
        }

        // double bomb_range = 8;
        static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
        double tmp_bomb_range = this->_internal_bomb_range();
        uint64_t raw_bomb_range;
        memcpy(&raw_bomb_range, &tmp_bomb_range, sizeof(tmp_bomb_range));
        if (raw_bomb_range != 0)
        {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(8, this->_internal_bomb_range(), target);
        }

        // int32 speed = 9;
        if (this->_internal_speed() != 0)
        {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt32ToArray(9, this->_internal_speed(), target);
        }

        if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields()))
        {
            target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream
            );
        }
        // @@protoc_insertion_point(serialize_to_array_end:protobuf.MessageOfBullet)
        return target;
    }

    size_t MessageOfBullet::ByteSizeLong() const
    {
        // @@protoc_insertion_point(message_byte_size_start:protobuf.MessageOfBullet)
        size_t total_size = 0;

        uint32_t cached_has_bits = 0;
        // Prevent compiler warnings about cached_has_bits being unused
        (void)cached_has_bits;

        // .protobuf.BulletType type = 1;
        if (this->_internal_type() != 0)
        {
            total_size += 1 +
                          ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
        }

        // int32 x = 2;
        if (this->_internal_x() != 0)
        {
            total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_x());
        }

        // double facing_direction = 4;
        static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
        double tmp_facing_direction = this->_internal_facing_direction();
        uint64_t raw_facing_direction;
        memcpy(&raw_facing_direction, &tmp_facing_direction, sizeof(tmp_facing_direction));
        if (raw_facing_direction != 0)
        {
            total_size += 1 + 8;
        }

        // int32 y = 3;
        if (this->_internal_y() != 0)
        {
            total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_y());
        }

        // .protobuf.PlayerType team = 6;
        if (this->_internal_team() != 0)
        {
            total_size += 1 +
                          ::_pbi::WireFormatLite::EnumSize(this->_internal_team());
        }

        // int64 guid = 5;
        if (this->_internal_guid() != 0)
        {
            total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_guid());
        }

        // double bomb_range = 8;
        static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
        double tmp_bomb_range = this->_internal_bomb_range();
        uint64_t raw_bomb_range;
        memcpy(&raw_bomb_range, &tmp_bomb_range, sizeof(tmp_bomb_range));
        if (raw_bomb_range != 0)
        {
            total_size += 1 + 8;
        }

        // .protobuf.PlaceType place = 7;
        if (this->_internal_place() != 0)
        {
            total_size += 1 +
                          ::_pbi::WireFormatLite::EnumSize(this->_internal_place());
        }

        // int32 speed = 9;
        if (this->_internal_speed() != 0)
        {
            total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_speed());
        }

        return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
    }

    const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MessageOfBullet::_class_data_ = {
        ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
        MessageOfBullet::MergeImpl};
    const ::PROTOBUF_NAMESPACE_ID::Message::ClassData* MessageOfBullet::GetClassData() const
    {
        return &_class_data_;
    }

    void MessageOfBullet::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg)
    {
        auto* const _this = static_cast<MessageOfBullet*>(&to_msg);
        auto& from = static_cast<const MessageOfBullet&>(from_msg);
        // @@protoc_insertion_point(class_specific_merge_from_start:protobuf.MessageOfBullet)
        GOOGLE_DCHECK_NE(&from, _this);
        uint32_t cached_has_bits = 0;
        (void)cached_has_bits;

        if (from._internal_type() != 0)
        {
            _this->_internal_set_type(from._internal_type());
        }
        if (from._internal_x() != 0)
        {
            _this->_internal_set_x(from._internal_x());
        }
        static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
        double tmp_facing_direction = from._internal_facing_direction();
        uint64_t raw_facing_direction;
        memcpy(&raw_facing_direction, &tmp_facing_direction, sizeof(tmp_facing_direction));
        if (raw_facing_direction != 0)
        {
            _this->_internal_set_facing_direction(from._internal_facing_direction());
        }
        if (from._internal_y() != 0)
        {
            _this->_internal_set_y(from._internal_y());
        }
        if (from._internal_team() != 0)
        {
            _this->_internal_set_team(from._internal_team());
        }
        if (from._internal_guid() != 0)
        {
            _this->_internal_set_guid(from._internal_guid());
        }
        static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
        double tmp_bomb_range = from._internal_bomb_range();
        uint64_t raw_bomb_range;
        memcpy(&raw_bomb_range, &tmp_bomb_range, sizeof(tmp_bomb_range));
        if (raw_bomb_range != 0)
        {
            _this->_internal_set_bomb_range(from._internal_bomb_range());
        }
        if (from._internal_place() != 0)
        {
            _this->_internal_set_place(from._internal_place());
        }
        if (from._internal_speed() != 0)
        {
            _this->_internal_set_speed(from._internal_speed());
        }
        _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
    }

    void MessageOfBullet::CopyFrom(const MessageOfBullet& from)
    {
        // @@protoc_insertion_point(class_specific_copy_from_start:protobuf.MessageOfBullet)
        if (&from == this)
            return;
        Clear();
        MergeFrom(from);
    }

    bool MessageOfBullet::IsInitialized() const
    {
        return true;
    }

    void MessageOfBullet::InternalSwap(MessageOfBullet* other)
    {
        using std::swap;
        _internal_metadata_.InternalSwap(&other->_internal_metadata_);
        ::PROTOBUF_NAMESPACE_ID::internal::memswap<
            PROTOBUF_FIELD_OFFSET(MessageOfBullet, _impl_.speed_) + sizeof(MessageOfBullet::_impl_.speed_) - PROTOBUF_FIELD_OFFSET(MessageOfBullet, _impl_.type_)>(
            reinterpret_cast<char*>(&_impl_.type_),
            reinterpret_cast<char*>(&other->_impl_.type_)
        );
    }

    ::PROTOBUF_NAMESPACE_ID::Metadata MessageOfBullet::GetMetadata() const
    {
        return ::_pbi::AssignDescriptors(
            &descriptor_table_Message2Clients_2eproto_getter, &descriptor_table_Message2Clients_2eproto_once, file_level_metadata_Message2Clients_2eproto[2]
        );
    }

    // ===================================================================

    class MessageOfBombedBullet::_Internal
    {
    public:
    };

    MessageOfBombedBullet::MessageOfBombedBullet(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned) :
        ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned)
    {
        SharedCtor(arena, is_message_owned);
        // @@protoc_insertion_point(arena_constructor:protobuf.MessageOfBombedBullet)
    }
    MessageOfBombedBullet::MessageOfBombedBullet(const MessageOfBombedBullet& from) :
        ::PROTOBUF_NAMESPACE_ID::Message()
    {
        MessageOfBombedBullet* const _this = this;
        (void)_this;
        new (&_impl_) Impl_{
            decltype(_impl_.type_){}, decltype(_impl_.x_){}, decltype(_impl_.facing_direction_){}, decltype(_impl_.mapping_id_){}, decltype(_impl_.bomb_range_){}, decltype(_impl_.y_){}, /*decltype(_impl_._cached_size_)*/ {}};

        _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
        ::memcpy(&_impl_.type_, &from._impl_.type_, static_cast<size_t>(reinterpret_cast<char*>(&_impl_.y_) - reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.y_));
        // @@protoc_insertion_point(copy_constructor:protobuf.MessageOfBombedBullet)
    }

    inline void MessageOfBombedBullet::SharedCtor(
        ::_pb::Arena* arena, bool is_message_owned
    )
    {
        (void)arena;
        (void)is_message_owned;
        new (&_impl_) Impl_{
            decltype(_impl_.type_){0}, decltype(_impl_.x_){0}, decltype(_impl_.facing_direction_){0}, decltype(_impl_.mapping_id_){int64_t{0}}, decltype(_impl_.bomb_range_){0}, decltype(_impl_.y_){0}, /*decltype(_impl_._cached_size_)*/ {}};
    }

    MessageOfBombedBullet::~MessageOfBombedBullet()
    {
        // @@protoc_insertion_point(destructor:protobuf.MessageOfBombedBullet)
        if (auto* arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>())
        {
            (void)arena;
            return;
        }
        SharedDtor();
    }

    inline void MessageOfBombedBullet::SharedDtor()
    {
        GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
    }

    void MessageOfBombedBullet::SetCachedSize(int size) const
    {
        _impl_._cached_size_.Set(size);
    }

    void MessageOfBombedBullet::Clear()
    {
        // @@protoc_insertion_point(message_clear_start:protobuf.MessageOfBombedBullet)
        uint32_t cached_has_bits = 0;
        // Prevent compiler warnings about cached_has_bits being unused
        (void)cached_has_bits;

        ::memset(&_impl_.type_, 0, static_cast<size_t>(reinterpret_cast<char*>(&_impl_.y_) - reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.y_));
        _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
    }

    const char* MessageOfBombedBullet::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx)
    {
#define CHK_(x)                       \
    if (PROTOBUF_PREDICT_FALSE(!(x))) \
    goto failure
        while (!ctx->Done(&ptr))
        {
            uint32_t tag;
            ptr = ::_pbi::ReadTag(ptr, &tag);
            switch (tag >> 3)
            {
                // .protobuf.BulletType type = 1;
                case 1:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8))
                    {
                        uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
                        CHK_(ptr);
                        _internal_set_type(static_cast<::protobuf::BulletType>(val));
                    }
                    else
                        goto handle_unusual;
                    continue;
                // int32 x = 2;
                case 2:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16))
                    {
                        _impl_.x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
                        CHK_(ptr);
                    }
                    else
                        goto handle_unusual;
                    continue;
                // int32 y = 3;
                case 3:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24))
                    {
                        _impl_.y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
                        CHK_(ptr);
                    }
                    else
                        goto handle_unusual;
                    continue;
                // double facing_direction = 4;
                case 4:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33))
                    {
                        _impl_.facing_direction_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
                        ptr += sizeof(double);
                    }
                    else
                        goto handle_unusual;
                    continue;
                // int64 mapping_id = 5;
                case 5:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40))
                    {
                        _impl_.mapping_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
                        CHK_(ptr);
                    }
                    else
                        goto handle_unusual;
                    continue;
                // double bomb_range = 6;
                case 6:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 49))
                    {
                        _impl_.bomb_range_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
                        ptr += sizeof(double);
                    }
                    else
                        goto handle_unusual;
                    continue;
                default:
                    goto handle_unusual;
            }  // switch
        handle_unusual:
            if ((tag == 0) || ((tag & 7) == 4))
            {
                CHK_(ptr);
                ctx->SetLastTag(tag);
                goto message_done;
            }
            ptr = UnknownFieldParse(
                tag,
                _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
                ptr,
                ctx
            );
            CHK_(ptr != nullptr);
        }  // while
    message_done:
        return ptr;
    failure:
        ptr = nullptr;
        goto message_done;
#undef CHK_
    }

    uint8_t* MessageOfBombedBullet::_InternalSerialize(
        uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream
    ) const
    {
        // @@protoc_insertion_point(serialize_to_array_start:protobuf.MessageOfBombedBullet)
        uint32_t cached_has_bits = 0;
        (void)cached_has_bits;

        // .protobuf.BulletType type = 1;
        if (this->_internal_type() != 0)
        {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                1, this->_internal_type(), target
            );
        }

        // int32 x = 2;
        if (this->_internal_x() != 0)
        {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_x(), target);
        }

        // int32 y = 3;
        if (this->_internal_y() != 0)
        {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_y(), target);
        }

        // double facing_direction = 4;
        static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
        double tmp_facing_direction = this->_internal_facing_direction();
        uint64_t raw_facing_direction;
        memcpy(&raw_facing_direction, &tmp_facing_direction, sizeof(tmp_facing_direction));
        if (raw_facing_direction != 0)
        {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(4, this->_internal_facing_direction(), target);
        }

        // int64 mapping_id = 5;
        if (this->_internal_mapping_id() != 0)
        {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt64ToArray(5, this->_internal_mapping_id(), target);
        }

        // double bomb_range = 6;
        static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
        double tmp_bomb_range = this->_internal_bomb_range();
        uint64_t raw_bomb_range;
        memcpy(&raw_bomb_range, &tmp_bomb_range, sizeof(tmp_bomb_range));
        if (raw_bomb_range != 0)
        {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(6, this->_internal_bomb_range(), target);
        }

        if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields()))
        {
            target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream
            );
        }
        // @@protoc_insertion_point(serialize_to_array_end:protobuf.MessageOfBombedBullet)
        return target;
    }

    size_t MessageOfBombedBullet::ByteSizeLong() const
    {
        // @@protoc_insertion_point(message_byte_size_start:protobuf.MessageOfBombedBullet)
        size_t total_size = 0;

        uint32_t cached_has_bits = 0;
        // Prevent compiler warnings about cached_has_bits being unused
        (void)cached_has_bits;

        // .protobuf.BulletType type = 1;
        if (this->_internal_type() != 0)
        {
            total_size += 1 +
                          ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
        }

        // int32 x = 2;
        if (this->_internal_x() != 0)
        {
            total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_x());
        }

        // double facing_direction = 4;
        static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
        double tmp_facing_direction = this->_internal_facing_direction();
        uint64_t raw_facing_direction;
        memcpy(&raw_facing_direction, &tmp_facing_direction, sizeof(tmp_facing_direction));
        if (raw_facing_direction != 0)
        {
            total_size += 1 + 8;
        }

        // int64 mapping_id = 5;
        if (this->_internal_mapping_id() != 0)
        {
            total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_mapping_id());
        }

        // double bomb_range = 6;
        static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
        double tmp_bomb_range = this->_internal_bomb_range();
        uint64_t raw_bomb_range;
        memcpy(&raw_bomb_range, &tmp_bomb_range, sizeof(tmp_bomb_range));
        if (raw_bomb_range != 0)
        {
            total_size += 1 + 8;
        }

        // int32 y = 3;
        if (this->_internal_y() != 0)
        {
            total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_y());
        }

        return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
    }

    const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MessageOfBombedBullet::_class_data_ = {
        ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
        MessageOfBombedBullet::MergeImpl};
    const ::PROTOBUF_NAMESPACE_ID::Message::ClassData* MessageOfBombedBullet::GetClassData() const
    {
        return &_class_data_;
    }

    void MessageOfBombedBullet::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg)
    {
        auto* const _this = static_cast<MessageOfBombedBullet*>(&to_msg);
        auto& from = static_cast<const MessageOfBombedBullet&>(from_msg);
        // @@protoc_insertion_point(class_specific_merge_from_start:protobuf.MessageOfBombedBullet)
        GOOGLE_DCHECK_NE(&from, _this);
        uint32_t cached_has_bits = 0;
        (void)cached_has_bits;

        if (from._internal_type() != 0)
        {
            _this->_internal_set_type(from._internal_type());
        }
        if (from._internal_x() != 0)
        {
            _this->_internal_set_x(from._internal_x());
        }
        static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
        double tmp_facing_direction = from._internal_facing_direction();
        uint64_t raw_facing_direction;
        memcpy(&raw_facing_direction, &tmp_facing_direction, sizeof(tmp_facing_direction));
        if (raw_facing_direction != 0)
        {
            _this->_internal_set_facing_direction(from._internal_facing_direction());
        }
        if (from._internal_mapping_id() != 0)
        {
            _this->_internal_set_mapping_id(from._internal_mapping_id());
        }
        static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
        double tmp_bomb_range = from._internal_bomb_range();
        uint64_t raw_bomb_range;
        memcpy(&raw_bomb_range, &tmp_bomb_range, sizeof(tmp_bomb_range));
        if (raw_bomb_range != 0)
        {
            _this->_internal_set_bomb_range(from._internal_bomb_range());
        }
        if (from._internal_y() != 0)
        {
            _this->_internal_set_y(from._internal_y());
        }
        _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
    }

    void MessageOfBombedBullet::CopyFrom(const MessageOfBombedBullet& from)
    {
        // @@protoc_insertion_point(class_specific_copy_from_start:protobuf.MessageOfBombedBullet)
        if (&from == this)
            return;
        Clear();
        MergeFrom(from);
    }

    bool MessageOfBombedBullet::IsInitialized() const
    {
        return true;
    }

    void MessageOfBombedBullet::InternalSwap(MessageOfBombedBullet* other)
    {
        using std::swap;
        _internal_metadata_.InternalSwap(&other->_internal_metadata_);
        ::PROTOBUF_NAMESPACE_ID::internal::memswap<
            PROTOBUF_FIELD_OFFSET(MessageOfBombedBullet, _impl_.y_) + sizeof(MessageOfBombedBullet::_impl_.y_) - PROTOBUF_FIELD_OFFSET(MessageOfBombedBullet, _impl_.type_)>(
            reinterpret_cast<char*>(&_impl_.type_),
            reinterpret_cast<char*>(&other->_impl_.type_)
        );
    }

    ::PROTOBUF_NAMESPACE_ID::Metadata MessageOfBombedBullet::GetMetadata() const
    {
        return ::_pbi::AssignDescriptors(
            &descriptor_table_Message2Clients_2eproto_getter, &descriptor_table_Message2Clients_2eproto_once, file_level_metadata_Message2Clients_2eproto[3]
        );
    }

    // ===================================================================

    class MessageOfProp::_Internal
    {
    public:
    };

    MessageOfProp::MessageOfProp(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned) :
        ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned)
    {
        SharedCtor(arena, is_message_owned);
        // @@protoc_insertion_point(arena_constructor:protobuf.MessageOfProp)
    }
    MessageOfProp::MessageOfProp(const MessageOfProp& from) :
        ::PROTOBUF_NAMESPACE_ID::Message()
    {
        MessageOfProp* const _this = this;
        (void)_this;
        new (&_impl_) Impl_{
            decltype(_impl_.type_){}, decltype(_impl_.x_){}, decltype(_impl_.facing_direction_){}, decltype(_impl_.y_){}, decltype(_impl_.place_){}, decltype(_impl_.guid_){}, /*decltype(_impl_._cached_size_)*/ {}};

        _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
        ::memcpy(&_impl_.type_, &from._impl_.type_, static_cast<size_t>(reinterpret_cast<char*>(&_impl_.guid_) - reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.guid_));
        // @@protoc_insertion_point(copy_constructor:protobuf.MessageOfProp)
    }

    inline void MessageOfProp::SharedCtor(
        ::_pb::Arena* arena, bool is_message_owned
    )
    {
        (void)arena;
        (void)is_message_owned;
        new (&_impl_) Impl_{
            decltype(_impl_.type_){0}, decltype(_impl_.x_){0}, decltype(_impl_.facing_direction_){0}, decltype(_impl_.y_){0}, decltype(_impl_.place_){0}, decltype(_impl_.guid_){int64_t{0}}, /*decltype(_impl_._cached_size_)*/ {}};
    }

    MessageOfProp::~MessageOfProp()
    {
        // @@protoc_insertion_point(destructor:protobuf.MessageOfProp)
        if (auto* arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>())
        {
            (void)arena;
            return;
        }
        SharedDtor();
    }

    inline void MessageOfProp::SharedDtor()
    {
        GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
    }

    void MessageOfProp::SetCachedSize(int size) const
    {
        _impl_._cached_size_.Set(size);
    }

    void MessageOfProp::Clear()
    {
        // @@protoc_insertion_point(message_clear_start:protobuf.MessageOfProp)
        uint32_t cached_has_bits = 0;
        // Prevent compiler warnings about cached_has_bits being unused
        (void)cached_has_bits;

        ::memset(&_impl_.type_, 0, static_cast<size_t>(reinterpret_cast<char*>(&_impl_.guid_) - reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.guid_));
        _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
    }

    const char* MessageOfProp::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx)
    {
#define CHK_(x)                       \
    if (PROTOBUF_PREDICT_FALSE(!(x))) \
    goto failure
        while (!ctx->Done(&ptr))
        {
            uint32_t tag;
            ptr = ::_pbi::ReadTag(ptr, &tag);
            switch (tag >> 3)
            {
                // .protobuf.PropType type = 1;
                case 1:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8))
                    {
                        uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
                        CHK_(ptr);
                        _internal_set_type(static_cast<::protobuf::PropType>(val));
                    }
                    else
                        goto handle_unusual;
                    continue;
                // int32 x = 2;
                case 2:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16))
                    {
                        _impl_.x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
                        CHK_(ptr);
                    }
                    else
                        goto handle_unusual;
                    continue;
                // int32 y = 3;
                case 3:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24))
                    {
                        _impl_.y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
                        CHK_(ptr);
                    }
                    else
                        goto handle_unusual;
                    continue;
                // double facing_direction = 4;
                case 4:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33))
                    {
                        _impl_.facing_direction_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
                        ptr += sizeof(double);
                    }
                    else
                        goto handle_unusual;
                    continue;
                // int64 guid = 5;
                case 5:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40))
                    {
                        _impl_.guid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
                        CHK_(ptr);
                    }
                    else
                        goto handle_unusual;
                    continue;
                // .protobuf.PlaceType place = 6;
                case 6:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48))
                    {
                        uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
                        CHK_(ptr);
                        _internal_set_place(static_cast<::protobuf::PlaceType>(val));
                    }
                    else
                        goto handle_unusual;
                    continue;
                default:
                    goto handle_unusual;
            }  // switch
        handle_unusual:
            if ((tag == 0) || ((tag & 7) == 4))
            {
                CHK_(ptr);
                ctx->SetLastTag(tag);
                goto message_done;
            }
            ptr = UnknownFieldParse(
                tag,
                _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
                ptr,
                ctx
            );
            CHK_(ptr != nullptr);
        }  // while
    message_done:
        return ptr;
    failure:
        ptr = nullptr;
        goto message_done;
#undef CHK_
    }

    uint8_t* MessageOfProp::_InternalSerialize(
        uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream
    ) const
    {
        // @@protoc_insertion_point(serialize_to_array_start:protobuf.MessageOfProp)
        uint32_t cached_has_bits = 0;
        (void)cached_has_bits;

        // .protobuf.PropType type = 1;
        if (this->_internal_type() != 0)
        {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                1, this->_internal_type(), target
            );
        }

        // int32 x = 2;
        if (this->_internal_x() != 0)
        {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_x(), target);
        }

        // int32 y = 3;
        if (this->_internal_y() != 0)
        {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_y(), target);
        }

        // double facing_direction = 4;
        static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
        double tmp_facing_direction = this->_internal_facing_direction();
        uint64_t raw_facing_direction;
        memcpy(&raw_facing_direction, &tmp_facing_direction, sizeof(tmp_facing_direction));
        if (raw_facing_direction != 0)
        {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(4, this->_internal_facing_direction(), target);
        }

        // int64 guid = 5;
        if (this->_internal_guid() != 0)
        {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt64ToArray(5, this->_internal_guid(), target);
        }

        // .protobuf.PlaceType place = 6;
        if (this->_internal_place() != 0)
        {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                6, this->_internal_place(), target
            );
        }

        if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields()))
        {
            target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream
            );
        }
        // @@protoc_insertion_point(serialize_to_array_end:protobuf.MessageOfProp)
        return target;
    }

    size_t MessageOfProp::ByteSizeLong() const
    {
        // @@protoc_insertion_point(message_byte_size_start:protobuf.MessageOfProp)
        size_t total_size = 0;

        uint32_t cached_has_bits = 0;
        // Prevent compiler warnings about cached_has_bits being unused
        (void)cached_has_bits;

        // .protobuf.PropType type = 1;
        if (this->_internal_type() != 0)
        {
            total_size += 1 +
                          ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
        }

        // int32 x = 2;
        if (this->_internal_x() != 0)
        {
            total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_x());
        }

        // double facing_direction = 4;
        static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
        double tmp_facing_direction = this->_internal_facing_direction();
        uint64_t raw_facing_direction;
        memcpy(&raw_facing_direction, &tmp_facing_direction, sizeof(tmp_facing_direction));
        if (raw_facing_direction != 0)
        {
            total_size += 1 + 8;
        }

        // int32 y = 3;
        if (this->_internal_y() != 0)
        {
            total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_y());
        }

        // .protobuf.PlaceType place = 6;
        if (this->_internal_place() != 0)
        {
            total_size += 1 +
                          ::_pbi::WireFormatLite::EnumSize(this->_internal_place());
        }

        // int64 guid = 5;
        if (this->_internal_guid() != 0)
        {
            total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_guid());
        }

        return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
    }

    const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MessageOfProp::_class_data_ = {
        ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
        MessageOfProp::MergeImpl};
    const ::PROTOBUF_NAMESPACE_ID::Message::ClassData* MessageOfProp::GetClassData() const
    {
        return &_class_data_;
    }

    void MessageOfProp::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg)
    {
        auto* const _this = static_cast<MessageOfProp*>(&to_msg);
        auto& from = static_cast<const MessageOfProp&>(from_msg);
        // @@protoc_insertion_point(class_specific_merge_from_start:protobuf.MessageOfProp)
        GOOGLE_DCHECK_NE(&from, _this);
        uint32_t cached_has_bits = 0;
        (void)cached_has_bits;

        if (from._internal_type() != 0)
        {
            _this->_internal_set_type(from._internal_type());
        }
        if (from._internal_x() != 0)
        {
            _this->_internal_set_x(from._internal_x());
        }
        static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
        double tmp_facing_direction = from._internal_facing_direction();
        uint64_t raw_facing_direction;
        memcpy(&raw_facing_direction, &tmp_facing_direction, sizeof(tmp_facing_direction));
        if (raw_facing_direction != 0)
        {
            _this->_internal_set_facing_direction(from._internal_facing_direction());
        }
        if (from._internal_y() != 0)
        {
            _this->_internal_set_y(from._internal_y());
        }
        if (from._internal_place() != 0)
        {
            _this->_internal_set_place(from._internal_place());
        }
        if (from._internal_guid() != 0)
        {
            _this->_internal_set_guid(from._internal_guid());
        }
        _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
    }

    void MessageOfProp::CopyFrom(const MessageOfProp& from)
    {
        // @@protoc_insertion_point(class_specific_copy_from_start:protobuf.MessageOfProp)
        if (&from == this)
            return;
        Clear();
        MergeFrom(from);
    }

    bool MessageOfProp::IsInitialized() const
    {
        return true;
    }

    void MessageOfProp::InternalSwap(MessageOfProp* other)
    {
        using std::swap;
        _internal_metadata_.InternalSwap(&other->_internal_metadata_);
        ::PROTOBUF_NAMESPACE_ID::internal::memswap<
            PROTOBUF_FIELD_OFFSET(MessageOfProp, _impl_.guid_) + sizeof(MessageOfProp::_impl_.guid_) - PROTOBUF_FIELD_OFFSET(MessageOfProp, _impl_.type_)>(
            reinterpret_cast<char*>(&_impl_.type_),
            reinterpret_cast<char*>(&other->_impl_.type_)
        );
    }

    ::PROTOBUF_NAMESPACE_ID::Metadata MessageOfProp::GetMetadata() const
    {
        return ::_pbi::AssignDescriptors(
            &descriptor_table_Message2Clients_2eproto_getter, &descriptor_table_Message2Clients_2eproto_once, file_level_metadata_Message2Clients_2eproto[4]
        );
    }

    // ===================================================================

    class MessageOfPickedProp::_Internal
    {
    public:
    };

    MessageOfPickedProp::MessageOfPickedProp(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned) :
        ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned)
    {
        SharedCtor(arena, is_message_owned);
        // @@protoc_insertion_point(arena_constructor:protobuf.MessageOfPickedProp)
    }
    MessageOfPickedProp::MessageOfPickedProp(const MessageOfPickedProp& from) :
        ::PROTOBUF_NAMESPACE_ID::Message()
    {
        MessageOfPickedProp* const _this = this;
        (void)_this;
        new (&_impl_) Impl_{
            decltype(_impl_.type_){}, decltype(_impl_.x_){}, decltype(_impl_.facing_direction_){}, decltype(_impl_.mapping_id_){}, decltype(_impl_.y_){}, /*decltype(_impl_._cached_size_)*/ {}};

        _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
        ::memcpy(&_impl_.type_, &from._impl_.type_, static_cast<size_t>(reinterpret_cast<char*>(&_impl_.y_) - reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.y_));
        // @@protoc_insertion_point(copy_constructor:protobuf.MessageOfPickedProp)
    }

    inline void MessageOfPickedProp::SharedCtor(
        ::_pb::Arena* arena, bool is_message_owned
    )
    {
        (void)arena;
        (void)is_message_owned;
        new (&_impl_) Impl_{
            decltype(_impl_.type_){0}, decltype(_impl_.x_){0}, decltype(_impl_.facing_direction_){0}, decltype(_impl_.mapping_id_){int64_t{0}}, decltype(_impl_.y_){0}, /*decltype(_impl_._cached_size_)*/ {}};
    }

    MessageOfPickedProp::~MessageOfPickedProp()
    {
        // @@protoc_insertion_point(destructor:protobuf.MessageOfPickedProp)
        if (auto* arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>())
        {
            (void)arena;
            return;
        }
        SharedDtor();
    }

    inline void MessageOfPickedProp::SharedDtor()
    {
        GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
    }

    void MessageOfPickedProp::SetCachedSize(int size) const
    {
        _impl_._cached_size_.Set(size);
    }

    void MessageOfPickedProp::Clear()
    {
        // @@protoc_insertion_point(message_clear_start:protobuf.MessageOfPickedProp)
        uint32_t cached_has_bits = 0;
        // Prevent compiler warnings about cached_has_bits being unused
        (void)cached_has_bits;

        ::memset(&_impl_.type_, 0, static_cast<size_t>(reinterpret_cast<char*>(&_impl_.y_) - reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.y_));
        _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
    }

    const char* MessageOfPickedProp::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx)
    {
#define CHK_(x)                       \
    if (PROTOBUF_PREDICT_FALSE(!(x))) \
    goto failure
        while (!ctx->Done(&ptr))
        {
            uint32_t tag;
            ptr = ::_pbi::ReadTag(ptr, &tag);
            switch (tag >> 3)
            {
                // .protobuf.PropType type = 1;
                case 1:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8))
                    {
                        uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
                        CHK_(ptr);
                        _internal_set_type(static_cast<::protobuf::PropType>(val));
                    }
                    else
                        goto handle_unusual;
                    continue;
                // int32 x = 2;
                case 2:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16))
                    {
                        _impl_.x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
                        CHK_(ptr);
                    }
                    else
                        goto handle_unusual;
                    continue;
                // int32 y = 3;
                case 3:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24))
                    {
                        _impl_.y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
                        CHK_(ptr);
                    }
                    else
                        goto handle_unusual;
                    continue;
                // double facing_direction = 4;
                case 4:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33))
                    {
                        _impl_.facing_direction_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
                        ptr += sizeof(double);
                    }
                    else
                        goto handle_unusual;
                    continue;
                // int64 mapping_id = 5;
                case 5:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40))
                    {
                        _impl_.mapping_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
                        CHK_(ptr);
                    }
                    else
                        goto handle_unusual;
                    continue;
                default:
                    goto handle_unusual;
            }  // switch
        handle_unusual:
            if ((tag == 0) || ((tag & 7) == 4))
            {
                CHK_(ptr);
                ctx->SetLastTag(tag);
                goto message_done;
            }
            ptr = UnknownFieldParse(
                tag,
                _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
                ptr,
                ctx
            );
            CHK_(ptr != nullptr);
        }  // while
    message_done:
        return ptr;
    failure:
        ptr = nullptr;
        goto message_done;
#undef CHK_
    }

    uint8_t* MessageOfPickedProp::_InternalSerialize(
        uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream
    ) const
    {
        // @@protoc_insertion_point(serialize_to_array_start:protobuf.MessageOfPickedProp)
        uint32_t cached_has_bits = 0;
        (void)cached_has_bits;

        // .protobuf.PropType type = 1;
        if (this->_internal_type() != 0)
        {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                1, this->_internal_type(), target
            );
        }

        // int32 x = 2;
        if (this->_internal_x() != 0)
        {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_x(), target);
        }

        // int32 y = 3;
        if (this->_internal_y() != 0)
        {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_y(), target);
        }

        // double facing_direction = 4;
        static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
        double tmp_facing_direction = this->_internal_facing_direction();
        uint64_t raw_facing_direction;
        memcpy(&raw_facing_direction, &tmp_facing_direction, sizeof(tmp_facing_direction));
        if (raw_facing_direction != 0)
        {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(4, this->_internal_facing_direction(), target);
        }

        // int64 mapping_id = 5;
        if (this->_internal_mapping_id() != 0)
        {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt64ToArray(5, this->_internal_mapping_id(), target);
        }

        if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields()))
        {
            target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream
            );
        }
        // @@protoc_insertion_point(serialize_to_array_end:protobuf.MessageOfPickedProp)
        return target;
    }

    size_t MessageOfPickedProp::ByteSizeLong() const
    {
        // @@protoc_insertion_point(message_byte_size_start:protobuf.MessageOfPickedProp)
        size_t total_size = 0;

        uint32_t cached_has_bits = 0;
        // Prevent compiler warnings about cached_has_bits being unused
        (void)cached_has_bits;

        // .protobuf.PropType type = 1;
        if (this->_internal_type() != 0)
        {
            total_size += 1 +
                          ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
        }

        // int32 x = 2;
        if (this->_internal_x() != 0)
        {
            total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_x());
        }

        // double facing_direction = 4;
        static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
        double tmp_facing_direction = this->_internal_facing_direction();
        uint64_t raw_facing_direction;
        memcpy(&raw_facing_direction, &tmp_facing_direction, sizeof(tmp_facing_direction));
        if (raw_facing_direction != 0)
        {
            total_size += 1 + 8;
        }

        // int64 mapping_id = 5;
        if (this->_internal_mapping_id() != 0)
        {
            total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_mapping_id());
        }

        // int32 y = 3;
        if (this->_internal_y() != 0)
        {
            total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_y());
        }

        return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
    }

    const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MessageOfPickedProp::_class_data_ = {
        ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
        MessageOfPickedProp::MergeImpl};
    const ::PROTOBUF_NAMESPACE_ID::Message::ClassData* MessageOfPickedProp::GetClassData() const
    {
        return &_class_data_;
    }

    void MessageOfPickedProp::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg)
    {
        auto* const _this = static_cast<MessageOfPickedProp*>(&to_msg);
        auto& from = static_cast<const MessageOfPickedProp&>(from_msg);
        // @@protoc_insertion_point(class_specific_merge_from_start:protobuf.MessageOfPickedProp)
        GOOGLE_DCHECK_NE(&from, _this);
        uint32_t cached_has_bits = 0;
        (void)cached_has_bits;

        if (from._internal_type() != 0)
        {
            _this->_internal_set_type(from._internal_type());
        }
        if (from._internal_x() != 0)
        {
            _this->_internal_set_x(from._internal_x());
        }
        static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
        double tmp_facing_direction = from._internal_facing_direction();
        uint64_t raw_facing_direction;
        memcpy(&raw_facing_direction, &tmp_facing_direction, sizeof(tmp_facing_direction));
        if (raw_facing_direction != 0)
        {
            _this->_internal_set_facing_direction(from._internal_facing_direction());
        }
        if (from._internal_mapping_id() != 0)
        {
            _this->_internal_set_mapping_id(from._internal_mapping_id());
        }
        if (from._internal_y() != 0)
        {
            _this->_internal_set_y(from._internal_y());
        }
        _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
    }

    void MessageOfPickedProp::CopyFrom(const MessageOfPickedProp& from)
    {
        // @@protoc_insertion_point(class_specific_copy_from_start:protobuf.MessageOfPickedProp)
        if (&from == this)
            return;
        Clear();
        MergeFrom(from);
    }

    bool MessageOfPickedProp::IsInitialized() const
    {
        return true;
    }

    void MessageOfPickedProp::InternalSwap(MessageOfPickedProp* other)
    {
        using std::swap;
        _internal_metadata_.InternalSwap(&other->_internal_metadata_);
        ::PROTOBUF_NAMESPACE_ID::internal::memswap<
            PROTOBUF_FIELD_OFFSET(MessageOfPickedProp, _impl_.y_) + sizeof(MessageOfPickedProp::_impl_.y_) - PROTOBUF_FIELD_OFFSET(MessageOfPickedProp, _impl_.type_)>(
            reinterpret_cast<char*>(&_impl_.type_),
            reinterpret_cast<char*>(&other->_impl_.type_)
        );
    }

    ::PROTOBUF_NAMESPACE_ID::Metadata MessageOfPickedProp::GetMetadata() const
    {
        return ::_pbi::AssignDescriptors(
            &descriptor_table_Message2Clients_2eproto_getter, &descriptor_table_Message2Clients_2eproto_once, file_level_metadata_Message2Clients_2eproto[5]
        );
    }

    // ===================================================================

    class MessageOfClassroom::_Internal
    {
    public:
    };

    MessageOfClassroom::MessageOfClassroom(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned) :
        ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned)
    {
        SharedCtor(arena, is_message_owned);
        // @@protoc_insertion_point(arena_constructor:protobuf.MessageOfClassroom)
    }
    MessageOfClassroom::MessageOfClassroom(const MessageOfClassroom& from) :
        ::PROTOBUF_NAMESPACE_ID::Message()
    {
        MessageOfClassroom* const _this = this;
        (void)_this;
        new (&_impl_) Impl_{
            decltype(_impl_.x_){}, decltype(_impl_.y_){}, decltype(_impl_.progress_){}, /*decltype(_impl_._cached_size_)*/ {}};

        _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
        ::memcpy(&_impl_.x_, &from._impl_.x_, static_cast<size_t>(reinterpret_cast<char*>(&_impl_.progress_) - reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.progress_));
        // @@protoc_insertion_point(copy_constructor:protobuf.MessageOfClassroom)
    }

    inline void MessageOfClassroom::SharedCtor(
        ::_pb::Arena* arena, bool is_message_owned
    )
    {
        (void)arena;
        (void)is_message_owned;
        new (&_impl_) Impl_{
            decltype(_impl_.x_){0}, decltype(_impl_.y_){0}, decltype(_impl_.progress_){0}, /*decltype(_impl_._cached_size_)*/ {}};
    }

    MessageOfClassroom::~MessageOfClassroom()
    {
        // @@protoc_insertion_point(destructor:protobuf.MessageOfClassroom)
        if (auto* arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>())
        {
            (void)arena;
            return;
        }
        SharedDtor();
    }

    inline void MessageOfClassroom::SharedDtor()
    {
        GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
    }

    void MessageOfClassroom::SetCachedSize(int size) const
    {
        _impl_._cached_size_.Set(size);
    }

    void MessageOfClassroom::Clear()
    {
        // @@protoc_insertion_point(message_clear_start:protobuf.MessageOfClassroom)
        uint32_t cached_has_bits = 0;
        // Prevent compiler warnings about cached_has_bits being unused
        (void)cached_has_bits;

        ::memset(&_impl_.x_, 0, static_cast<size_t>(reinterpret_cast<char*>(&_impl_.progress_) - reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.progress_));
        _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
    }

    const char* MessageOfClassroom::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx)
    {
#define CHK_(x)                       \
    if (PROTOBUF_PREDICT_FALSE(!(x))) \
    goto failure
        while (!ctx->Done(&ptr))
        {
            uint32_t tag;
            ptr = ::_pbi::ReadTag(ptr, &tag);
            switch (tag >> 3)
            {
                // int32 x = 1;
                case 1:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8))
                    {
                        _impl_.x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
                        CHK_(ptr);
                    }
                    else
                        goto handle_unusual;
                    continue;
                // int32 y = 2;
                case 2:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16))
                    {
                        _impl_.y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
                        CHK_(ptr);
                    }
                    else
                        goto handle_unusual;
                    continue;
                // int32 progress = 3;
                case 3:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24))
                    {
                        _impl_.progress_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
                        CHK_(ptr);
                    }
                    else
                        goto handle_unusual;
                    continue;
                default:
                    goto handle_unusual;
            }  // switch
        handle_unusual:
            if ((tag == 0) || ((tag & 7) == 4))
            {
                CHK_(ptr);
                ctx->SetLastTag(tag);
                goto message_done;
            }
            ptr = UnknownFieldParse(
                tag,
                _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
                ptr,
                ctx
            );
            CHK_(ptr != nullptr);
        }  // while
    message_done:
        return ptr;
    failure:
        ptr = nullptr;
        goto message_done;
#undef CHK_
    }

    uint8_t* MessageOfClassroom::_InternalSerialize(
        uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream
    ) const
    {
        // @@protoc_insertion_point(serialize_to_array_start:protobuf.MessageOfClassroom)
        uint32_t cached_has_bits = 0;
        (void)cached_has_bits;

        // int32 x = 1;
        if (this->_internal_x() != 0)
        {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_x(), target);
        }

        // int32 y = 2;
        if (this->_internal_y() != 0)
        {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_y(), target);
        }

        // int32 progress = 3;
        if (this->_internal_progress() != 0)
        {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_progress(), target);
        }

        if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields()))
        {
            target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream
            );
        }
        // @@protoc_insertion_point(serialize_to_array_end:protobuf.MessageOfClassroom)
        return target;
    }

    size_t MessageOfClassroom::ByteSizeLong() const
    {
        // @@protoc_insertion_point(message_byte_size_start:protobuf.MessageOfClassroom)
        size_t total_size = 0;

        uint32_t cached_has_bits = 0;
        // Prevent compiler warnings about cached_has_bits being unused
        (void)cached_has_bits;

        // int32 x = 1;
        if (this->_internal_x() != 0)
        {
            total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_x());
        }

        // int32 y = 2;
        if (this->_internal_y() != 0)
        {
            total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_y());
        }

        // int32 progress = 3;
        if (this->_internal_progress() != 0)
        {
            total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_progress());
        }

        return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
    }

    const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MessageOfClassroom::_class_data_ = {
        ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
        MessageOfClassroom::MergeImpl};
    const ::PROTOBUF_NAMESPACE_ID::Message::ClassData* MessageOfClassroom::GetClassData() const
    {
        return &_class_data_;
    }

    void MessageOfClassroom::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg)
    {
        auto* const _this = static_cast<MessageOfClassroom*>(&to_msg);
        auto& from = static_cast<const MessageOfClassroom&>(from_msg);
        // @@protoc_insertion_point(class_specific_merge_from_start:protobuf.MessageOfClassroom)
        GOOGLE_DCHECK_NE(&from, _this);
        uint32_t cached_has_bits = 0;
        (void)cached_has_bits;

        if (from._internal_x() != 0)
        {
            _this->_internal_set_x(from._internal_x());
        }
        if (from._internal_y() != 0)
        {
            _this->_internal_set_y(from._internal_y());
        }
        if (from._internal_progress() != 0)
        {
            _this->_internal_set_progress(from._internal_progress());
        }
        _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
    }

    void MessageOfClassroom::CopyFrom(const MessageOfClassroom& from)
    {
        // @@protoc_insertion_point(class_specific_copy_from_start:protobuf.MessageOfClassroom)
        if (&from == this)
            return;
        Clear();
        MergeFrom(from);
    }

    bool MessageOfClassroom::IsInitialized() const
    {
        return true;
    }

    void MessageOfClassroom::InternalSwap(MessageOfClassroom* other)
    {
        using std::swap;
        _internal_metadata_.InternalSwap(&other->_internal_metadata_);
        ::PROTOBUF_NAMESPACE_ID::internal::memswap<
            PROTOBUF_FIELD_OFFSET(MessageOfClassroom, _impl_.progress_) + sizeof(MessageOfClassroom::_impl_.progress_) - PROTOBUF_FIELD_OFFSET(MessageOfClassroom, _impl_.x_)>(
            reinterpret_cast<char*>(&_impl_.x_),
            reinterpret_cast<char*>(&other->_impl_.x_)
        );
    }

    ::PROTOBUF_NAMESPACE_ID::Metadata MessageOfClassroom::GetMetadata() const
    {
        return ::_pbi::AssignDescriptors(
            &descriptor_table_Message2Clients_2eproto_getter, &descriptor_table_Message2Clients_2eproto_once, file_level_metadata_Message2Clients_2eproto[6]
        );
    }

    // ===================================================================

    class MessageOfGate::_Internal
    {
    public:
    };

    MessageOfGate::MessageOfGate(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned) :
        ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned)
    {
        SharedCtor(arena, is_message_owned);
        // @@protoc_insertion_point(arena_constructor:protobuf.MessageOfGate)
    }
    MessageOfGate::MessageOfGate(const MessageOfGate& from) :
        ::PROTOBUF_NAMESPACE_ID::Message()
    {
        MessageOfGate* const _this = this;
        (void)_this;
        new (&_impl_) Impl_{
            decltype(_impl_.x_){}, decltype(_impl_.y_){}, decltype(_impl_.progress_){}, /*decltype(_impl_._cached_size_)*/ {}};

        _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
        ::memcpy(&_impl_.x_, &from._impl_.x_, static_cast<size_t>(reinterpret_cast<char*>(&_impl_.progress_) - reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.progress_));
        // @@protoc_insertion_point(copy_constructor:protobuf.MessageOfGate)
    }

    inline void MessageOfGate::SharedCtor(
        ::_pb::Arena* arena, bool is_message_owned
    )
    {
        (void)arena;
        (void)is_message_owned;
        new (&_impl_) Impl_{
            decltype(_impl_.x_){0}, decltype(_impl_.y_){0}, decltype(_impl_.progress_){0}, /*decltype(_impl_._cached_size_)*/ {}};
    }

    MessageOfGate::~MessageOfGate()
    {
        // @@protoc_insertion_point(destructor:protobuf.MessageOfGate)
        if (auto* arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>())
        {
            (void)arena;
            return;
        }
        SharedDtor();
    }

    inline void MessageOfGate::SharedDtor()
    {
        GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
    }

    void MessageOfGate::SetCachedSize(int size) const
    {
        _impl_._cached_size_.Set(size);
    }

    void MessageOfGate::Clear()
    {
        // @@protoc_insertion_point(message_clear_start:protobuf.MessageOfGate)
        uint32_t cached_has_bits = 0;
        // Prevent compiler warnings about cached_has_bits being unused
        (void)cached_has_bits;

        ::memset(&_impl_.x_, 0, static_cast<size_t>(reinterpret_cast<char*>(&_impl_.progress_) - reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.progress_));
        _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
    }

    const char* MessageOfGate::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx)
    {
#define CHK_(x)                       \
    if (PROTOBUF_PREDICT_FALSE(!(x))) \
    goto failure
        while (!ctx->Done(&ptr))
        {
            uint32_t tag;
            ptr = ::_pbi::ReadTag(ptr, &tag);
            switch (tag >> 3)
            {
                // int32 x = 1;
                case 1:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8))
                    {
                        _impl_.x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
                        CHK_(ptr);
                    }
                    else
                        goto handle_unusual;
                    continue;
                // int32 y = 2;
                case 2:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16))
                    {
                        _impl_.y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
                        CHK_(ptr);
                    }
                    else
                        goto handle_unusual;
                    continue;
                // int32 progress = 3;
                case 3:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24))
                    {
                        _impl_.progress_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
                        CHK_(ptr);
                    }
                    else
                        goto handle_unusual;
                    continue;
                default:
                    goto handle_unusual;
            }  // switch
        handle_unusual:
            if ((tag == 0) || ((tag & 7) == 4))
            {
                CHK_(ptr);
                ctx->SetLastTag(tag);
                goto message_done;
            }
            ptr = UnknownFieldParse(
                tag,
                _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
                ptr,
                ctx
            );
            CHK_(ptr != nullptr);
        }  // while
    message_done:
        return ptr;
    failure:
        ptr = nullptr;
        goto message_done;
#undef CHK_
    }

    uint8_t* MessageOfGate::_InternalSerialize(
        uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream
    ) const
    {
        // @@protoc_insertion_point(serialize_to_array_start:protobuf.MessageOfGate)
        uint32_t cached_has_bits = 0;
        (void)cached_has_bits;

        // int32 x = 1;
        if (this->_internal_x() != 0)
        {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_x(), target);
        }

        // int32 y = 2;
        if (this->_internal_y() != 0)
        {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_y(), target);
        }

        // int32 progress = 3;
        if (this->_internal_progress() != 0)
        {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_progress(), target);
        }

        if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields()))
        {
            target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream
            );
        }
        // @@protoc_insertion_point(serialize_to_array_end:protobuf.MessageOfGate)
        return target;
    }

    size_t MessageOfGate::ByteSizeLong() const
    {
        // @@protoc_insertion_point(message_byte_size_start:protobuf.MessageOfGate)
        size_t total_size = 0;

        uint32_t cached_has_bits = 0;
        // Prevent compiler warnings about cached_has_bits being unused
        (void)cached_has_bits;

        // int32 x = 1;
        if (this->_internal_x() != 0)
        {
            total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_x());
        }

        // int32 y = 2;
        if (this->_internal_y() != 0)
        {
            total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_y());
        }

        // int32 progress = 3;
        if (this->_internal_progress() != 0)
        {
            total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_progress());
        }

        return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
    }

    const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MessageOfGate::_class_data_ = {
        ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
        MessageOfGate::MergeImpl};
    const ::PROTOBUF_NAMESPACE_ID::Message::ClassData* MessageOfGate::GetClassData() const
    {
        return &_class_data_;
    }

    void MessageOfGate::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg)
    {
        auto* const _this = static_cast<MessageOfGate*>(&to_msg);
        auto& from = static_cast<const MessageOfGate&>(from_msg);
        // @@protoc_insertion_point(class_specific_merge_from_start:protobuf.MessageOfGate)
        GOOGLE_DCHECK_NE(&from, _this);
        uint32_t cached_has_bits = 0;
        (void)cached_has_bits;

        if (from._internal_x() != 0)
        {
            _this->_internal_set_x(from._internal_x());
        }
        if (from._internal_y() != 0)
        {
            _this->_internal_set_y(from._internal_y());
        }
        if (from._internal_progress() != 0)
        {
            _this->_internal_set_progress(from._internal_progress());
        }
        _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
    }

    void MessageOfGate::CopyFrom(const MessageOfGate& from)
    {
        // @@protoc_insertion_point(class_specific_copy_from_start:protobuf.MessageOfGate)
        if (&from == this)
            return;
        Clear();
        MergeFrom(from);
    }

    bool MessageOfGate::IsInitialized() const
    {
        return true;
    }

    void MessageOfGate::InternalSwap(MessageOfGate* other)
    {
        using std::swap;
        _internal_metadata_.InternalSwap(&other->_internal_metadata_);
        ::PROTOBUF_NAMESPACE_ID::internal::memswap<
            PROTOBUF_FIELD_OFFSET(MessageOfGate, _impl_.progress_) + sizeof(MessageOfGate::_impl_.progress_) - PROTOBUF_FIELD_OFFSET(MessageOfGate, _impl_.x_)>(
            reinterpret_cast<char*>(&_impl_.x_),
            reinterpret_cast<char*>(&other->_impl_.x_)
        );
    }

    ::PROTOBUF_NAMESPACE_ID::Metadata MessageOfGate::GetMetadata() const
    {
        return ::_pbi::AssignDescriptors(
            &descriptor_table_Message2Clients_2eproto_getter, &descriptor_table_Message2Clients_2eproto_once, file_level_metadata_Message2Clients_2eproto[7]
        );
    }

    // ===================================================================

    class MessageOfHiddenGate::_Internal
    {
    public:
    };

    MessageOfHiddenGate::MessageOfHiddenGate(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned) :
        ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned)
    {
        SharedCtor(arena, is_message_owned);
        // @@protoc_insertion_point(arena_constructor:protobuf.MessageOfHiddenGate)
    }
    MessageOfHiddenGate::MessageOfHiddenGate(const MessageOfHiddenGate& from) :
        ::PROTOBUF_NAMESPACE_ID::Message()
    {
        MessageOfHiddenGate* const _this = this;
        (void)_this;
        new (&_impl_) Impl_{
            decltype(_impl_.x_){}, decltype(_impl_.y_){}, decltype(_impl_.opened_){}, /*decltype(_impl_._cached_size_)*/ {}};

        _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
        ::memcpy(&_impl_.x_, &from._impl_.x_, static_cast<size_t>(reinterpret_cast<char*>(&_impl_.opened_) - reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.opened_));
        // @@protoc_insertion_point(copy_constructor:protobuf.MessageOfHiddenGate)
    }

    inline void MessageOfHiddenGate::SharedCtor(
        ::_pb::Arena* arena, bool is_message_owned
    )
    {
        (void)arena;
        (void)is_message_owned;
        new (&_impl_) Impl_{
            decltype(_impl_.x_){0}, decltype(_impl_.y_){0}, decltype(_impl_.opened_){false}, /*decltype(_impl_._cached_size_)*/ {}};
    }

    MessageOfHiddenGate::~MessageOfHiddenGate()
    {
        // @@protoc_insertion_point(destructor:protobuf.MessageOfHiddenGate)
        if (auto* arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>())
        {
            (void)arena;
            return;
        }
        SharedDtor();
    }

    inline void MessageOfHiddenGate::SharedDtor()
    {
        GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
    }

    void MessageOfHiddenGate::SetCachedSize(int size) const
    {
        _impl_._cached_size_.Set(size);
    }

    void MessageOfHiddenGate::Clear()
    {
        // @@protoc_insertion_point(message_clear_start:protobuf.MessageOfHiddenGate)
        uint32_t cached_has_bits = 0;
        // Prevent compiler warnings about cached_has_bits being unused
        (void)cached_has_bits;

        ::memset(&_impl_.x_, 0, static_cast<size_t>(reinterpret_cast<char*>(&_impl_.opened_) - reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.opened_));
        _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
    }

    const char* MessageOfHiddenGate::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx)
    {
#define CHK_(x)                       \
    if (PROTOBUF_PREDICT_FALSE(!(x))) \
    goto failure
        while (!ctx->Done(&ptr))
        {
            uint32_t tag;
            ptr = ::_pbi::ReadTag(ptr, &tag);
            switch (tag >> 3)
            {
                // int32 x = 1;
                case 1:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8))
                    {
                        _impl_.x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
                        CHK_(ptr);
                    }
                    else
                        goto handle_unusual;
                    continue;
                // int32 y = 2;
                case 2:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16))
                    {
                        _impl_.y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
                        CHK_(ptr);
                    }
                    else
                        goto handle_unusual;
                    continue;
                // bool opened = 3;
                case 3:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24))
                    {
                        _impl_.opened_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
                        CHK_(ptr);
                    }
                    else
                        goto handle_unusual;
                    continue;
                default:
                    goto handle_unusual;
            }  // switch
        handle_unusual:
            if ((tag == 0) || ((tag & 7) == 4))
            {
                CHK_(ptr);
                ctx->SetLastTag(tag);
                goto message_done;
            }
            ptr = UnknownFieldParse(
                tag,
                _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
                ptr,
                ctx
            );
            CHK_(ptr != nullptr);
        }  // while
    message_done:
        return ptr;
    failure:
        ptr = nullptr;
        goto message_done;
#undef CHK_
    }

    uint8_t* MessageOfHiddenGate::_InternalSerialize(
        uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream
    ) const
    {
        // @@protoc_insertion_point(serialize_to_array_start:protobuf.MessageOfHiddenGate)
        uint32_t cached_has_bits = 0;
        (void)cached_has_bits;

        // int32 x = 1;
        if (this->_internal_x() != 0)
        {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_x(), target);
        }

        // int32 y = 2;
        if (this->_internal_y() != 0)
        {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_y(), target);
        }

        // bool opened = 3;
        if (this->_internal_opened() != 0)
        {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_opened(), target);
        }

        if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields()))
        {
            target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream
            );
        }
        // @@protoc_insertion_point(serialize_to_array_end:protobuf.MessageOfHiddenGate)
        return target;
    }

    size_t MessageOfHiddenGate::ByteSizeLong() const
    {
        // @@protoc_insertion_point(message_byte_size_start:protobuf.MessageOfHiddenGate)
        size_t total_size = 0;

        uint32_t cached_has_bits = 0;
        // Prevent compiler warnings about cached_has_bits being unused
        (void)cached_has_bits;

        // int32 x = 1;
        if (this->_internal_x() != 0)
        {
            total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_x());
        }

        // int32 y = 2;
        if (this->_internal_y() != 0)
        {
            total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_y());
        }

        // bool opened = 3;
        if (this->_internal_opened() != 0)
        {
            total_size += 1 + 1;
        }

        return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
    }

    const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MessageOfHiddenGate::_class_data_ = {
        ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
        MessageOfHiddenGate::MergeImpl};
    const ::PROTOBUF_NAMESPACE_ID::Message::ClassData* MessageOfHiddenGate::GetClassData() const
    {
        return &_class_data_;
    }

    void MessageOfHiddenGate::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg)
    {
        auto* const _this = static_cast<MessageOfHiddenGate*>(&to_msg);
        auto& from = static_cast<const MessageOfHiddenGate&>(from_msg);
        // @@protoc_insertion_point(class_specific_merge_from_start:protobuf.MessageOfHiddenGate)
        GOOGLE_DCHECK_NE(&from, _this);
        uint32_t cached_has_bits = 0;
        (void)cached_has_bits;

        if (from._internal_x() != 0)
        {
            _this->_internal_set_x(from._internal_x());
        }
        if (from._internal_y() != 0)
        {
            _this->_internal_set_y(from._internal_y());
        }
        if (from._internal_opened() != 0)
        {
            _this->_internal_set_opened(from._internal_opened());
        }
        _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
    }

    void MessageOfHiddenGate::CopyFrom(const MessageOfHiddenGate& from)
    {
        // @@protoc_insertion_point(class_specific_copy_from_start:protobuf.MessageOfHiddenGate)
        if (&from == this)
            return;
        Clear();
        MergeFrom(from);
    }

    bool MessageOfHiddenGate::IsInitialized() const
    {
        return true;
    }

    void MessageOfHiddenGate::InternalSwap(MessageOfHiddenGate* other)
    {
        using std::swap;
        _internal_metadata_.InternalSwap(&other->_internal_metadata_);
        ::PROTOBUF_NAMESPACE_ID::internal::memswap<
            PROTOBUF_FIELD_OFFSET(MessageOfHiddenGate, _impl_.opened_) + sizeof(MessageOfHiddenGate::_impl_.opened_) - PROTOBUF_FIELD_OFFSET(MessageOfHiddenGate, _impl_.x_)>(
            reinterpret_cast<char*>(&_impl_.x_),
            reinterpret_cast<char*>(&other->_impl_.x_)
        );
    }

    ::PROTOBUF_NAMESPACE_ID::Metadata MessageOfHiddenGate::GetMetadata() const
    {
        return ::_pbi::AssignDescriptors(
            &descriptor_table_Message2Clients_2eproto_getter, &descriptor_table_Message2Clients_2eproto_once, file_level_metadata_Message2Clients_2eproto[8]
        );
    }

    // ===================================================================

    class MessageOfDoor::_Internal
    {
    public:
    };

    MessageOfDoor::MessageOfDoor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned) :
        ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned)
    {
        SharedCtor(arena, is_message_owned);
        // @@protoc_insertion_point(arena_constructor:protobuf.MessageOfDoor)
    }
    MessageOfDoor::MessageOfDoor(const MessageOfDoor& from) :
        ::PROTOBUF_NAMESPACE_ID::Message()
    {
        MessageOfDoor* const _this = this;
        (void)_this;
        new (&_impl_) Impl_{
            decltype(_impl_.x_){}, decltype(_impl_.y_){}, decltype(_impl_.is_open_){}, decltype(_impl_.progress_){}, /*decltype(_impl_._cached_size_)*/ {}};

        _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
        ::memcpy(&_impl_.x_, &from._impl_.x_, static_cast<size_t>(reinterpret_cast<char*>(&_impl_.progress_) - reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.progress_));
        // @@protoc_insertion_point(copy_constructor:protobuf.MessageOfDoor)
    }

    inline void MessageOfDoor::SharedCtor(
        ::_pb::Arena* arena, bool is_message_owned
    )
    {
        (void)arena;
        (void)is_message_owned;
        new (&_impl_) Impl_{
            decltype(_impl_.x_){0}, decltype(_impl_.y_){0}, decltype(_impl_.is_open_){false}, decltype(_impl_.progress_){0}, /*decltype(_impl_._cached_size_)*/ {}};
    }

    MessageOfDoor::~MessageOfDoor()
    {
        // @@protoc_insertion_point(destructor:protobuf.MessageOfDoor)
        if (auto* arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>())
        {
            (void)arena;
            return;
        }
        SharedDtor();
    }

    inline void MessageOfDoor::SharedDtor()
    {
        GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
    }

    void MessageOfDoor::SetCachedSize(int size) const
    {
        _impl_._cached_size_.Set(size);
    }

    void MessageOfDoor::Clear()
    {
        // @@protoc_insertion_point(message_clear_start:protobuf.MessageOfDoor)
        uint32_t cached_has_bits = 0;
        // Prevent compiler warnings about cached_has_bits being unused
        (void)cached_has_bits;

        ::memset(&_impl_.x_, 0, static_cast<size_t>(reinterpret_cast<char*>(&_impl_.progress_) - reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.progress_));
        _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
    }

    const char* MessageOfDoor::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx)
    {
#define CHK_(x)                       \
    if (PROTOBUF_PREDICT_FALSE(!(x))) \
    goto failure
        while (!ctx->Done(&ptr))
        {
            uint32_t tag;
            ptr = ::_pbi::ReadTag(ptr, &tag);
            switch (tag >> 3)
            {
                // int32 x = 1;
                case 1:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8))
                    {
                        _impl_.x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
                        CHK_(ptr);
                    }
                    else
                        goto handle_unusual;
                    continue;
                // int32 y = 2;
                case 2:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16))
                    {
                        _impl_.y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
                        CHK_(ptr);
                    }
                    else
                        goto handle_unusual;
                    continue;
                // bool is_open = 3;
                case 3:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24))
                    {
                        _impl_.is_open_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
                        CHK_(ptr);
                    }
                    else
                        goto handle_unusual;
                    continue;
                // int32 progress = 4;
                case 4:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32))
                    {
                        _impl_.progress_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
                        CHK_(ptr);
                    }
                    else
                        goto handle_unusual;
                    continue;
                default:
                    goto handle_unusual;
            }  // switch
        handle_unusual:
            if ((tag == 0) || ((tag & 7) == 4))
            {
                CHK_(ptr);
                ctx->SetLastTag(tag);
                goto message_done;
            }
            ptr = UnknownFieldParse(
                tag,
                _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
                ptr,
                ctx
            );
            CHK_(ptr != nullptr);
        }  // while
    message_done:
        return ptr;
    failure:
        ptr = nullptr;
        goto message_done;
#undef CHK_
    }

    uint8_t* MessageOfDoor::_InternalSerialize(
        uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream
    ) const
    {
        // @@protoc_insertion_point(serialize_to_array_start:protobuf.MessageOfDoor)
        uint32_t cached_has_bits = 0;
        (void)cached_has_bits;

        // int32 x = 1;
        if (this->_internal_x() != 0)
        {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_x(), target);
        }

        // int32 y = 2;
        if (this->_internal_y() != 0)
        {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_y(), target);
        }

        // bool is_open = 3;
        if (this->_internal_is_open() != 0)
        {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_is_open(), target);
        }

        // int32 progress = 4;
        if (this->_internal_progress() != 0)
        {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_progress(), target);
        }

        if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields()))
        {
            target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream
            );
        }
        // @@protoc_insertion_point(serialize_to_array_end:protobuf.MessageOfDoor)
        return target;
    }

    size_t MessageOfDoor::ByteSizeLong() const
    {
        // @@protoc_insertion_point(message_byte_size_start:protobuf.MessageOfDoor)
        size_t total_size = 0;

        uint32_t cached_has_bits = 0;
        // Prevent compiler warnings about cached_has_bits being unused
        (void)cached_has_bits;

        // int32 x = 1;
        if (this->_internal_x() != 0)
        {
            total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_x());
        }

        // int32 y = 2;
        if (this->_internal_y() != 0)
        {
            total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_y());
        }

        // bool is_open = 3;
        if (this->_internal_is_open() != 0)
        {
            total_size += 1 + 1;
        }

        // int32 progress = 4;
        if (this->_internal_progress() != 0)
        {
            total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_progress());
        }

        return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
    }

    const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MessageOfDoor::_class_data_ = {
        ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
        MessageOfDoor::MergeImpl};
    const ::PROTOBUF_NAMESPACE_ID::Message::ClassData* MessageOfDoor::GetClassData() const
    {
        return &_class_data_;
    }

    void MessageOfDoor::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg)
    {
        auto* const _this = static_cast<MessageOfDoor*>(&to_msg);
        auto& from = static_cast<const MessageOfDoor&>(from_msg);
        // @@protoc_insertion_point(class_specific_merge_from_start:protobuf.MessageOfDoor)
        GOOGLE_DCHECK_NE(&from, _this);
        uint32_t cached_has_bits = 0;
        (void)cached_has_bits;

        if (from._internal_x() != 0)
        {
            _this->_internal_set_x(from._internal_x());
        }
        if (from._internal_y() != 0)
        {
            _this->_internal_set_y(from._internal_y());
        }
        if (from._internal_is_open() != 0)
        {
            _this->_internal_set_is_open(from._internal_is_open());
        }
        if (from._internal_progress() != 0)
        {
            _this->_internal_set_progress(from._internal_progress());
        }
        _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
    }

    void MessageOfDoor::CopyFrom(const MessageOfDoor& from)
    {
        // @@protoc_insertion_point(class_specific_copy_from_start:protobuf.MessageOfDoor)
        if (&from == this)
            return;
        Clear();
        MergeFrom(from);
    }

    bool MessageOfDoor::IsInitialized() const
    {
        return true;
    }

    void MessageOfDoor::InternalSwap(MessageOfDoor* other)
    {
        using std::swap;
        _internal_metadata_.InternalSwap(&other->_internal_metadata_);
        ::PROTOBUF_NAMESPACE_ID::internal::memswap<
            PROTOBUF_FIELD_OFFSET(MessageOfDoor, _impl_.progress_) + sizeof(MessageOfDoor::_impl_.progress_) - PROTOBUF_FIELD_OFFSET(MessageOfDoor, _impl_.x_)>(
            reinterpret_cast<char*>(&_impl_.x_),
            reinterpret_cast<char*>(&other->_impl_.x_)
        );
    }

    ::PROTOBUF_NAMESPACE_ID::Metadata MessageOfDoor::GetMetadata() const
    {
        return ::_pbi::AssignDescriptors(
            &descriptor_table_Message2Clients_2eproto_getter, &descriptor_table_Message2Clients_2eproto_once, file_level_metadata_Message2Clients_2eproto[9]
        );
    }

    // ===================================================================

    class MessageOfChest::_Internal
    {
    public:
    };

    MessageOfChest::MessageOfChest(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned) :
        ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned)
    {
        SharedCtor(arena, is_message_owned);
        // @@protoc_insertion_point(arena_constructor:protobuf.MessageOfChest)
    }
    MessageOfChest::MessageOfChest(const MessageOfChest& from) :
        ::PROTOBUF_NAMESPACE_ID::Message()
    {
        MessageOfChest* const _this = this;
        (void)_this;
        new (&_impl_) Impl_{
            decltype(_impl_.x_){}, decltype(_impl_.y_){}, decltype(_impl_.progress_){}, /*decltype(_impl_._cached_size_)*/ {}};

        _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
        ::memcpy(&_impl_.x_, &from._impl_.x_, static_cast<size_t>(reinterpret_cast<char*>(&_impl_.progress_) - reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.progress_));
        // @@protoc_insertion_point(copy_constructor:protobuf.MessageOfChest)
    }

    inline void MessageOfChest::SharedCtor(
        ::_pb::Arena* arena, bool is_message_owned
    )
    {
        (void)arena;
        (void)is_message_owned;
        new (&_impl_) Impl_{
            decltype(_impl_.x_){0}, decltype(_impl_.y_){0}, decltype(_impl_.progress_){0}, /*decltype(_impl_._cached_size_)*/ {}};
    }

    MessageOfChest::~MessageOfChest()
    {
        // @@protoc_insertion_point(destructor:protobuf.MessageOfChest)
        if (auto* arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>())
        {
            (void)arena;
            return;
        }
        SharedDtor();
    }

    inline void MessageOfChest::SharedDtor()
    {
        GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
    }

    void MessageOfChest::SetCachedSize(int size) const
    {
        _impl_._cached_size_.Set(size);
    }

    void MessageOfChest::Clear()
    {
        // @@protoc_insertion_point(message_clear_start:protobuf.MessageOfChest)
        uint32_t cached_has_bits = 0;
        // Prevent compiler warnings about cached_has_bits being unused
        (void)cached_has_bits;

        ::memset(&_impl_.x_, 0, static_cast<size_t>(reinterpret_cast<char*>(&_impl_.progress_) - reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.progress_));
        _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
    }

    const char* MessageOfChest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx)
    {
#define CHK_(x)                       \
    if (PROTOBUF_PREDICT_FALSE(!(x))) \
    goto failure
        while (!ctx->Done(&ptr))
        {
            uint32_t tag;
            ptr = ::_pbi::ReadTag(ptr, &tag);
            switch (tag >> 3)
            {
                // int32 x = 1;
                case 1:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8))
                    {
                        _impl_.x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
                        CHK_(ptr);
                    }
                    else
                        goto handle_unusual;
                    continue;
                // int32 y = 2;
                case 2:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16))
                    {
                        _impl_.y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
                        CHK_(ptr);
                    }
                    else
                        goto handle_unusual;
                    continue;
                // int32 progress = 3;
                case 3:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24))
                    {
                        _impl_.progress_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
                        CHK_(ptr);
                    }
                    else
                        goto handle_unusual;
                    continue;
                default:
                    goto handle_unusual;
            }  // switch
        handle_unusual:
            if ((tag == 0) || ((tag & 7) == 4))
            {
                CHK_(ptr);
                ctx->SetLastTag(tag);
                goto message_done;
            }
            ptr = UnknownFieldParse(
                tag,
                _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
                ptr,
                ctx
            );
            CHK_(ptr != nullptr);
        }  // while
    message_done:
        return ptr;
    failure:
        ptr = nullptr;
        goto message_done;
#undef CHK_
    }

    uint8_t* MessageOfChest::_InternalSerialize(
        uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream
    ) const
    {
        // @@protoc_insertion_point(serialize_to_array_start:protobuf.MessageOfChest)
        uint32_t cached_has_bits = 0;
        (void)cached_has_bits;

        // int32 x = 1;
        if (this->_internal_x() != 0)
        {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_x(), target);
        }

        // int32 y = 2;
        if (this->_internal_y() != 0)
        {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_y(), target);
        }

        // int32 progress = 3;
        if (this->_internal_progress() != 0)
        {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_progress(), target);
        }

        if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields()))
        {
            target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream
            );
        }
        // @@protoc_insertion_point(serialize_to_array_end:protobuf.MessageOfChest)
        return target;
    }

    size_t MessageOfChest::ByteSizeLong() const
    {
        // @@protoc_insertion_point(message_byte_size_start:protobuf.MessageOfChest)
        size_t total_size = 0;

        uint32_t cached_has_bits = 0;
        // Prevent compiler warnings about cached_has_bits being unused
        (void)cached_has_bits;

        // int32 x = 1;
        if (this->_internal_x() != 0)
        {
            total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_x());
        }

        // int32 y = 2;
        if (this->_internal_y() != 0)
        {
            total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_y());
        }

        // int32 progress = 3;
        if (this->_internal_progress() != 0)
        {
            total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_progress());
        }

        return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
    }

    const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MessageOfChest::_class_data_ = {
        ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
        MessageOfChest::MergeImpl};
    const ::PROTOBUF_NAMESPACE_ID::Message::ClassData* MessageOfChest::GetClassData() const
    {
        return &_class_data_;
    }

    void MessageOfChest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg)
    {
        auto* const _this = static_cast<MessageOfChest*>(&to_msg);
        auto& from = static_cast<const MessageOfChest&>(from_msg);
        // @@protoc_insertion_point(class_specific_merge_from_start:protobuf.MessageOfChest)
        GOOGLE_DCHECK_NE(&from, _this);
        uint32_t cached_has_bits = 0;
        (void)cached_has_bits;

        if (from._internal_x() != 0)
        {
            _this->_internal_set_x(from._internal_x());
        }
        if (from._internal_y() != 0)
        {
            _this->_internal_set_y(from._internal_y());
        }
        if (from._internal_progress() != 0)
        {
            _this->_internal_set_progress(from._internal_progress());
        }
        _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
    }

    void MessageOfChest::CopyFrom(const MessageOfChest& from)
    {
        // @@protoc_insertion_point(class_specific_copy_from_start:protobuf.MessageOfChest)
        if (&from == this)
            return;
        Clear();
        MergeFrom(from);
    }

    bool MessageOfChest::IsInitialized() const
    {
        return true;
    }

    void MessageOfChest::InternalSwap(MessageOfChest* other)
    {
        using std::swap;
        _internal_metadata_.InternalSwap(&other->_internal_metadata_);
        ::PROTOBUF_NAMESPACE_ID::internal::memswap<
            PROTOBUF_FIELD_OFFSET(MessageOfChest, _impl_.progress_) + sizeof(MessageOfChest::_impl_.progress_) - PROTOBUF_FIELD_OFFSET(MessageOfChest, _impl_.x_)>(
            reinterpret_cast<char*>(&_impl_.x_),
            reinterpret_cast<char*>(&other->_impl_.x_)
        );
    }

    ::PROTOBUF_NAMESPACE_ID::Metadata MessageOfChest::GetMetadata() const
    {
        return ::_pbi::AssignDescriptors(
            &descriptor_table_Message2Clients_2eproto_getter, &descriptor_table_Message2Clients_2eproto_once, file_level_metadata_Message2Clients_2eproto[10]
        );
    }

    // ===================================================================

    class MessageOfMap_Row::_Internal
    {
    public:
    };

    MessageOfMap_Row::MessageOfMap_Row(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned) :
        ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned)
    {
        SharedCtor(arena, is_message_owned);
        // @@protoc_insertion_point(arena_constructor:protobuf.MessageOfMap.Row)
    }
    MessageOfMap_Row::MessageOfMap_Row(const MessageOfMap_Row& from) :
        ::PROTOBUF_NAMESPACE_ID::Message()
    {
        MessageOfMap_Row* const _this = this;
        (void)_this;
        new (&_impl_) Impl_{
            decltype(_impl_.col_){from._impl_.col_}, /*decltype(_impl_._col_cached_byte_size_)*/ {0}, /*decltype(_impl_._cached_size_)*/ {}};

        _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
        // @@protoc_insertion_point(copy_constructor:protobuf.MessageOfMap.Row)
    }

    inline void MessageOfMap_Row::SharedCtor(
        ::_pb::Arena* arena, bool is_message_owned
    )
    {
        (void)arena;
        (void)is_message_owned;
        new (&_impl_) Impl_{
            decltype(_impl_.col_){arena}, /*decltype(_impl_._col_cached_byte_size_)*/ {0}, /*decltype(_impl_._cached_size_)*/ {}};
    }

    MessageOfMap_Row::~MessageOfMap_Row()
    {
        // @@protoc_insertion_point(destructor:protobuf.MessageOfMap.Row)
        if (auto* arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>())
        {
            (void)arena;
            return;
        }
        SharedDtor();
    }

    inline void MessageOfMap_Row::SharedDtor()
    {
        GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
        _impl_.col_.~RepeatedField();
    }

    void MessageOfMap_Row::SetCachedSize(int size) const
    {
        _impl_._cached_size_.Set(size);
    }

    void MessageOfMap_Row::Clear()
    {
        // @@protoc_insertion_point(message_clear_start:protobuf.MessageOfMap.Row)
        uint32_t cached_has_bits = 0;
        // Prevent compiler warnings about cached_has_bits being unused
        (void)cached_has_bits;

        _impl_.col_.Clear();
        _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
    }

    const char* MessageOfMap_Row::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx)
    {
#define CHK_(x)                       \
    if (PROTOBUF_PREDICT_FALSE(!(x))) \
    goto failure
        while (!ctx->Done(&ptr))
        {
            uint32_t tag;
            ptr = ::_pbi::ReadTag(ptr, &tag);
            switch (tag >> 3)
            {
                // repeated .protobuf.PlaceType col = 1;
                case 1:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10))
                    {
                        ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser(_internal_mutable_col(), ptr, ctx);
                        CHK_(ptr);
                    }
                    else if (static_cast<uint8_t>(tag) == 8)
                    {
                        uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
                        CHK_(ptr);
                        _internal_add_col(static_cast<::protobuf::PlaceType>(val));
                    }
                    else
                        goto handle_unusual;
                    continue;
                default:
                    goto handle_unusual;
            }  // switch
        handle_unusual:
            if ((tag == 0) || ((tag & 7) == 4))
            {
                CHK_(ptr);
                ctx->SetLastTag(tag);
                goto message_done;
            }
            ptr = UnknownFieldParse(
                tag,
                _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
                ptr,
                ctx
            );
            CHK_(ptr != nullptr);
        }  // while
    message_done:
        return ptr;
    failure:
        ptr = nullptr;
        goto message_done;
#undef CHK_
    }

    uint8_t* MessageOfMap_Row::_InternalSerialize(
        uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream
    ) const
    {
        // @@protoc_insertion_point(serialize_to_array_start:protobuf.MessageOfMap.Row)
        uint32_t cached_has_bits = 0;
        (void)cached_has_bits;

        // repeated .protobuf.PlaceType col = 1;
        {
            int byte_size = _impl_._col_cached_byte_size_.load(std::memory_order_relaxed);
            if (byte_size > 0)
            {
                target = stream->WriteEnumPacked(
                    1, _impl_.col_, byte_size, target
                );
            }
        }

        if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields()))
        {
            target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream
            );
        }
        // @@protoc_insertion_point(serialize_to_array_end:protobuf.MessageOfMap.Row)
        return target;
    }

    size_t MessageOfMap_Row::ByteSizeLong() const
    {
        // @@protoc_insertion_point(message_byte_size_start:protobuf.MessageOfMap.Row)
        size_t total_size = 0;

        uint32_t cached_has_bits = 0;
        // Prevent compiler warnings about cached_has_bits being unused
        (void)cached_has_bits;

        // repeated .protobuf.PlaceType col = 1;
        {
            size_t data_size = 0;
            unsigned int count = static_cast<unsigned int>(this->_internal_col_size());
            for (unsigned int i = 0; i < count; i++)
            {
                data_size += ::_pbi::WireFormatLite::EnumSize(
                    this->_internal_col(static_cast<int>(i))
                );
            }
            if (data_size > 0)
            {
                total_size += 1 +
                              ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
            }
            int cached_size = ::_pbi::ToCachedSize(data_size);
            _impl_._col_cached_byte_size_.store(cached_size, std::memory_order_relaxed);
            total_size += data_size;
        }

        return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
    }

    const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MessageOfMap_Row::_class_data_ = {
        ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
        MessageOfMap_Row::MergeImpl};
    const ::PROTOBUF_NAMESPACE_ID::Message::ClassData* MessageOfMap_Row::GetClassData() const
    {
        return &_class_data_;
    }

    void MessageOfMap_Row::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg)
    {
        auto* const _this = static_cast<MessageOfMap_Row*>(&to_msg);
        auto& from = static_cast<const MessageOfMap_Row&>(from_msg);
        // @@protoc_insertion_point(class_specific_merge_from_start:protobuf.MessageOfMap.Row)
        GOOGLE_DCHECK_NE(&from, _this);
        uint32_t cached_has_bits = 0;
        (void)cached_has_bits;

        _this->_impl_.col_.MergeFrom(from._impl_.col_);
        _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
    }

    void MessageOfMap_Row::CopyFrom(const MessageOfMap_Row& from)
    {
        // @@protoc_insertion_point(class_specific_copy_from_start:protobuf.MessageOfMap.Row)
        if (&from == this)
            return;
        Clear();
        MergeFrom(from);
    }

    bool MessageOfMap_Row::IsInitialized() const
    {
        return true;
    }

    void MessageOfMap_Row::InternalSwap(MessageOfMap_Row* other)
    {
        using std::swap;
        _internal_metadata_.InternalSwap(&other->_internal_metadata_);
        _impl_.col_.InternalSwap(&other->_impl_.col_);
    }

    ::PROTOBUF_NAMESPACE_ID::Metadata MessageOfMap_Row::GetMetadata() const
    {
        return ::_pbi::AssignDescriptors(
            &descriptor_table_Message2Clients_2eproto_getter, &descriptor_table_Message2Clients_2eproto_once, file_level_metadata_Message2Clients_2eproto[11]
        );
    }

    // ===================================================================

    class MessageOfMap::_Internal
    {
    public:
    };

    MessageOfMap::MessageOfMap(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned) :
        ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned)
    {
        SharedCtor(arena, is_message_owned);
        // @@protoc_insertion_point(arena_constructor:protobuf.MessageOfMap)
    }
    MessageOfMap::MessageOfMap(const MessageOfMap& from) :
        ::PROTOBUF_NAMESPACE_ID::Message()
    {
        MessageOfMap* const _this = this;
        (void)_this;
        new (&_impl_) Impl_{
            decltype(_impl_.row_){from._impl_.row_}, /*decltype(_impl_._cached_size_)*/ {}};

        _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
        // @@protoc_insertion_point(copy_constructor:protobuf.MessageOfMap)
    }

    inline void MessageOfMap::SharedCtor(
        ::_pb::Arena* arena, bool is_message_owned
    )
    {
        (void)arena;
        (void)is_message_owned;
        new (&_impl_) Impl_{
            decltype(_impl_.row_){arena}, /*decltype(_impl_._cached_size_)*/ {}};
    }

    MessageOfMap::~MessageOfMap()
    {
        // @@protoc_insertion_point(destructor:protobuf.MessageOfMap)
        if (auto* arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>())
        {
            (void)arena;
            return;
        }
        SharedDtor();
    }

    inline void MessageOfMap::SharedDtor()
    {
        GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
        _impl_.row_.~RepeatedPtrField();
    }

    void MessageOfMap::SetCachedSize(int size) const
    {
        _impl_._cached_size_.Set(size);
    }

    void MessageOfMap::Clear()
    {
        // @@protoc_insertion_point(message_clear_start:protobuf.MessageOfMap)
        uint32_t cached_has_bits = 0;
        // Prevent compiler warnings about cached_has_bits being unused
        (void)cached_has_bits;

        _impl_.row_.Clear();
        _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
    }

    const char* MessageOfMap::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx)
    {
#define CHK_(x)                       \
    if (PROTOBUF_PREDICT_FALSE(!(x))) \
    goto failure
        while (!ctx->Done(&ptr))
        {
            uint32_t tag;
            ptr = ::_pbi::ReadTag(ptr, &tag);
            switch (tag >> 3)
            {
                // repeated .protobuf.MessageOfMap.Row row = 2;
                case 2:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18))
                    {
                        ptr -= 1;
                        do
                        {
                            ptr += 1;
                            ptr = ctx->ParseMessage(_internal_add_row(), ptr);
                            CHK_(ptr);
                            if (!ctx->DataAvailable(ptr))
                                break;
                        } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
                    }
                    else
                        goto handle_unusual;
                    continue;
                default:
                    goto handle_unusual;
            }  // switch
        handle_unusual:
            if ((tag == 0) || ((tag & 7) == 4))
            {
                CHK_(ptr);
                ctx->SetLastTag(tag);
                goto message_done;
            }
            ptr = UnknownFieldParse(
                tag,
                _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
                ptr,
                ctx
            );
            CHK_(ptr != nullptr);
        }  // while
    message_done:
        return ptr;
    failure:
        ptr = nullptr;
        goto message_done;
#undef CHK_
    }

    uint8_t* MessageOfMap::_InternalSerialize(
        uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream
    ) const
    {
        // @@protoc_insertion_point(serialize_to_array_start:protobuf.MessageOfMap)
        uint32_t cached_has_bits = 0;
        (void)cached_has_bits;

        // repeated .protobuf.MessageOfMap.Row row = 2;
        for (unsigned i = 0,
                      n = static_cast<unsigned>(this->_internal_row_size());
             i < n;
             i++)
        {
            const auto& repfield = this->_internal_row(i);
            target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
                InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
        }

        if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields()))
        {
            target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream
            );
        }
        // @@protoc_insertion_point(serialize_to_array_end:protobuf.MessageOfMap)
        return target;
    }

    size_t MessageOfMap::ByteSizeLong() const
    {
        // @@protoc_insertion_point(message_byte_size_start:protobuf.MessageOfMap)
        size_t total_size = 0;

        uint32_t cached_has_bits = 0;
        // Prevent compiler warnings about cached_has_bits being unused
        (void)cached_has_bits;

        // repeated .protobuf.MessageOfMap.Row row = 2;
        total_size += 1UL * this->_internal_row_size();
        for (const auto& msg : this->_impl_.row_)
        {
            total_size +=
                ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
        }

        return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
    }

    const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MessageOfMap::_class_data_ = {
        ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
        MessageOfMap::MergeImpl};
    const ::PROTOBUF_NAMESPACE_ID::Message::ClassData* MessageOfMap::GetClassData() const
    {
        return &_class_data_;
    }

    void MessageOfMap::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg)
    {
        auto* const _this = static_cast<MessageOfMap*>(&to_msg);
        auto& from = static_cast<const MessageOfMap&>(from_msg);
        // @@protoc_insertion_point(class_specific_merge_from_start:protobuf.MessageOfMap)
        GOOGLE_DCHECK_NE(&from, _this);
        uint32_t cached_has_bits = 0;
        (void)cached_has_bits;

        _this->_impl_.row_.MergeFrom(from._impl_.row_);
        _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
    }

    void MessageOfMap::CopyFrom(const MessageOfMap& from)
    {
        // @@protoc_insertion_point(class_specific_copy_from_start:protobuf.MessageOfMap)
        if (&from == this)
            return;
        Clear();
        MergeFrom(from);
    }

    bool MessageOfMap::IsInitialized() const
    {
        return true;
    }

    void MessageOfMap::InternalSwap(MessageOfMap* other)
    {
        using std::swap;
        _internal_metadata_.InternalSwap(&other->_internal_metadata_);
        _impl_.row_.InternalSwap(&other->_impl_.row_);
    }

    ::PROTOBUF_NAMESPACE_ID::Metadata MessageOfMap::GetMetadata() const
    {
        return ::_pbi::AssignDescriptors(
            &descriptor_table_Message2Clients_2eproto_getter, &descriptor_table_Message2Clients_2eproto_once, file_level_metadata_Message2Clients_2eproto[12]
        );
    }

    // ===================================================================

    class MessageOfNews::_Internal
    {
    public:
    };

    MessageOfNews::MessageOfNews(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned) :
        ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned)
    {
        SharedCtor(arena, is_message_owned);
        // @@protoc_insertion_point(arena_constructor:protobuf.MessageOfNews)
    }
    MessageOfNews::MessageOfNews(const MessageOfNews& from) :
        ::PROTOBUF_NAMESPACE_ID::Message()
    {
        MessageOfNews* const _this = this;
        (void)_this;
        new (&_impl_) Impl_{
            decltype(_impl_.news_){}, decltype(_impl_.from_id_){}, decltype(_impl_.to_id_){}, /*decltype(_impl_._cached_size_)*/ {}};

        _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
        _impl_.news_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.news_.Set("", GetArenaForAllocation());
#endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (!from._internal_news().empty())
        {
            _this->_impl_.news_.Set(from._internal_news(), _this->GetArenaForAllocation());
        }
        ::memcpy(&_impl_.from_id_, &from._impl_.from_id_, static_cast<size_t>(reinterpret_cast<char*>(&_impl_.to_id_) - reinterpret_cast<char*>(&_impl_.from_id_)) + sizeof(_impl_.to_id_));
        // @@protoc_insertion_point(copy_constructor:protobuf.MessageOfNews)
    }

    inline void MessageOfNews::SharedCtor(
        ::_pb::Arena* arena, bool is_message_owned
    )
    {
        (void)arena;
        (void)is_message_owned;
        new (&_impl_) Impl_{
            decltype(_impl_.news_){}, decltype(_impl_.from_id_){int64_t{0}}, decltype(_impl_.to_id_){int64_t{0}}, /*decltype(_impl_._cached_size_)*/ {}};
        _impl_.news_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.news_.Set("", GetArenaForAllocation());
#endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
    }

    MessageOfNews::~MessageOfNews()
    {
        // @@protoc_insertion_point(destructor:protobuf.MessageOfNews)
        if (auto* arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>())
        {
            (void)arena;
            return;
        }
        SharedDtor();
    }

    inline void MessageOfNews::SharedDtor()
    {
        GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
        _impl_.news_.Destroy();
    }

    void MessageOfNews::SetCachedSize(int size) const
    {
        _impl_._cached_size_.Set(size);
    }

    void MessageOfNews::Clear()
    {
        // @@protoc_insertion_point(message_clear_start:protobuf.MessageOfNews)
        uint32_t cached_has_bits = 0;
        // Prevent compiler warnings about cached_has_bits being unused
        (void)cached_has_bits;

        _impl_.news_.ClearToEmpty();
        ::memset(&_impl_.from_id_, 0, static_cast<size_t>(reinterpret_cast<char*>(&_impl_.to_id_) - reinterpret_cast<char*>(&_impl_.from_id_)) + sizeof(_impl_.to_id_));
        _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
    }

    const char* MessageOfNews::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx)
    {
#define CHK_(x)                       \
    if (PROTOBUF_PREDICT_FALSE(!(x))) \
    goto failure
        while (!ctx->Done(&ptr))
        {
            uint32_t tag;
            ptr = ::_pbi::ReadTag(ptr, &tag);
            switch (tag >> 3)
            {
                // string news = 1;
                case 1:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10))
                    {
                        auto str = _internal_mutable_news();
                        ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
                        CHK_(ptr);
                        CHK_(::_pbi::VerifyUTF8(str, "protobuf.MessageOfNews.news"));
                    }
                    else
                        goto handle_unusual;
                    continue;
                // int64 from_id = 2;
                case 2:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16))
                    {
                        _impl_.from_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
                        CHK_(ptr);
                    }
                    else
                        goto handle_unusual;
                    continue;
                // int64 to_id = 3;
                case 3:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24))
                    {
                        _impl_.to_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
                        CHK_(ptr);
                    }
                    else
                        goto handle_unusual;
                    continue;
                default:
                    goto handle_unusual;
            }  // switch
        handle_unusual:
            if ((tag == 0) || ((tag & 7) == 4))
            {
                CHK_(ptr);
                ctx->SetLastTag(tag);
                goto message_done;
            }
            ptr = UnknownFieldParse(
                tag,
                _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
                ptr,
                ctx
            );
            CHK_(ptr != nullptr);
        }  // while
    message_done:
        return ptr;
    failure:
        ptr = nullptr;
        goto message_done;
#undef CHK_
    }

    uint8_t* MessageOfNews::_InternalSerialize(
        uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream
    ) const
    {
        // @@protoc_insertion_point(serialize_to_array_start:protobuf.MessageOfNews)
        uint32_t cached_has_bits = 0;
        (void)cached_has_bits;

        // string news = 1;
        if (!this->_internal_news().empty())
        {
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
                this->_internal_news().data(), static_cast<int>(this->_internal_news().length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "protobuf.MessageOfNews.news"
            );
            target = stream->WriteStringMaybeAliased(
                1, this->_internal_news(), target
            );
        }

        // int64 from_id = 2;
        if (this->_internal_from_id() != 0)
        {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_from_id(), target);
        }

        // int64 to_id = 3;
        if (this->_internal_to_id() != 0)
        {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_to_id(), target);
        }

        if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields()))
        {
            target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream
            );
        }
        // @@protoc_insertion_point(serialize_to_array_end:protobuf.MessageOfNews)
        return target;
    }

    size_t MessageOfNews::ByteSizeLong() const
    {
        // @@protoc_insertion_point(message_byte_size_start:protobuf.MessageOfNews)
        size_t total_size = 0;

        uint32_t cached_has_bits = 0;
        // Prevent compiler warnings about cached_has_bits being unused
        (void)cached_has_bits;

        // string news = 1;
        if (!this->_internal_news().empty())
        {
            total_size += 1 +
                          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                              this->_internal_news()
                          );
        }

        // int64 from_id = 2;
        if (this->_internal_from_id() != 0)
        {
            total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_from_id());
        }

        // int64 to_id = 3;
        if (this->_internal_to_id() != 0)
        {
            total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_to_id());
        }

        return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
    }

    const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MessageOfNews::_class_data_ = {
        ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
        MessageOfNews::MergeImpl};
    const ::PROTOBUF_NAMESPACE_ID::Message::ClassData* MessageOfNews::GetClassData() const
    {
        return &_class_data_;
    }

    void MessageOfNews::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg)
    {
        auto* const _this = static_cast<MessageOfNews*>(&to_msg);
        auto& from = static_cast<const MessageOfNews&>(from_msg);
        // @@protoc_insertion_point(class_specific_merge_from_start:protobuf.MessageOfNews)
        GOOGLE_DCHECK_NE(&from, _this);
        uint32_t cached_has_bits = 0;
        (void)cached_has_bits;

        if (!from._internal_news().empty())
        {
            _this->_internal_set_news(from._internal_news());
        }
        if (from._internal_from_id() != 0)
        {
            _this->_internal_set_from_id(from._internal_from_id());
        }
        if (from._internal_to_id() != 0)
        {
            _this->_internal_set_to_id(from._internal_to_id());
        }
        _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
    }

    void MessageOfNews::CopyFrom(const MessageOfNews& from)
    {
        // @@protoc_insertion_point(class_specific_copy_from_start:protobuf.MessageOfNews)
        if (&from == this)
            return;
        Clear();
        MergeFrom(from);
    }

    bool MessageOfNews::IsInitialized() const
    {
        return true;
    }

    void MessageOfNews::InternalSwap(MessageOfNews* other)
    {
        using std::swap;
        auto* lhs_arena = GetArenaForAllocation();
        auto* rhs_arena = other->GetArenaForAllocation();
        _internal_metadata_.InternalSwap(&other->_internal_metadata_);
        ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
            &_impl_.news_, lhs_arena, &other->_impl_.news_, rhs_arena
        );
        ::PROTOBUF_NAMESPACE_ID::internal::memswap<
            PROTOBUF_FIELD_OFFSET(MessageOfNews, _impl_.to_id_) + sizeof(MessageOfNews::_impl_.to_id_) - PROTOBUF_FIELD_OFFSET(MessageOfNews, _impl_.from_id_)>(
            reinterpret_cast<char*>(&_impl_.from_id_),
            reinterpret_cast<char*>(&other->_impl_.from_id_)
        );
    }

    ::PROTOBUF_NAMESPACE_ID::Metadata MessageOfNews::GetMetadata() const
    {
        return ::_pbi::AssignDescriptors(
            &descriptor_table_Message2Clients_2eproto_getter, &descriptor_table_Message2Clients_2eproto_once, file_level_metadata_Message2Clients_2eproto[13]
        );
    }

    // ===================================================================

    class MessageOfObj::_Internal
    {
    public:
        static const ::protobuf::MessageOfStudent& student_message(const MessageOfObj* msg);
        static const ::protobuf::MessageOfTricker& tricker_message(const MessageOfObj* msg);
        static const ::protobuf::MessageOfProp& prop_message(const MessageOfObj* msg);
        static const ::protobuf::MessageOfBullet& bullet_message(const MessageOfObj* msg);
        static const ::protobuf::MessageOfBombedBullet& bombed_bullet_message(const MessageOfObj* msg);
        static const ::protobuf::MessageOfClassroom& classroom_message(const MessageOfObj* msg);
        static const ::protobuf::MessageOfDoor& door_message(const MessageOfObj* msg);
        static const ::protobuf::MessageOfGate& gate_message(const MessageOfObj* msg);
        static const ::protobuf::MessageOfChest& chest_message(const MessageOfObj* msg);
        static const ::protobuf::MessageOfHiddenGate& hidden_gate_message(const MessageOfObj* msg);
        static const ::protobuf::MessageOfNews& news_message(const MessageOfObj* msg);
        static const ::protobuf::MessageOfMap& map_message(const MessageOfObj* msg);
    };

    const ::protobuf::MessageOfStudent&
        MessageOfObj::_Internal::student_message(const MessageOfObj* msg)
    {
        return *msg->_impl_.message_of_obj_.student_message_;
    }
    const ::protobuf::MessageOfTricker&
        MessageOfObj::_Internal::tricker_message(const MessageOfObj* msg)
    {
        return *msg->_impl_.message_of_obj_.tricker_message_;
    }
    const ::protobuf::MessageOfProp&
        MessageOfObj::_Internal::prop_message(const MessageOfObj* msg)
    {
        return *msg->_impl_.message_of_obj_.prop_message_;
    }
    const ::protobuf::MessageOfBullet&
        MessageOfObj::_Internal::bullet_message(const MessageOfObj* msg)
    {
        return *msg->_impl_.message_of_obj_.bullet_message_;
    }
    const ::protobuf::MessageOfBombedBullet&
        MessageOfObj::_Internal::bombed_bullet_message(const MessageOfObj* msg)
    {
        return *msg->_impl_.message_of_obj_.bombed_bullet_message_;
    }
    const ::protobuf::MessageOfClassroom&
        MessageOfObj::_Internal::classroom_message(const MessageOfObj* msg)
    {
        return *msg->_impl_.message_of_obj_.classroom_message_;
    }
    const ::protobuf::MessageOfDoor&
        MessageOfObj::_Internal::door_message(const MessageOfObj* msg)
    {
        return *msg->_impl_.message_of_obj_.door_message_;
    }
    const ::protobuf::MessageOfGate&
        MessageOfObj::_Internal::gate_message(const MessageOfObj* msg)
    {
        return *msg->_impl_.message_of_obj_.gate_message_;
    }
    const ::protobuf::MessageOfChest&
        MessageOfObj::_Internal::chest_message(const MessageOfObj* msg)
    {
        return *msg->_impl_.message_of_obj_.chest_message_;
    }
    const ::protobuf::MessageOfHiddenGate&
        MessageOfObj::_Internal::hidden_gate_message(const MessageOfObj* msg)
    {
        return *msg->_impl_.message_of_obj_.hidden_gate_message_;
    }
    const ::protobuf::MessageOfNews&
        MessageOfObj::_Internal::news_message(const MessageOfObj* msg)
    {
        return *msg->_impl_.message_of_obj_.news_message_;
    }
    const ::protobuf::MessageOfMap&
        MessageOfObj::_Internal::map_message(const MessageOfObj* msg)
    {
        return *msg->_impl_.message_of_obj_.map_message_;
    }
    void MessageOfObj::set_allocated_student_message(::protobuf::MessageOfStudent* student_message)
    {
        ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
        clear_message_of_obj();
        if (student_message)
        {
            ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
                ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(student_message);
            if (message_arena != submessage_arena)
            {
                student_message = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
                    message_arena, student_message, submessage_arena
                );
            }
            set_has_student_message();
            _impl_.message_of_obj_.student_message_ = student_message;
        }
        // @@protoc_insertion_point(field_set_allocated:protobuf.MessageOfObj.student_message)
    }
    void MessageOfObj::set_allocated_tricker_message(::protobuf::MessageOfTricker* tricker_message)
    {
        ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
        clear_message_of_obj();
        if (tricker_message)
        {
            ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
                ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(tricker_message);
            if (message_arena != submessage_arena)
            {
                tricker_message = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
                    message_arena, tricker_message, submessage_arena
                );
            }
            set_has_tricker_message();
            _impl_.message_of_obj_.tricker_message_ = tricker_message;
        }
        // @@protoc_insertion_point(field_set_allocated:protobuf.MessageOfObj.tricker_message)
    }
    void MessageOfObj::set_allocated_prop_message(::protobuf::MessageOfProp* prop_message)
    {
        ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
        clear_message_of_obj();
        if (prop_message)
        {
            ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
                ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(prop_message);
            if (message_arena != submessage_arena)
            {
                prop_message = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
                    message_arena, prop_message, submessage_arena
                );
            }
            set_has_prop_message();
            _impl_.message_of_obj_.prop_message_ = prop_message;
        }
        // @@protoc_insertion_point(field_set_allocated:protobuf.MessageOfObj.prop_message)
    }
    void MessageOfObj::set_allocated_bullet_message(::protobuf::MessageOfBullet* bullet_message)
    {
        ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
        clear_message_of_obj();
        if (bullet_message)
        {
            ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
                ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(bullet_message);
            if (message_arena != submessage_arena)
            {
                bullet_message = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
                    message_arena, bullet_message, submessage_arena
                );
            }
            set_has_bullet_message();
            _impl_.message_of_obj_.bullet_message_ = bullet_message;
        }
        // @@protoc_insertion_point(field_set_allocated:protobuf.MessageOfObj.bullet_message)
    }
    void MessageOfObj::set_allocated_bombed_bullet_message(::protobuf::MessageOfBombedBullet* bombed_bullet_message)
    {
        ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
        clear_message_of_obj();
        if (bombed_bullet_message)
        {
            ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
                ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(bombed_bullet_message);
            if (message_arena != submessage_arena)
            {
                bombed_bullet_message = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
                    message_arena, bombed_bullet_message, submessage_arena
                );
            }
            set_has_bombed_bullet_message();
            _impl_.message_of_obj_.bombed_bullet_message_ = bombed_bullet_message;
        }
        // @@protoc_insertion_point(field_set_allocated:protobuf.MessageOfObj.bombed_bullet_message)
    }
    void MessageOfObj::set_allocated_classroom_message(::protobuf::MessageOfClassroom* classroom_message)
    {
        ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
        clear_message_of_obj();
        if (classroom_message)
        {
            ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
                ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(classroom_message);
            if (message_arena != submessage_arena)
            {
                classroom_message = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
                    message_arena, classroom_message, submessage_arena
                );
            }
            set_has_classroom_message();
            _impl_.message_of_obj_.classroom_message_ = classroom_message;
        }
        // @@protoc_insertion_point(field_set_allocated:protobuf.MessageOfObj.classroom_message)
    }
    void MessageOfObj::set_allocated_door_message(::protobuf::MessageOfDoor* door_message)
    {
        ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
        clear_message_of_obj();
        if (door_message)
        {
            ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
                ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(door_message);
            if (message_arena != submessage_arena)
            {
                door_message = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
                    message_arena, door_message, submessage_arena
                );
            }
            set_has_door_message();
            _impl_.message_of_obj_.door_message_ = door_message;
        }
        // @@protoc_insertion_point(field_set_allocated:protobuf.MessageOfObj.door_message)
    }
    void MessageOfObj::set_allocated_gate_message(::protobuf::MessageOfGate* gate_message)
    {
        ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
        clear_message_of_obj();
        if (gate_message)
        {
            ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
                ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(gate_message);
            if (message_arena != submessage_arena)
            {
                gate_message = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
                    message_arena, gate_message, submessage_arena
                );
            }
            set_has_gate_message();
            _impl_.message_of_obj_.gate_message_ = gate_message;
        }
        // @@protoc_insertion_point(field_set_allocated:protobuf.MessageOfObj.gate_message)
    }
    void MessageOfObj::set_allocated_chest_message(::protobuf::MessageOfChest* chest_message)
    {
        ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
        clear_message_of_obj();
        if (chest_message)
        {
            ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
                ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(chest_message);
            if (message_arena != submessage_arena)
            {
                chest_message = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
                    message_arena, chest_message, submessage_arena
                );
            }
            set_has_chest_message();
            _impl_.message_of_obj_.chest_message_ = chest_message;
        }
        // @@protoc_insertion_point(field_set_allocated:protobuf.MessageOfObj.chest_message)
    }
    void MessageOfObj::set_allocated_hidden_gate_message(::protobuf::MessageOfHiddenGate* hidden_gate_message)
    {
        ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
        clear_message_of_obj();
        if (hidden_gate_message)
        {
            ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
                ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(hidden_gate_message);
            if (message_arena != submessage_arena)
            {
                hidden_gate_message = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
                    message_arena, hidden_gate_message, submessage_arena
                );
            }
            set_has_hidden_gate_message();
            _impl_.message_of_obj_.hidden_gate_message_ = hidden_gate_message;
        }
        // @@protoc_insertion_point(field_set_allocated:protobuf.MessageOfObj.hidden_gate_message)
    }
    void MessageOfObj::set_allocated_news_message(::protobuf::MessageOfNews* news_message)
    {
        ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
        clear_message_of_obj();
        if (news_message)
        {
            ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
                ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(news_message);
            if (message_arena != submessage_arena)
            {
                news_message = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
                    message_arena, news_message, submessage_arena
                );
            }
            set_has_news_message();
            _impl_.message_of_obj_.news_message_ = news_message;
        }
        // @@protoc_insertion_point(field_set_allocated:protobuf.MessageOfObj.news_message)
    }
    void MessageOfObj::set_allocated_map_message(::protobuf::MessageOfMap* map_message)
    {
        ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
        clear_message_of_obj();
        if (map_message)
        {
            ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
                ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(map_message);
            if (message_arena != submessage_arena)
            {
                map_message = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
                    message_arena, map_message, submessage_arena
                );
            }
            set_has_map_message();
            _impl_.message_of_obj_.map_message_ = map_message;
        }
        // @@protoc_insertion_point(field_set_allocated:protobuf.MessageOfObj.map_message)
    }
    MessageOfObj::MessageOfObj(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned) :
        ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned)
    {
        SharedCtor(arena, is_message_owned);
        // @@protoc_insertion_point(arena_constructor:protobuf.MessageOfObj)
    }
    MessageOfObj::MessageOfObj(const MessageOfObj& from) :
        ::PROTOBUF_NAMESPACE_ID::Message()
    {
        MessageOfObj* const _this = this;
        (void)_this;
        new (&_impl_) Impl_{
            decltype(_impl_.message_of_obj_){}, /*decltype(_impl_._cached_size_)*/ {}, /*decltype(_impl_._oneof_case_)*/ {}};

        _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
        clear_has_message_of_obj();
        switch (from.message_of_obj_case())
        {
            case kStudentMessage:
                {
                    _this->_internal_mutable_student_message()->::protobuf::MessageOfStudent::MergeFrom(
                        from._internal_student_message()
                    );
                    break;
                }
            case kTrickerMessage:
                {
                    _this->_internal_mutable_tricker_message()->::protobuf::MessageOfTricker::MergeFrom(
                        from._internal_tricker_message()
                    );
                    break;
                }
            case kPropMessage:
                {
                    _this->_internal_mutable_prop_message()->::protobuf::MessageOfProp::MergeFrom(
                        from._internal_prop_message()
                    );
                    break;
                }
            case kBulletMessage:
                {
                    _this->_internal_mutable_bullet_message()->::protobuf::MessageOfBullet::MergeFrom(
                        from._internal_bullet_message()
                    );
                    break;
                }
            case kBombedBulletMessage:
                {
                    _this->_internal_mutable_bombed_bullet_message()->::protobuf::MessageOfBombedBullet::MergeFrom(
                        from._internal_bombed_bullet_message()
                    );
                    break;
                }
            case kClassroomMessage:
                {
                    _this->_internal_mutable_classroom_message()->::protobuf::MessageOfClassroom::MergeFrom(
                        from._internal_classroom_message()
                    );
                    break;
                }
            case kDoorMessage:
                {
                    _this->_internal_mutable_door_message()->::protobuf::MessageOfDoor::MergeFrom(
                        from._internal_door_message()
                    );
                    break;
                }
            case kGateMessage:
                {
                    _this->_internal_mutable_gate_message()->::protobuf::MessageOfGate::MergeFrom(
                        from._internal_gate_message()
                    );
                    break;
                }
            case kChestMessage:
                {
                    _this->_internal_mutable_chest_message()->::protobuf::MessageOfChest::MergeFrom(
                        from._internal_chest_message()
                    );
                    break;
                }
            case kHiddenGateMessage:
                {
                    _this->_internal_mutable_hidden_gate_message()->::protobuf::MessageOfHiddenGate::MergeFrom(
                        from._internal_hidden_gate_message()
                    );
                    break;
                }
            case kNewsMessage:
                {
                    _this->_internal_mutable_news_message()->::protobuf::MessageOfNews::MergeFrom(
                        from._internal_news_message()
                    );
                    break;
                }
            case kMapMessage:
                {
                    _this->_internal_mutable_map_message()->::protobuf::MessageOfMap::MergeFrom(
                        from._internal_map_message()
                    );
                    break;
                }
            case MESSAGE_OF_OBJ_NOT_SET:
                {
                    break;
                }
        }
        // @@protoc_insertion_point(copy_constructor:protobuf.MessageOfObj)
    }

    inline void MessageOfObj::SharedCtor(
        ::_pb::Arena* arena, bool is_message_owned
    )
    {
        (void)arena;
        (void)is_message_owned;
        new (&_impl_) Impl_{
            decltype(_impl_.message_of_obj_){}, /*decltype(_impl_._cached_size_)*/ {}, /*decltype(_impl_._oneof_case_)*/ {}};
        clear_has_message_of_obj();
    }

    MessageOfObj::~MessageOfObj()
    {
        // @@protoc_insertion_point(destructor:protobuf.MessageOfObj)
        if (auto* arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>())
        {
            (void)arena;
            return;
        }
        SharedDtor();
    }

    inline void MessageOfObj::SharedDtor()
    {
        GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
        if (has_message_of_obj())
        {
            clear_message_of_obj();
        }
    }

    void MessageOfObj::SetCachedSize(int size) const
    {
        _impl_._cached_size_.Set(size);
    }

    void MessageOfObj::clear_message_of_obj()
    {
        // @@protoc_insertion_point(one_of_clear_start:protobuf.MessageOfObj)
        switch (message_of_obj_case())
        {
            case kStudentMessage:
                {
                    if (GetArenaForAllocation() == nullptr)
                    {
                        delete _impl_.message_of_obj_.student_message_;
                    }
                    break;
                }
            case kTrickerMessage:
                {
                    if (GetArenaForAllocation() == nullptr)
                    {
                        delete _impl_.message_of_obj_.tricker_message_;
                    }
                    break;
                }
            case kPropMessage:
                {
                    if (GetArenaForAllocation() == nullptr)
                    {
                        delete _impl_.message_of_obj_.prop_message_;
                    }
                    break;
                }
            case kBulletMessage:
                {
                    if (GetArenaForAllocation() == nullptr)
                    {
                        delete _impl_.message_of_obj_.bullet_message_;
                    }
                    break;
                }
            case kBombedBulletMessage:
                {
                    if (GetArenaForAllocation() == nullptr)
                    {
                        delete _impl_.message_of_obj_.bombed_bullet_message_;
                    }
                    break;
                }
            case kClassroomMessage:
                {
                    if (GetArenaForAllocation() == nullptr)
                    {
                        delete _impl_.message_of_obj_.classroom_message_;
                    }
                    break;
                }
            case kDoorMessage:
                {
                    if (GetArenaForAllocation() == nullptr)
                    {
                        delete _impl_.message_of_obj_.door_message_;
                    }
                    break;
                }
            case kGateMessage:
                {
                    if (GetArenaForAllocation() == nullptr)
                    {
                        delete _impl_.message_of_obj_.gate_message_;
                    }
                    break;
                }
            case kChestMessage:
                {
                    if (GetArenaForAllocation() == nullptr)
                    {
                        delete _impl_.message_of_obj_.chest_message_;
                    }
                    break;
                }
            case kHiddenGateMessage:
                {
                    if (GetArenaForAllocation() == nullptr)
                    {
                        delete _impl_.message_of_obj_.hidden_gate_message_;
                    }
                    break;
                }
            case kNewsMessage:
                {
                    if (GetArenaForAllocation() == nullptr)
                    {
                        delete _impl_.message_of_obj_.news_message_;
                    }
                    break;
                }
            case kMapMessage:
                {
                    if (GetArenaForAllocation() == nullptr)
                    {
                        delete _impl_.message_of_obj_.map_message_;
                    }
                    break;
                }
            case MESSAGE_OF_OBJ_NOT_SET:
                {
                    break;
                }
        }
        _impl_._oneof_case_[0] = MESSAGE_OF_OBJ_NOT_SET;
    }

    void MessageOfObj::Clear()
    {
        // @@protoc_insertion_point(message_clear_start:protobuf.MessageOfObj)
        uint32_t cached_has_bits = 0;
        // Prevent compiler warnings about cached_has_bits being unused
        (void)cached_has_bits;

        clear_message_of_obj();
        _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
    }

    const char* MessageOfObj::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx)
    {
#define CHK_(x)                       \
    if (PROTOBUF_PREDICT_FALSE(!(x))) \
    goto failure
        while (!ctx->Done(&ptr))
        {
            uint32_t tag;
            ptr = ::_pbi::ReadTag(ptr, &tag);
            switch (tag >> 3)
            {
                // .protobuf.MessageOfStudent student_message = 1;
                case 1:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10))
                    {
                        ptr = ctx->ParseMessage(_internal_mutable_student_message(), ptr);
                        CHK_(ptr);
                    }
                    else
                        goto handle_unusual;
                    continue;
                // .protobuf.MessageOfTricker tricker_message = 2;
                case 2:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18))
                    {
                        ptr = ctx->ParseMessage(_internal_mutable_tricker_message(), ptr);
                        CHK_(ptr);
                    }
                    else
                        goto handle_unusual;
                    continue;
                // .protobuf.MessageOfProp prop_message = 3;
                case 3:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26))
                    {
                        ptr = ctx->ParseMessage(_internal_mutable_prop_message(), ptr);
                        CHK_(ptr);
                    }
                    else
                        goto handle_unusual;
                    continue;
                // .protobuf.MessageOfBullet bullet_message = 4;
                case 4:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34))
                    {
                        ptr = ctx->ParseMessage(_internal_mutable_bullet_message(), ptr);
                        CHK_(ptr);
                    }
                    else
                        goto handle_unusual;
                    continue;
                // .protobuf.MessageOfBombedBullet bombed_bullet_message = 5;
                case 5:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42))
                    {
                        ptr = ctx->ParseMessage(_internal_mutable_bombed_bullet_message(), ptr);
                        CHK_(ptr);
                    }
                    else
                        goto handle_unusual;
                    continue;
                // .protobuf.MessageOfClassroom classroom_message = 6;
                case 6:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50))
                    {
                        ptr = ctx->ParseMessage(_internal_mutable_classroom_message(), ptr);
                        CHK_(ptr);
                    }
                    else
                        goto handle_unusual;
                    continue;
                // .protobuf.MessageOfDoor door_message = 7;
                case 7:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58))
                    {
                        ptr = ctx->ParseMessage(_internal_mutable_door_message(), ptr);
                        CHK_(ptr);
                    }
                    else
                        goto handle_unusual;
                    continue;
                // .protobuf.MessageOfGate gate_message = 8;
                case 8:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66))
                    {
                        ptr = ctx->ParseMessage(_internal_mutable_gate_message(), ptr);
                        CHK_(ptr);
                    }
                    else
                        goto handle_unusual;
                    continue;
                // .protobuf.MessageOfChest chest_message = 9;
                case 9:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74))
                    {
                        ptr = ctx->ParseMessage(_internal_mutable_chest_message(), ptr);
                        CHK_(ptr);
                    }
                    else
                        goto handle_unusual;
                    continue;
                // .protobuf.MessageOfHiddenGate hidden_gate_message = 10;
                case 10:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82))
                    {
                        ptr = ctx->ParseMessage(_internal_mutable_hidden_gate_message(), ptr);
                        CHK_(ptr);
                    }
                    else
                        goto handle_unusual;
                    continue;
                // .protobuf.MessageOfNews news_message = 11;
                case 11:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90))
                    {
                        ptr = ctx->ParseMessage(_internal_mutable_news_message(), ptr);
                        CHK_(ptr);
                    }
                    else
                        goto handle_unusual;
                    continue;
                // .protobuf.MessageOfMap map_message = 12;
                case 12:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98))
                    {
                        ptr = ctx->ParseMessage(_internal_mutable_map_message(), ptr);
                        CHK_(ptr);
                    }
                    else
                        goto handle_unusual;
                    continue;
                default:
                    goto handle_unusual;
            }  // switch
        handle_unusual:
            if ((tag == 0) || ((tag & 7) == 4))
            {
                CHK_(ptr);
                ctx->SetLastTag(tag);
                goto message_done;
            }
            ptr = UnknownFieldParse(
                tag,
                _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
                ptr,
                ctx
            );
            CHK_(ptr != nullptr);
        }  // while
    message_done:
        return ptr;
    failure:
        ptr = nullptr;
        goto message_done;
#undef CHK_
    }

    uint8_t* MessageOfObj::_InternalSerialize(
        uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream
    ) const
    {
        // @@protoc_insertion_point(serialize_to_array_start:protobuf.MessageOfObj)
        uint32_t cached_has_bits = 0;
        (void)cached_has_bits;

        // .protobuf.MessageOfStudent student_message = 1;
        if (_internal_has_student_message())
        {
            target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
                InternalWriteMessage(1, _Internal::student_message(this), _Internal::student_message(this).GetCachedSize(), target, stream);
        }

        // .protobuf.MessageOfTricker tricker_message = 2;
        if (_internal_has_tricker_message())
        {
            target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
                InternalWriteMessage(2, _Internal::tricker_message(this), _Internal::tricker_message(this).GetCachedSize(), target, stream);
        }

        // .protobuf.MessageOfProp prop_message = 3;
        if (_internal_has_prop_message())
        {
            target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
                InternalWriteMessage(3, _Internal::prop_message(this), _Internal::prop_message(this).GetCachedSize(), target, stream);
        }

        // .protobuf.MessageOfBullet bullet_message = 4;
        if (_internal_has_bullet_message())
        {
            target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
                InternalWriteMessage(4, _Internal::bullet_message(this), _Internal::bullet_message(this).GetCachedSize(), target, stream);
        }

        // .protobuf.MessageOfBombedBullet bombed_bullet_message = 5;
        if (_internal_has_bombed_bullet_message())
        {
            target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
                InternalWriteMessage(5, _Internal::bombed_bullet_message(this), _Internal::bombed_bullet_message(this).GetCachedSize(), target, stream);
        }

        // .protobuf.MessageOfClassroom classroom_message = 6;
        if (_internal_has_classroom_message())
        {
            target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
                InternalWriteMessage(6, _Internal::classroom_message(this), _Internal::classroom_message(this).GetCachedSize(), target, stream);
        }

        // .protobuf.MessageOfDoor door_message = 7;
        if (_internal_has_door_message())
        {
            target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
                InternalWriteMessage(7, _Internal::door_message(this), _Internal::door_message(this).GetCachedSize(), target, stream);
        }

        // .protobuf.MessageOfGate gate_message = 8;
        if (_internal_has_gate_message())
        {
            target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
                InternalWriteMessage(8, _Internal::gate_message(this), _Internal::gate_message(this).GetCachedSize(), target, stream);
        }

        // .protobuf.MessageOfChest chest_message = 9;
        if (_internal_has_chest_message())
        {
            target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
                InternalWriteMessage(9, _Internal::chest_message(this), _Internal::chest_message(this).GetCachedSize(), target, stream);
        }

        // .protobuf.MessageOfHiddenGate hidden_gate_message = 10;
        if (_internal_has_hidden_gate_message())
        {
            target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
                InternalWriteMessage(10, _Internal::hidden_gate_message(this), _Internal::hidden_gate_message(this).GetCachedSize(), target, stream);
        }

        // .protobuf.MessageOfNews news_message = 11;
        if (_internal_has_news_message())
        {
            target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
                InternalWriteMessage(11, _Internal::news_message(this), _Internal::news_message(this).GetCachedSize(), target, stream);
        }

        // .protobuf.MessageOfMap map_message = 12;
        if (_internal_has_map_message())
        {
            target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
                InternalWriteMessage(12, _Internal::map_message(this), _Internal::map_message(this).GetCachedSize(), target, stream);
        }

        if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields()))
        {
            target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream
            );
        }
        // @@protoc_insertion_point(serialize_to_array_end:protobuf.MessageOfObj)
        return target;
    }

    size_t MessageOfObj::ByteSizeLong() const
    {
        // @@protoc_insertion_point(message_byte_size_start:protobuf.MessageOfObj)
        size_t total_size = 0;

        uint32_t cached_has_bits = 0;
        // Prevent compiler warnings about cached_has_bits being unused
        (void)cached_has_bits;

        switch (message_of_obj_case())
        {
            // .protobuf.MessageOfStudent student_message = 1;
            case kStudentMessage:
                {
                    total_size += 1 +
                                  ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
                                      *_impl_.message_of_obj_.student_message_
                                  );
                    break;
                }
            // .protobuf.MessageOfTricker tricker_message = 2;
            case kTrickerMessage:
                {
                    total_size += 1 +
                                  ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
                                      *_impl_.message_of_obj_.tricker_message_
                                  );
                    break;
                }
            // .protobuf.MessageOfProp prop_message = 3;
            case kPropMessage:
                {
                    total_size += 1 +
                                  ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
                                      *_impl_.message_of_obj_.prop_message_
                                  );
                    break;
                }
            // .protobuf.MessageOfBullet bullet_message = 4;
            case kBulletMessage:
                {
                    total_size += 1 +
                                  ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
                                      *_impl_.message_of_obj_.bullet_message_
                                  );
                    break;
                }
            // .protobuf.MessageOfBombedBullet bombed_bullet_message = 5;
            case kBombedBulletMessage:
                {
                    total_size += 1 +
                                  ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
                                      *_impl_.message_of_obj_.bombed_bullet_message_
                                  );
                    break;
                }
            // .protobuf.MessageOfClassroom classroom_message = 6;
            case kClassroomMessage:
                {
                    total_size += 1 +
                                  ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
                                      *_impl_.message_of_obj_.classroom_message_
                                  );
                    break;
                }
            // .protobuf.MessageOfDoor door_message = 7;
            case kDoorMessage:
                {
                    total_size += 1 +
                                  ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
                                      *_impl_.message_of_obj_.door_message_
                                  );
                    break;
                }
            // .protobuf.MessageOfGate gate_message = 8;
            case kGateMessage:
                {
                    total_size += 1 +
                                  ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
                                      *_impl_.message_of_obj_.gate_message_
                                  );
                    break;
                }
            // .protobuf.MessageOfChest chest_message = 9;
            case kChestMessage:
                {
                    total_size += 1 +
                                  ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
                                      *_impl_.message_of_obj_.chest_message_
                                  );
                    break;
                }
            // .protobuf.MessageOfHiddenGate hidden_gate_message = 10;
            case kHiddenGateMessage:
                {
                    total_size += 1 +
                                  ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
                                      *_impl_.message_of_obj_.hidden_gate_message_
                                  );
                    break;
                }
            // .protobuf.MessageOfNews news_message = 11;
            case kNewsMessage:
                {
                    total_size += 1 +
                                  ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
                                      *_impl_.message_of_obj_.news_message_
                                  );
                    break;
                }
            // .protobuf.MessageOfMap map_message = 12;
            case kMapMessage:
                {
                    total_size += 1 +
                                  ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
                                      *_impl_.message_of_obj_.map_message_
                                  );
                    break;
                }
            case MESSAGE_OF_OBJ_NOT_SET:
                {
                    break;
                }
        }
        return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
    }

    const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MessageOfObj::_class_data_ = {
        ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
        MessageOfObj::MergeImpl};
    const ::PROTOBUF_NAMESPACE_ID::Message::ClassData* MessageOfObj::GetClassData() const
    {
        return &_class_data_;
    }

    void MessageOfObj::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg)
    {
        auto* const _this = static_cast<MessageOfObj*>(&to_msg);
        auto& from = static_cast<const MessageOfObj&>(from_msg);
        // @@protoc_insertion_point(class_specific_merge_from_start:protobuf.MessageOfObj)
        GOOGLE_DCHECK_NE(&from, _this);
        uint32_t cached_has_bits = 0;
        (void)cached_has_bits;

        switch (from.message_of_obj_case())
        {
            case kStudentMessage:
                {
                    _this->_internal_mutable_student_message()->::protobuf::MessageOfStudent::MergeFrom(
                        from._internal_student_message()
                    );
                    break;
                }
            case kTrickerMessage:
                {
                    _this->_internal_mutable_tricker_message()->::protobuf::MessageOfTricker::MergeFrom(
                        from._internal_tricker_message()
                    );
                    break;
                }
            case kPropMessage:
                {
                    _this->_internal_mutable_prop_message()->::protobuf::MessageOfProp::MergeFrom(
                        from._internal_prop_message()
                    );
                    break;
                }
            case kBulletMessage:
                {
                    _this->_internal_mutable_bullet_message()->::protobuf::MessageOfBullet::MergeFrom(
                        from._internal_bullet_message()
                    );
                    break;
                }
            case kBombedBulletMessage:
                {
                    _this->_internal_mutable_bombed_bullet_message()->::protobuf::MessageOfBombedBullet::MergeFrom(
                        from._internal_bombed_bullet_message()
                    );
                    break;
                }
            case kClassroomMessage:
                {
                    _this->_internal_mutable_classroom_message()->::protobuf::MessageOfClassroom::MergeFrom(
                        from._internal_classroom_message()
                    );
                    break;
                }
            case kDoorMessage:
                {
                    _this->_internal_mutable_door_message()->::protobuf::MessageOfDoor::MergeFrom(
                        from._internal_door_message()
                    );
                    break;
                }
            case kGateMessage:
                {
                    _this->_internal_mutable_gate_message()->::protobuf::MessageOfGate::MergeFrom(
                        from._internal_gate_message()
                    );
                    break;
                }
            case kChestMessage:
                {
                    _this->_internal_mutable_chest_message()->::protobuf::MessageOfChest::MergeFrom(
                        from._internal_chest_message()
                    );
                    break;
                }
            case kHiddenGateMessage:
                {
                    _this->_internal_mutable_hidden_gate_message()->::protobuf::MessageOfHiddenGate::MergeFrom(
                        from._internal_hidden_gate_message()
                    );
                    break;
                }
            case kNewsMessage:
                {
                    _this->_internal_mutable_news_message()->::protobuf::MessageOfNews::MergeFrom(
                        from._internal_news_message()
                    );
                    break;
                }
            case kMapMessage:
                {
                    _this->_internal_mutable_map_message()->::protobuf::MessageOfMap::MergeFrom(
                        from._internal_map_message()
                    );
                    break;
                }
            case MESSAGE_OF_OBJ_NOT_SET:
                {
                    break;
                }
        }
        _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
    }

    void MessageOfObj::CopyFrom(const MessageOfObj& from)
    {
        // @@protoc_insertion_point(class_specific_copy_from_start:protobuf.MessageOfObj)
        if (&from == this)
            return;
        Clear();
        MergeFrom(from);
    }

    bool MessageOfObj::IsInitialized() const
    {
        return true;
    }

    void MessageOfObj::InternalSwap(MessageOfObj* other)
    {
        using std::swap;
        _internal_metadata_.InternalSwap(&other->_internal_metadata_);
        swap(_impl_.message_of_obj_, other->_impl_.message_of_obj_);
        swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
    }

    ::PROTOBUF_NAMESPACE_ID::Metadata MessageOfObj::GetMetadata() const
    {
        return ::_pbi::AssignDescriptors(
            &descriptor_table_Message2Clients_2eproto_getter, &descriptor_table_Message2Clients_2eproto_once, file_level_metadata_Message2Clients_2eproto[14]
        );
    }

    // ===================================================================

    class MessageOfAll::_Internal
    {
    public:
    };

    MessageOfAll::MessageOfAll(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned) :
        ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned)
    {
        SharedCtor(arena, is_message_owned);
        // @@protoc_insertion_point(arena_constructor:protobuf.MessageOfAll)
    }
    MessageOfAll::MessageOfAll(const MessageOfAll& from) :
        ::PROTOBUF_NAMESPACE_ID::Message()
    {
        MessageOfAll* const _this = this;
        (void)_this;
        new (&_impl_) Impl_{
            decltype(_impl_.game_time_){}, decltype(_impl_.subject_finished_){}, decltype(_impl_.student_graduated_){}, decltype(_impl_.student_quited_){}, decltype(_impl_.student_score_){}, decltype(_impl_.tricker_score_){}, /*decltype(_impl_._cached_size_)*/ {}};

        _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
        ::memcpy(&_impl_.game_time_, &from._impl_.game_time_, static_cast<size_t>(reinterpret_cast<char*>(&_impl_.tricker_score_) - reinterpret_cast<char*>(&_impl_.game_time_)) + sizeof(_impl_.tricker_score_));
        // @@protoc_insertion_point(copy_constructor:protobuf.MessageOfAll)
    }

    inline void MessageOfAll::SharedCtor(
        ::_pb::Arena* arena, bool is_message_owned
    )
    {
        (void)arena;
        (void)is_message_owned;
        new (&_impl_) Impl_{
            decltype(_impl_.game_time_){0}, decltype(_impl_.subject_finished_){0}, decltype(_impl_.student_graduated_){0}, decltype(_impl_.student_quited_){0}, decltype(_impl_.student_score_){0}, decltype(_impl_.tricker_score_){0}, /*decltype(_impl_._cached_size_)*/ {}};
    }

    MessageOfAll::~MessageOfAll()
    {
        // @@protoc_insertion_point(destructor:protobuf.MessageOfAll)
        if (auto* arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>())
        {
            (void)arena;
            return;
        }
        SharedDtor();
    }

    inline void MessageOfAll::SharedDtor()
    {
        GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
    }

    void MessageOfAll::SetCachedSize(int size) const
    {
        _impl_._cached_size_.Set(size);
    }

    void MessageOfAll::Clear()
    {
        // @@protoc_insertion_point(message_clear_start:protobuf.MessageOfAll)
        uint32_t cached_has_bits = 0;
        // Prevent compiler warnings about cached_has_bits being unused
        (void)cached_has_bits;

        ::memset(&_impl_.game_time_, 0, static_cast<size_t>(reinterpret_cast<char*>(&_impl_.tricker_score_) - reinterpret_cast<char*>(&_impl_.game_time_)) + sizeof(_impl_.tricker_score_));
        _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
    }

    const char* MessageOfAll::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx)
    {
#define CHK_(x)                       \
    if (PROTOBUF_PREDICT_FALSE(!(x))) \
    goto failure
        while (!ctx->Done(&ptr))
        {
            uint32_t tag;
            ptr = ::_pbi::ReadTag(ptr, &tag);
            switch (tag >> 3)
            {
                // int32 game_time = 1;
                case 1:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8))
                    {
                        _impl_.game_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
                        CHK_(ptr);
                    }
                    else
                        goto handle_unusual;
                    continue;
                // int32 subject_finished = 2;
                case 2:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16))
                    {
                        _impl_.subject_finished_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
                        CHK_(ptr);
                    }
                    else
                        goto handle_unusual;
                    continue;
                // int32 student_graduated = 3;
                case 3:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24))
                    {
                        _impl_.student_graduated_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
                        CHK_(ptr);
                    }
                    else
                        goto handle_unusual;
                    continue;
                // int32 student_quited = 4;
                case 4:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32))
                    {
                        _impl_.student_quited_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
                        CHK_(ptr);
                    }
                    else
                        goto handle_unusual;
                    continue;
                // int32 student_score = 5;
                case 5:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40))
                    {
                        _impl_.student_score_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
                        CHK_(ptr);
                    }
                    else
                        goto handle_unusual;
                    continue;
                // int32 tricker_score = 6;
                case 6:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48))
                    {
                        _impl_.tricker_score_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
                        CHK_(ptr);
                    }
                    else
                        goto handle_unusual;
                    continue;
                default:
                    goto handle_unusual;
            }  // switch
        handle_unusual:
            if ((tag == 0) || ((tag & 7) == 4))
            {
                CHK_(ptr);
                ctx->SetLastTag(tag);
                goto message_done;
            }
            ptr = UnknownFieldParse(
                tag,
                _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
                ptr,
                ctx
            );
            CHK_(ptr != nullptr);
        }  // while
    message_done:
        return ptr;
    failure:
        ptr = nullptr;
        goto message_done;
#undef CHK_
    }

    uint8_t* MessageOfAll::_InternalSerialize(
        uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream
    ) const
    {
        // @@protoc_insertion_point(serialize_to_array_start:protobuf.MessageOfAll)
        uint32_t cached_has_bits = 0;
        (void)cached_has_bits;

        // int32 game_time = 1;
        if (this->_internal_game_time() != 0)
        {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_game_time(), target);
        }

        // int32 subject_finished = 2;
        if (this->_internal_subject_finished() != 0)
        {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_subject_finished(), target);
        }

        // int32 student_graduated = 3;
        if (this->_internal_student_graduated() != 0)
        {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_student_graduated(), target);
        }

        // int32 student_quited = 4;
        if (this->_internal_student_quited() != 0)
        {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_student_quited(), target);
        }

        // int32 student_score = 5;
        if (this->_internal_student_score() != 0)
        {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_student_score(), target);
        }

        // int32 tricker_score = 6;
        if (this->_internal_tricker_score() != 0)
        {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_tricker_score(), target);
        }

        if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields()))
        {
            target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream
            );
        }
        // @@protoc_insertion_point(serialize_to_array_end:protobuf.MessageOfAll)
        return target;
    }

    size_t MessageOfAll::ByteSizeLong() const
    {
        // @@protoc_insertion_point(message_byte_size_start:protobuf.MessageOfAll)
        size_t total_size = 0;

        uint32_t cached_has_bits = 0;
        // Prevent compiler warnings about cached_has_bits being unused
        (void)cached_has_bits;

        // int32 game_time = 1;
        if (this->_internal_game_time() != 0)
        {
            total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_game_time());
        }

        // int32 subject_finished = 2;
        if (this->_internal_subject_finished() != 0)
        {
            total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_subject_finished());
        }

        // int32 student_graduated = 3;
        if (this->_internal_student_graduated() != 0)
        {
            total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_student_graduated());
        }

        // int32 student_quited = 4;
        if (this->_internal_student_quited() != 0)
        {
            total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_student_quited());
        }

        // int32 student_score = 5;
        if (this->_internal_student_score() != 0)
        {
            total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_student_score());
        }

        // int32 tricker_score = 6;
        if (this->_internal_tricker_score() != 0)
        {
            total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_tricker_score());
        }

        return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
    }

    const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MessageOfAll::_class_data_ = {
        ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
        MessageOfAll::MergeImpl};
    const ::PROTOBUF_NAMESPACE_ID::Message::ClassData* MessageOfAll::GetClassData() const
    {
        return &_class_data_;
    }

    void MessageOfAll::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg)
    {
        auto* const _this = static_cast<MessageOfAll*>(&to_msg);
        auto& from = static_cast<const MessageOfAll&>(from_msg);
        // @@protoc_insertion_point(class_specific_merge_from_start:protobuf.MessageOfAll)
        GOOGLE_DCHECK_NE(&from, _this);
        uint32_t cached_has_bits = 0;
        (void)cached_has_bits;

        if (from._internal_game_time() != 0)
        {
            _this->_internal_set_game_time(from._internal_game_time());
        }
        if (from._internal_subject_finished() != 0)
        {
            _this->_internal_set_subject_finished(from._internal_subject_finished());
        }
        if (from._internal_student_graduated() != 0)
        {
            _this->_internal_set_student_graduated(from._internal_student_graduated());
        }
        if (from._internal_student_quited() != 0)
        {
            _this->_internal_set_student_quited(from._internal_student_quited());
        }
        if (from._internal_student_score() != 0)
        {
            _this->_internal_set_student_score(from._internal_student_score());
        }
        if (from._internal_tricker_score() != 0)
        {
            _this->_internal_set_tricker_score(from._internal_tricker_score());
        }
        _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
    }

    void MessageOfAll::CopyFrom(const MessageOfAll& from)
    {
        // @@protoc_insertion_point(class_specific_copy_from_start:protobuf.MessageOfAll)
        if (&from == this)
            return;
        Clear();
        MergeFrom(from);
    }

    bool MessageOfAll::IsInitialized() const
    {
        return true;
    }

    void MessageOfAll::InternalSwap(MessageOfAll* other)
    {
        using std::swap;
        _internal_metadata_.InternalSwap(&other->_internal_metadata_);
        ::PROTOBUF_NAMESPACE_ID::internal::memswap<
            PROTOBUF_FIELD_OFFSET(MessageOfAll, _impl_.tricker_score_) + sizeof(MessageOfAll::_impl_.tricker_score_) - PROTOBUF_FIELD_OFFSET(MessageOfAll, _impl_.game_time_)>(
            reinterpret_cast<char*>(&_impl_.game_time_),
            reinterpret_cast<char*>(&other->_impl_.game_time_)
        );
    }

    ::PROTOBUF_NAMESPACE_ID::Metadata MessageOfAll::GetMetadata() const
    {
        return ::_pbi::AssignDescriptors(
            &descriptor_table_Message2Clients_2eproto_getter, &descriptor_table_Message2Clients_2eproto_once, file_level_metadata_Message2Clients_2eproto[15]
        );
    }

    // ===================================================================

    class MessageToClient::_Internal
    {
    public:
        static const ::protobuf::MessageOfAll& all_message(const MessageToClient* msg);
    };

    const ::protobuf::MessageOfAll&
        MessageToClient::_Internal::all_message(const MessageToClient* msg)
    {
        return *msg->_impl_.all_message_;
    }
    MessageToClient::MessageToClient(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned) :
        ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned)
    {
        SharedCtor(arena, is_message_owned);
        // @@protoc_insertion_point(arena_constructor:protobuf.MessageToClient)
    }
    MessageToClient::MessageToClient(const MessageToClient& from) :
        ::PROTOBUF_NAMESPACE_ID::Message()
    {
        MessageToClient* const _this = this;
        (void)_this;
        new (&_impl_) Impl_{
            decltype(_impl_.obj_message_){from._impl_.obj_message_}, decltype(_impl_.all_message_){nullptr}, decltype(_impl_.game_state_){}, /*decltype(_impl_._cached_size_)*/ {}};

        _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
        if (from._internal_has_all_message())
        {
            _this->_impl_.all_message_ = new ::protobuf::MessageOfAll(*from._impl_.all_message_);
        }
        _this->_impl_.game_state_ = from._impl_.game_state_;
        // @@protoc_insertion_point(copy_constructor:protobuf.MessageToClient)
    }

    inline void MessageToClient::SharedCtor(
        ::_pb::Arena* arena, bool is_message_owned
    )
    {
        (void)arena;
        (void)is_message_owned;
        new (&_impl_) Impl_{
            decltype(_impl_.obj_message_){arena}, decltype(_impl_.all_message_){nullptr}, decltype(_impl_.game_state_){0}, /*decltype(_impl_._cached_size_)*/ {}};
    }

    MessageToClient::~MessageToClient()
    {
        // @@protoc_insertion_point(destructor:protobuf.MessageToClient)
        if (auto* arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>())
        {
            (void)arena;
            return;
        }
        SharedDtor();
    }

    inline void MessageToClient::SharedDtor()
    {
        GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
        _impl_.obj_message_.~RepeatedPtrField();
        if (this != internal_default_instance())
            delete _impl_.all_message_;
    }

    void MessageToClient::SetCachedSize(int size) const
    {
        _impl_._cached_size_.Set(size);
    }

    void MessageToClient::Clear()
    {
        // @@protoc_insertion_point(message_clear_start:protobuf.MessageToClient)
        uint32_t cached_has_bits = 0;
        // Prevent compiler warnings about cached_has_bits being unused
        (void)cached_has_bits;

        _impl_.obj_message_.Clear();
        if (GetArenaForAllocation() == nullptr && _impl_.all_message_ != nullptr)
        {
            delete _impl_.all_message_;
        }
        _impl_.all_message_ = nullptr;
        _impl_.game_state_ = 0;
        _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
    }

    const char* MessageToClient::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx)
    {
#define CHK_(x)                       \
    if (PROTOBUF_PREDICT_FALSE(!(x))) \
    goto failure
        while (!ctx->Done(&ptr))
        {
            uint32_t tag;
            ptr = ::_pbi::ReadTag(ptr, &tag);
            switch (tag >> 3)
            {
                // repeated .protobuf.MessageOfObj obj_message = 1;
                case 1:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10))
                    {
                        ptr -= 1;
                        do
                        {
                            ptr += 1;
                            ptr = ctx->ParseMessage(_internal_add_obj_message(), ptr);
                            CHK_(ptr);
                            if (!ctx->DataAvailable(ptr))
                                break;
                        } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
                    }
                    else
                        goto handle_unusual;
                    continue;
                // .protobuf.GameState game_state = 2;
                case 2:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16))
                    {
                        uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
                        CHK_(ptr);
                        _internal_set_game_state(static_cast<::protobuf::GameState>(val));
                    }
                    else
                        goto handle_unusual;
                    continue;
                // .protobuf.MessageOfAll all_message = 3;
                case 3:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26))
                    {
                        ptr = ctx->ParseMessage(_internal_mutable_all_message(), ptr);
                        CHK_(ptr);
                    }
                    else
                        goto handle_unusual;
                    continue;
                default:
                    goto handle_unusual;
            }  // switch
        handle_unusual:
            if ((tag == 0) || ((tag & 7) == 4))
            {
                CHK_(ptr);
                ctx->SetLastTag(tag);
                goto message_done;
            }
            ptr = UnknownFieldParse(
                tag,
                _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
                ptr,
                ctx
            );
            CHK_(ptr != nullptr);
        }  // while
    message_done:
        return ptr;
    failure:
        ptr = nullptr;
        goto message_done;
#undef CHK_
    }

    uint8_t* MessageToClient::_InternalSerialize(
        uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream
    ) const
    {
        // @@protoc_insertion_point(serialize_to_array_start:protobuf.MessageToClient)
        uint32_t cached_has_bits = 0;
        (void)cached_has_bits;

        // repeated .protobuf.MessageOfObj obj_message = 1;
        for (unsigned i = 0,
                      n = static_cast<unsigned>(this->_internal_obj_message_size());
             i < n;
             i++)
        {
            const auto& repfield = this->_internal_obj_message(i);
            target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
                InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
        }

        // .protobuf.GameState game_state = 2;
        if (this->_internal_game_state() != 0)
        {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                2, this->_internal_game_state(), target
            );
        }

        // .protobuf.MessageOfAll all_message = 3;
        if (this->_internal_has_all_message())
        {
            target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
                InternalWriteMessage(3, _Internal::all_message(this), _Internal::all_message(this).GetCachedSize(), target, stream);
        }

        if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields()))
        {
            target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream
            );
        }
        // @@protoc_insertion_point(serialize_to_array_end:protobuf.MessageToClient)
        return target;
    }

    size_t MessageToClient::ByteSizeLong() const
    {
        // @@protoc_insertion_point(message_byte_size_start:protobuf.MessageToClient)
        size_t total_size = 0;

        uint32_t cached_has_bits = 0;
        // Prevent compiler warnings about cached_has_bits being unused
        (void)cached_has_bits;

        // repeated .protobuf.MessageOfObj obj_message = 1;
        total_size += 1UL * this->_internal_obj_message_size();
        for (const auto& msg : this->_impl_.obj_message_)
        {
            total_size +=
                ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
        }

        // .protobuf.MessageOfAll all_message = 3;
        if (this->_internal_has_all_message())
        {
            total_size += 1 +
                          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
                              *_impl_.all_message_
                          );
        }

        // .protobuf.GameState game_state = 2;
        if (this->_internal_game_state() != 0)
        {
            total_size += 1 +
                          ::_pbi::WireFormatLite::EnumSize(this->_internal_game_state());
        }

        return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
    }

    const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MessageToClient::_class_data_ = {
        ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
        MessageToClient::MergeImpl};
    const ::PROTOBUF_NAMESPACE_ID::Message::ClassData* MessageToClient::GetClassData() const
    {
        return &_class_data_;
    }

    void MessageToClient::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg)
    {
        auto* const _this = static_cast<MessageToClient*>(&to_msg);
        auto& from = static_cast<const MessageToClient&>(from_msg);
        // @@protoc_insertion_point(class_specific_merge_from_start:protobuf.MessageToClient)
        GOOGLE_DCHECK_NE(&from, _this);
        uint32_t cached_has_bits = 0;
        (void)cached_has_bits;

        _this->_impl_.obj_message_.MergeFrom(from._impl_.obj_message_);
        if (from._internal_has_all_message())
        {
            _this->_internal_mutable_all_message()->::protobuf::MessageOfAll::MergeFrom(
                from._internal_all_message()
            );
        }
        if (from._internal_game_state() != 0)
        {
            _this->_internal_set_game_state(from._internal_game_state());
        }
        _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
    }

    void MessageToClient::CopyFrom(const MessageToClient& from)
    {
        // @@protoc_insertion_point(class_specific_copy_from_start:protobuf.MessageToClient)
        if (&from == this)
            return;
        Clear();
        MergeFrom(from);
    }

    bool MessageToClient::IsInitialized() const
    {
        return true;
    }

    void MessageToClient::InternalSwap(MessageToClient* other)
    {
        using std::swap;
        _internal_metadata_.InternalSwap(&other->_internal_metadata_);
        _impl_.obj_message_.InternalSwap(&other->_impl_.obj_message_);
        ::PROTOBUF_NAMESPACE_ID::internal::memswap<
            PROTOBUF_FIELD_OFFSET(MessageToClient, _impl_.game_state_) + sizeof(MessageToClient::_impl_.game_state_) - PROTOBUF_FIELD_OFFSET(MessageToClient, _impl_.all_message_)>(
            reinterpret_cast<char*>(&_impl_.all_message_),
            reinterpret_cast<char*>(&other->_impl_.all_message_)
        );
    }

    ::PROTOBUF_NAMESPACE_ID::Metadata MessageToClient::GetMetadata() const
    {
        return ::_pbi::AssignDescriptors(
            &descriptor_table_Message2Clients_2eproto_getter, &descriptor_table_Message2Clients_2eproto_once, file_level_metadata_Message2Clients_2eproto[16]
        );
    }

    // ===================================================================

    class MoveRes::_Internal
    {
    public:
    };

    MoveRes::MoveRes(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned) :
        ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned)
    {
        SharedCtor(arena, is_message_owned);
        // @@protoc_insertion_point(arena_constructor:protobuf.MoveRes)
    }
    MoveRes::MoveRes(const MoveRes& from) :
        ::PROTOBUF_NAMESPACE_ID::Message()
    {
        MoveRes* const _this = this;
        (void)_this;
        new (&_impl_) Impl_{
            decltype(_impl_.actual_speed_){}, decltype(_impl_.actual_angle_){}, decltype(_impl_.act_success_){}, /*decltype(_impl_._cached_size_)*/ {}};

        _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
        ::memcpy(&_impl_.actual_speed_, &from._impl_.actual_speed_, static_cast<size_t>(reinterpret_cast<char*>(&_impl_.act_success_) - reinterpret_cast<char*>(&_impl_.actual_speed_)) + sizeof(_impl_.act_success_));
        // @@protoc_insertion_point(copy_constructor:protobuf.MoveRes)
    }

    inline void MoveRes::SharedCtor(
        ::_pb::Arena* arena, bool is_message_owned
    )
    {
        (void)arena;
        (void)is_message_owned;
        new (&_impl_) Impl_{
            decltype(_impl_.actual_speed_){int64_t{0}}, decltype(_impl_.actual_angle_){0}, decltype(_impl_.act_success_){false}, /*decltype(_impl_._cached_size_)*/ {}};
    }

    MoveRes::~MoveRes()
    {
        // @@protoc_insertion_point(destructor:protobuf.MoveRes)
        if (auto* arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>())
        {
            (void)arena;
            return;
        }
        SharedDtor();
    }

    inline void MoveRes::SharedDtor()
    {
        GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
    }

    void MoveRes::SetCachedSize(int size) const
    {
        _impl_._cached_size_.Set(size);
    }

    void MoveRes::Clear()
    {
        // @@protoc_insertion_point(message_clear_start:protobuf.MoveRes)
        uint32_t cached_has_bits = 0;
        // Prevent compiler warnings about cached_has_bits being unused
        (void)cached_has_bits;

        ::memset(&_impl_.actual_speed_, 0, static_cast<size_t>(reinterpret_cast<char*>(&_impl_.act_success_) - reinterpret_cast<char*>(&_impl_.actual_speed_)) + sizeof(_impl_.act_success_));
        _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
    }

    const char* MoveRes::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx)
    {
#define CHK_(x)                       \
    if (PROTOBUF_PREDICT_FALSE(!(x))) \
    goto failure
        while (!ctx->Done(&ptr))
        {
            uint32_t tag;
            ptr = ::_pbi::ReadTag(ptr, &tag);
            switch (tag >> 3)
            {
                // int64 actual_speed = 1;
                case 1:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8))
                    {
                        _impl_.actual_speed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
                        CHK_(ptr);
                    }
                    else
                        goto handle_unusual;
                    continue;
                // double actual_angle = 2;
                case 2:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17))
                    {
                        _impl_.actual_angle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
                        ptr += sizeof(double);
                    }
                    else
                        goto handle_unusual;
                    continue;
                // bool act_success = 3;
                case 3:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24))
                    {
                        _impl_.act_success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
                        CHK_(ptr);
                    }
                    else
                        goto handle_unusual;
                    continue;
                default:
                    goto handle_unusual;
            }  // switch
        handle_unusual:
            if ((tag == 0) || ((tag & 7) == 4))
            {
                CHK_(ptr);
                ctx->SetLastTag(tag);
                goto message_done;
            }
            ptr = UnknownFieldParse(
                tag,
                _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
                ptr,
                ctx
            );
            CHK_(ptr != nullptr);
        }  // while
    message_done:
        return ptr;
    failure:
        ptr = nullptr;
        goto message_done;
#undef CHK_
    }

    uint8_t* MoveRes::_InternalSerialize(
        uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream
    ) const
    {
        // @@protoc_insertion_point(serialize_to_array_start:protobuf.MoveRes)
        uint32_t cached_has_bits = 0;
        (void)cached_has_bits;

        // int64 actual_speed = 1;
        if (this->_internal_actual_speed() != 0)
        {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_actual_speed(), target);
        }

        // double actual_angle = 2;
        static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
        double tmp_actual_angle = this->_internal_actual_angle();
        uint64_t raw_actual_angle;
        memcpy(&raw_actual_angle, &tmp_actual_angle, sizeof(tmp_actual_angle));
        if (raw_actual_angle != 0)
        {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_actual_angle(), target);
        }

        // bool act_success = 3;
        if (this->_internal_act_success() != 0)
        {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_act_success(), target);
        }

        if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields()))
        {
            target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream
            );
        }
        // @@protoc_insertion_point(serialize_to_array_end:protobuf.MoveRes)
        return target;
    }

    size_t MoveRes::ByteSizeLong() const
    {
        // @@protoc_insertion_point(message_byte_size_start:protobuf.MoveRes)
        size_t total_size = 0;

        uint32_t cached_has_bits = 0;
        // Prevent compiler warnings about cached_has_bits being unused
        (void)cached_has_bits;

        // int64 actual_speed = 1;
        if (this->_internal_actual_speed() != 0)
        {
            total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_actual_speed());
        }

        // double actual_angle = 2;
        static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
        double tmp_actual_angle = this->_internal_actual_angle();
        uint64_t raw_actual_angle;
        memcpy(&raw_actual_angle, &tmp_actual_angle, sizeof(tmp_actual_angle));
        if (raw_actual_angle != 0)
        {
            total_size += 1 + 8;
        }

        // bool act_success = 3;
        if (this->_internal_act_success() != 0)
        {
            total_size += 1 + 1;
        }

        return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
    }

    const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MoveRes::_class_data_ = {
        ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
        MoveRes::MergeImpl};
    const ::PROTOBUF_NAMESPACE_ID::Message::ClassData* MoveRes::GetClassData() const
    {
        return &_class_data_;
    }

    void MoveRes::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg)
    {
        auto* const _this = static_cast<MoveRes*>(&to_msg);
        auto& from = static_cast<const MoveRes&>(from_msg);
        // @@protoc_insertion_point(class_specific_merge_from_start:protobuf.MoveRes)
        GOOGLE_DCHECK_NE(&from, _this);
        uint32_t cached_has_bits = 0;
        (void)cached_has_bits;

        if (from._internal_actual_speed() != 0)
        {
            _this->_internal_set_actual_speed(from._internal_actual_speed());
        }
        static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
        double tmp_actual_angle = from._internal_actual_angle();
        uint64_t raw_actual_angle;
        memcpy(&raw_actual_angle, &tmp_actual_angle, sizeof(tmp_actual_angle));
        if (raw_actual_angle != 0)
        {
            _this->_internal_set_actual_angle(from._internal_actual_angle());
        }
        if (from._internal_act_success() != 0)
        {
            _this->_internal_set_act_success(from._internal_act_success());
        }
        _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
    }

    void MoveRes::CopyFrom(const MoveRes& from)
    {
        // @@protoc_insertion_point(class_specific_copy_from_start:protobuf.MoveRes)
        if (&from == this)
            return;
        Clear();
        MergeFrom(from);
    }

    bool MoveRes::IsInitialized() const
    {
        return true;
    }

    void MoveRes::InternalSwap(MoveRes* other)
    {
        using std::swap;
        _internal_metadata_.InternalSwap(&other->_internal_metadata_);
        ::PROTOBUF_NAMESPACE_ID::internal::memswap<
            PROTOBUF_FIELD_OFFSET(MoveRes, _impl_.act_success_) + sizeof(MoveRes::_impl_.act_success_) - PROTOBUF_FIELD_OFFSET(MoveRes, _impl_.actual_speed_)>(
            reinterpret_cast<char*>(&_impl_.actual_speed_),
            reinterpret_cast<char*>(&other->_impl_.actual_speed_)
        );
    }

    ::PROTOBUF_NAMESPACE_ID::Metadata MoveRes::GetMetadata() const
    {
        return ::_pbi::AssignDescriptors(
            &descriptor_table_Message2Clients_2eproto_getter, &descriptor_table_Message2Clients_2eproto_once, file_level_metadata_Message2Clients_2eproto[17]
        );
    }

    // ===================================================================

    class BoolRes::_Internal
    {
    public:
    };

    BoolRes::BoolRes(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned) :
        ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned)
    {
        SharedCtor(arena, is_message_owned);
        // @@protoc_insertion_point(arena_constructor:protobuf.BoolRes)
    }
    BoolRes::BoolRes(const BoolRes& from) :
        ::PROTOBUF_NAMESPACE_ID::Message()
    {
        BoolRes* const _this = this;
        (void)_this;
        new (&_impl_) Impl_{
            decltype(_impl_.act_success_){}, /*decltype(_impl_._cached_size_)*/ {}};

        _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
        _this->_impl_.act_success_ = from._impl_.act_success_;
        // @@protoc_insertion_point(copy_constructor:protobuf.BoolRes)
    }

    inline void BoolRes::SharedCtor(
        ::_pb::Arena* arena, bool is_message_owned
    )
    {
        (void)arena;
        (void)is_message_owned;
        new (&_impl_) Impl_{
            decltype(_impl_.act_success_){false}, /*decltype(_impl_._cached_size_)*/ {}};
    }

    BoolRes::~BoolRes()
    {
        // @@protoc_insertion_point(destructor:protobuf.BoolRes)
        if (auto* arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>())
        {
            (void)arena;
            return;
        }
        SharedDtor();
    }

    inline void BoolRes::SharedDtor()
    {
        GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
    }

    void BoolRes::SetCachedSize(int size) const
    {
        _impl_._cached_size_.Set(size);
    }

    void BoolRes::Clear()
    {
        // @@protoc_insertion_point(message_clear_start:protobuf.BoolRes)
        uint32_t cached_has_bits = 0;
        // Prevent compiler warnings about cached_has_bits being unused
        (void)cached_has_bits;

        _impl_.act_success_ = false;
        _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
    }

    const char* BoolRes::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx)
    {
#define CHK_(x)                       \
    if (PROTOBUF_PREDICT_FALSE(!(x))) \
    goto failure
        while (!ctx->Done(&ptr))
        {
            uint32_t tag;
            ptr = ::_pbi::ReadTag(ptr, &tag);
            switch (tag >> 3)
            {
                // bool act_success = 1;
                case 1:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8))
                    {
                        _impl_.act_success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
                        CHK_(ptr);
                    }
                    else
                        goto handle_unusual;
                    continue;
                default:
                    goto handle_unusual;
            }  // switch
        handle_unusual:
            if ((tag == 0) || ((tag & 7) == 4))
            {
                CHK_(ptr);
                ctx->SetLastTag(tag);
                goto message_done;
            }
            ptr = UnknownFieldParse(
                tag,
                _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
                ptr,
                ctx
            );
            CHK_(ptr != nullptr);
        }  // while
    message_done:
        return ptr;
    failure:
        ptr = nullptr;
        goto message_done;
#undef CHK_
    }

    uint8_t* BoolRes::_InternalSerialize(
        uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream
    ) const
    {
        // @@protoc_insertion_point(serialize_to_array_start:protobuf.BoolRes)
        uint32_t cached_has_bits = 0;
        (void)cached_has_bits;

        // bool act_success = 1;
        if (this->_internal_act_success() != 0)
        {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_act_success(), target);
        }

        if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields()))
        {
            target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream
            );
        }
        // @@protoc_insertion_point(serialize_to_array_end:protobuf.BoolRes)
        return target;
    }

    size_t BoolRes::ByteSizeLong() const
    {
        // @@protoc_insertion_point(message_byte_size_start:protobuf.BoolRes)
        size_t total_size = 0;

        uint32_t cached_has_bits = 0;
        // Prevent compiler warnings about cached_has_bits being unused
        (void)cached_has_bits;

        // bool act_success = 1;
        if (this->_internal_act_success() != 0)
        {
            total_size += 1 + 1;
        }

        return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
    }

    const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BoolRes::_class_data_ = {
        ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
        BoolRes::MergeImpl};
    const ::PROTOBUF_NAMESPACE_ID::Message::ClassData* BoolRes::GetClassData() const
    {
        return &_class_data_;
    }

    void BoolRes::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg)
    {
        auto* const _this = static_cast<BoolRes*>(&to_msg);
        auto& from = static_cast<const BoolRes&>(from_msg);
        // @@protoc_insertion_point(class_specific_merge_from_start:protobuf.BoolRes)
        GOOGLE_DCHECK_NE(&from, _this);
        uint32_t cached_has_bits = 0;
        (void)cached_has_bits;

        if (from._internal_act_success() != 0)
        {
            _this->_internal_set_act_success(from._internal_act_success());
        }
        _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
    }

    void BoolRes::CopyFrom(const BoolRes& from)
    {
        // @@protoc_insertion_point(class_specific_copy_from_start:protobuf.BoolRes)
        if (&from == this)
            return;
        Clear();
        MergeFrom(from);
    }

    bool BoolRes::IsInitialized() const
    {
        return true;
    }

    void BoolRes::InternalSwap(BoolRes* other)
    {
        using std::swap;
        _internal_metadata_.InternalSwap(&other->_internal_metadata_);
        swap(_impl_.act_success_, other->_impl_.act_success_);
    }

    ::PROTOBUF_NAMESPACE_ID::Metadata BoolRes::GetMetadata() const
    {
        return ::_pbi::AssignDescriptors(
            &descriptor_table_Message2Clients_2eproto_getter, &descriptor_table_Message2Clients_2eproto_once, file_level_metadata_Message2Clients_2eproto[18]
        );
    }

    // @@protoc_insertion_point(namespace_scope)
}  // namespace protobuf
PROTOBUF_NAMESPACE_OPEN
template<>
PROTOBUF_NOINLINE ::protobuf::MessageOfStudent*
    Arena::CreateMaybeMessage<::protobuf::MessageOfStudent>(Arena* arena)
{
    return Arena::CreateMessageInternal<::protobuf::MessageOfStudent>(arena);
}
template<>
PROTOBUF_NOINLINE ::protobuf::MessageOfTricker*
    Arena::CreateMaybeMessage<::protobuf::MessageOfTricker>(Arena* arena)
{
    return Arena::CreateMessageInternal<::protobuf::MessageOfTricker>(arena);
}
template<>
PROTOBUF_NOINLINE ::protobuf::MessageOfBullet*
    Arena::CreateMaybeMessage<::protobuf::MessageOfBullet>(Arena* arena)
{
    return Arena::CreateMessageInternal<::protobuf::MessageOfBullet>(arena);
}
template<>
PROTOBUF_NOINLINE ::protobuf::MessageOfBombedBullet*
    Arena::CreateMaybeMessage<::protobuf::MessageOfBombedBullet>(Arena* arena)
{
    return Arena::CreateMessageInternal<::protobuf::MessageOfBombedBullet>(arena);
}
template<>
PROTOBUF_NOINLINE ::protobuf::MessageOfProp*
    Arena::CreateMaybeMessage<::protobuf::MessageOfProp>(Arena* arena)
{
    return Arena::CreateMessageInternal<::protobuf::MessageOfProp>(arena);
}
template<>
PROTOBUF_NOINLINE ::protobuf::MessageOfPickedProp*
    Arena::CreateMaybeMessage<::protobuf::MessageOfPickedProp>(Arena* arena)
{
    return Arena::CreateMessageInternal<::protobuf::MessageOfPickedProp>(arena);
}
template<>
PROTOBUF_NOINLINE ::protobuf::MessageOfClassroom*
    Arena::CreateMaybeMessage<::protobuf::MessageOfClassroom>(Arena* arena)
{
    return Arena::CreateMessageInternal<::protobuf::MessageOfClassroom>(arena);
}
template<>
PROTOBUF_NOINLINE ::protobuf::MessageOfGate*
    Arena::CreateMaybeMessage<::protobuf::MessageOfGate>(Arena* arena)
{
    return Arena::CreateMessageInternal<::protobuf::MessageOfGate>(arena);
}
template<>
PROTOBUF_NOINLINE ::protobuf::MessageOfHiddenGate*
    Arena::CreateMaybeMessage<::protobuf::MessageOfHiddenGate>(Arena* arena)
{
    return Arena::CreateMessageInternal<::protobuf::MessageOfHiddenGate>(arena);
}
template<>
PROTOBUF_NOINLINE ::protobuf::MessageOfDoor*
    Arena::CreateMaybeMessage<::protobuf::MessageOfDoor>(Arena* arena)
{
    return Arena::CreateMessageInternal<::protobuf::MessageOfDoor>(arena);
}
template<>
PROTOBUF_NOINLINE ::protobuf::MessageOfChest*
    Arena::CreateMaybeMessage<::protobuf::MessageOfChest>(Arena* arena)
{
    return Arena::CreateMessageInternal<::protobuf::MessageOfChest>(arena);
}
template<>
PROTOBUF_NOINLINE ::protobuf::MessageOfMap_Row*
    Arena::CreateMaybeMessage<::protobuf::MessageOfMap_Row>(Arena* arena)
{
    return Arena::CreateMessageInternal<::protobuf::MessageOfMap_Row>(arena);
}
template<>
PROTOBUF_NOINLINE ::protobuf::MessageOfMap*
    Arena::CreateMaybeMessage<::protobuf::MessageOfMap>(Arena* arena)
{
    return Arena::CreateMessageInternal<::protobuf::MessageOfMap>(arena);
}
template<>
PROTOBUF_NOINLINE ::protobuf::MessageOfNews*
    Arena::CreateMaybeMessage<::protobuf::MessageOfNews>(Arena* arena)
{
    return Arena::CreateMessageInternal<::protobuf::MessageOfNews>(arena);
}
template<>
PROTOBUF_NOINLINE ::protobuf::MessageOfObj*
    Arena::CreateMaybeMessage<::protobuf::MessageOfObj>(Arena* arena)
{
    return Arena::CreateMessageInternal<::protobuf::MessageOfObj>(arena);
}
template<>
PROTOBUF_NOINLINE ::protobuf::MessageOfAll*
    Arena::CreateMaybeMessage<::protobuf::MessageOfAll>(Arena* arena)
{
    return Arena::CreateMessageInternal<::protobuf::MessageOfAll>(arena);
}
template<>
PROTOBUF_NOINLINE ::protobuf::MessageToClient*
    Arena::CreateMaybeMessage<::protobuf::MessageToClient>(Arena* arena)
{
    return Arena::CreateMessageInternal<::protobuf::MessageToClient>(arena);
}
template<>
PROTOBUF_NOINLINE ::protobuf::MoveRes*
    Arena::CreateMaybeMessage<::protobuf::MoveRes>(Arena* arena)
{
    return Arena::CreateMessageInternal<::protobuf::MoveRes>(arena);
}
template<>
PROTOBUF_NOINLINE ::protobuf::BoolRes*
    Arena::CreateMaybeMessage<::protobuf::BoolRes>(Arena* arena)
{
    return Arena::CreateMessageInternal<::protobuf::BoolRes>(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
